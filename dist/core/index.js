import http from 'http';

class BlockComponent {
 static setTick(interval_range,looping){
  return new Map().set("minecraft:tick",{
    interval_range:interval_range,
    looping:looping
  })
 }
 /**
  * 
  * @param {Array} custom_components 
  * @returns 
  */
  static setCustomComponents(custom_components){
    return new Map().set("minecraft:custom_components",[...custom_components])
  }
  /**
 * 创建一个用于 Minecraft 方块的变换对象，并返回一个 Map。
 * @param {number[]} [translation=[0, 0, 0]] - 平移向量 [x, y, z]。
 * @param {number[]} [scale=[1, 1, 1]] - 缩放向量 [x, y, z]。
 * @param {number[]} [scale_pivot=[0, 0, 0]] - 缩放的枢轴点 [x, y, z]。
 * @param {number[]} [rotation=[0, 0, 0]] - 旋转向量（角度）[x, y, z]。
 * @param {number[]} [rotation_pivot=[0, 0, 0]] - 旋转的枢轴点 [x, y, z]。
 * @returns {Map} - 一个包含变换数据的 Map 对象。
 * @throws {Error} - 如果任何参数无效，则抛出错误。
 */
  static setTransformation(
    translation = [0, 0, 0],
    scale = [1, 1, 1],
    scale_pivot = [0, 0, 0],
    rotation = [0, 0, 0],
    rotation_pivot = [0, 0, 0]
  ) {
    // 验证输入参数是否为有效的 3D 向量
    const validateVector = (vector, name) => {
      if (
        !Array.isArray(vector) ||
        vector.length !== 3 ||
        !vector.every((value) => typeof value === "number" && !isNaN(value))
      ) {
        throw new Error(`${name} 必须是一个包含 3 个有效数字的数组`);
      }
    };

    // 验证所有输入参数
    validateVector(translation, "translation");
    validateVector(scale, "scale");
    validateVector(scale_pivot, "scale_pivot");
    validateVector(rotation, "rotation");
    validateVector(rotation_pivot, "rotation_pivot");

    // 创建变换对象
    const transformation = {
      translation,
      scale,
      scale_pivot,
      rotation,
      rotation_pivot,
    };

    // 将变换对象存入 Map
    const transformationMap = new Map();
    transformationMap.set("minecraft:transformation", transformation);

    return transformationMap;
  }
  /**
   * 设置方块的呼吸行为。
   * @param {String} value - 呼吸行为，可选值为 "solid" 或 "air"。
   * @returns {Map} - 新的组件集合。
   */
  static setBreathability(value) {
    if (value !== "solid" && value !== "air") {
      throw new Error('breathability must be either "solid" or "air"');
    }
    return new Map().set("minecraft:breathability", value);
  }

  /**
   * 启用或禁用方块的碰撞箱。
   * @param {Boolean} enabled - 是否启用碰撞箱。
   * @returns {Map} - 新的组件集合。
   */
  static setCollisionBoxEnabled(enabled) {
    if (typeof enabled !== "boolean") {
      throw new Error('enabled must be a boolean');
    }
    return new Map().set("minecraft:collision_box", enabled);
  }

  /**
   * 设置自定义的碰撞箱。
   * @param {Array} origin - 碰撞箱的起点坐标 [x, y, z]。
   * @param {Array} size - 碰撞箱的大小 [width, height, depth]。
   * @returns {Map} - 新的组件集合。
   */
  static setCollisionBoxCustom(origin, size) {
    if (!Array.isArray(origin) || origin.length !== 3) {
      throw new Error('origin must be an array of 3 numbers');
    }
    if (!Array.isArray(size) || size.length !== 3) {
      throw new Error('size must be an array of 3 numbers');
    }

    const [x, y, z] = origin;
    const [width, height, depth] = size;

    if (x < -8 || x > 8 || y < 0 || y > 16 || z < -8 || z > 8) {
      throw new Error('origin must be in the range (-8, 0, -8) to (8, 16, 8)');
    }
    if (x + width < -8 || x + width > 8 || y + height < 0 || y + height > 16 || z + depth < -8 || z + depth > 8) {
      throw new Error('origin + size must be in the range (-8, 0, -8) to (8, 16, 8)');
    }

    return new Map().set("minecraft:collision_box", { origin, size });
  }

  /**
   * 设置方块的合成台属性。
   * @param {Array} craftingTags - 合成标签。
   * @param {String} tableName - 合成台名称。
   * @returns {Map} - 新的组件集合。
   */
  static setCraftingTable(craftingTags, tableName) {
    if (!Array.isArray(craftingTags) || craftingTags.length > 64) {
      throw new Error('craftingTags must be an array with a maximum of 64 tags');
    }
    for (const tag of craftingTags) {
      if (typeof tag !== "string" || tag.length > 64) {
        throw new Error('each crafting tag must be a string with a maximum of 64 characters');
      }
    }

    if (tableName && typeof tableName !== "string") {
      throw new Error('tableName must be a string');
    }

    return new Map().set("minecraft:crafting_table", {
      crafting_tags: craftingTags,
      table_name: tableName,
    });
  }

  /**
   * 启用或禁用方块的爆炸抗性。
   * @param {Boolean} enabled - 是否启用爆炸抗性。
   * @returns {Map} - 新的组件集合。
   */
  static setDestructibleByExplosionEnabled(enabled) {
    if (typeof enabled !== "boolean") {
      throw new Error('enabled must be a boolean');
    }
    return new Map().set("minecraft:destructible_by_explosion", enabled);
  }

  /**
   * 设置自定义的爆炸抗性。
   * @param {Number} explosionResistance - 爆炸抗性值。
   * @returns {Map} - 新的组件集合。
   */
  static setDestructibleByExplosionCustom(explosionResistance) {
    if (typeof explosionResistance !== "number") {
      throw new Error('explosionResistance must be a number');
    }
    return new Map().set("minecraft:destructible_by_explosion", {
      explosion_resistance: explosionResistance,
    });
  }

  /**
   * 启用或禁用方块的挖掘抗性。
   * @param {Boolean} enabled - 是否启用挖掘抗性。
   * @returns {Map} - 新的组件集合。
   */
  static setDestructibleByMiningEnabled(enabled) {
    if (typeof enabled !== "boolean") {
      throw new Error('enabled must be a boolean');
    }
    return new Map().set("minecraft:destructible_by_mining", enabled);
  }

  /**
   * 设置自定义的挖掘抗性。
   * @param {Number} secondsToDestroy - 破坏所需时间（秒）。
   * @param {Array} itemSpecificSpeeds - 特定工具的挖掘速度。
   * @returns {Map} - 新的组件集合。
   */
  static setDestructibleByMiningCustom(secondsToDestroy, itemSpecificSpeeds) {
    if (typeof secondsToDestroy !== "number") {
      throw new Error('secondsToDestroy must be a number');
    }

    if (itemSpecificSpeeds && Array.isArray(itemSpecificSpeeds)) {
      for (const speed of itemSpecificSpeeds) {
        if (typeof speed.destroy_speed !== "number") {
          throw new Error('destroy_speed must be a number');
        }
        if (!speed.item) {
          throw new Error('item is required in item_specific_speeds');
        }
      }
    }

    return new Map().set("minecraft:destructible_by_mining", {
      seconds_to_destroy: secondsToDestroy,
      item_specific_speeds: itemSpecificSpeeds,
    });
  }

  /**
   * 设置方块的显示名称。
   * @param {String} displayName - 显示名称。
   * @returns {Map} - 新的组件集合。
   */
  static setDisplayName(displayName) {
    if (typeof displayName !== "string") {
      throw new Error('displayName must be a string');
    }
    return new Map().set("minecraft:display_name", displayName);
  }

  /**
   * 启用或禁用方块的易燃性。
   * @param {Boolean} enabled - 是否启用易燃性。
   * @returns {Map} - 新的组件集合。
   */
  static setFlammableEnabled(enabled) {
    if (typeof enabled !== "boolean") {
      throw new Error('enabled must be a boolean');
    }
    return new Map().set("minecraft:flammable", enabled);
  }

  /**
   * 设置自定义的易燃性。
   * @param {Number} catchChanceModifier - 着火概率。
   * @param {Number} destroyChanceModifier - 被火焰摧毁的概率。
   * @returns {Map} - 新的组件集合。
   */
  static setFlammableCustom(catchChanceModifier, destroyChanceModifier) {
    if (typeof catchChanceModifier !== "number" || catchChanceModifier < 0) {
      throw new Error('catchChanceModifier must be a number greater than or equal to 0');
    }
    if (typeof destroyChanceModifier !== "number" || destroyChanceModifier < 0) {
      throw new Error('destroyChanceModifier must be a number greater than or equal to 0');
    }

    return new Map().set("minecraft:flammable", {
      catch_chance_modifier: catchChanceModifier,
      destroy_chance_modifier: destroyChanceModifier,
    });
  }

  /**
   * 设置方块的摩擦力。
   * @param {Number} value - 摩擦力值，范围为 0.0 到 0.9。
   * @returns {Map} - 新的组件集合。
   */
  static setFriction(value) {
    if (typeof value !== "number" || value < 0.0 || value > 0.9) {
      throw new Error('friction must be a number between 0.0 and 0.9');
    }
    return new Map().set("minecraft:friction", value);
  }

  /**
   * 设置方块的几何模型。
   * @param {String} identifier - 几何模型标识符。
   * @param {Object} bone_visibility - 骨骼可见性配置。
   * @returns {Map} - 新的组件集合。
   */
  static setGeometry(identifier, bone_visibility) {
    if (typeof identifier !== "string") {
      throw new Error('identifier must be a string');
    }
    return new Map().set("minecraft:geometry",
      {
        identifier: identifier,
        bone_visibility: bone_visibility
      });
  }

  /**
   * 设置方块的物品视觉属性。
   * @param {String} geometry - 几何模型标识符。
   * @param {Object} materialInstances - 材质实例配置。
   * @returns {Map} - 新的组件集合。
   */
  static setItemVisual(geometry, materialInstances) {
    if (typeof geometry !== "string") {
      throw new Error('geometry must be a string');
    }
    if (!materialInstances || typeof materialInstances !== "object") {
      throw new Error('materialInstances must be an object');
    }

    return new Map().set("minecraft:item_visual", {
      geometry,
      material_instances: materialInstances,
    });
  }

  /**
   * 设置方块的光衰减值。
   * @param {Number} value - 光的衰减值，范围为 0 到 15。
   * @returns {Map} - 新的组件集合。
   */
  static setLightDampening(value) {
    if (typeof value !== "number" || value < 0 || value > 15) {
      throw new Error('lightDampening must be a number between 0 and 15');
    }
    return new Map().set("minecraft:light_dampening", value);
  }

  /**
   * 设置方块的光照强度。
   * @param {Number} value - 光照强度，范围为 0 到 15。
   * @returns {Map} - 新的组件集合。
   */
  static setLightEmission(value) {
    if (typeof value !== "number" || value < 0 || value > 15) {
      throw new Error('lightEmission must be a number between 0 and 15');
    }
    return new Map().set("minecraft:light_emission", value);
  }

  /**
   * 设置方块的液体检测属性。
   * @param {Boolean} canContainLiquid - 是否可以包含液体。
   * @param {String} liquidType - 液体类型。
   * @param {String} onLiquidTouches - 对液体的反应方式。
   * @param {Array} stopsLiquidFlowingFromDirection - 阻止液体流动的方向。
   * @returns {Map} - 新的组件集合。
   */
  static setLiquidDetection(canContainLiquid, liquidType, onLiquidTouches, stopsLiquidFlowingFromDirection) {
    if (typeof canContainLiquid !== "boolean") {
      throw new Error('canContainLiquid must be a boolean');
    }

    if (liquidType && liquidType !== "water") {
      throw new Error('liquidType must be "water"');
    }

    const validReactions = ["blocking", "broken", "popped", "no_reaction"];
    if (onLiquidTouches && !validReactions.includes(onLiquidTouches)) {
      throw new Error('onLiquidTouches must be one of: "blocking", "broken", "popped", "no_reaction"');
    }

    const validDirections = ["up", "down", "north", "south", "east", "west"];
    if (stopsLiquidFlowingFromDirection && Array.isArray(stopsLiquidFlowingFromDirection)) {
      for (const direction of stopsLiquidFlowingFromDirection) {
        if (!validDirections.includes(direction)) {
          throw new Error('stopsLiquidFlowingFromDirection must be one of: "up", "down", "north", "south", "east", "west"');
        }
      }
    }

    return new Map().set("minecraft:liquid_detection", {
      can_contain_liquid: canContainLiquid,
      liquid_type: liquidType,
      on_liquid_touches: onLiquidTouches,
      stops_liquid_flowing_from_direction: stopsLiquidFlowingFromDirection,
    });
  }

  /**
   * 设置方块的战利品表路径。
   * @param {String} path - 战利品表路径。
   * @returns {Map} - 新的组件集合。
   */
  static setLoot(path) {
    if (typeof path !== "string" || path.length > 256) {
      throw new Error('path must be a string with a maximum length of 256 characters');
    }
    return new Map().set("minecraft:loot", path);
  }

  /**
   * 设置方块的地图颜色。
   * @param {String|Array} value - 地图颜色，可以是十六进制字符串或 RGB 数组。
   * @returns {Map} - 新的组件集合。
   */
  static setMapColor(value) {
    if (typeof value === "string") {
      if (!/^#[0-9A-Fa-f]{6}$/.test(value)) {
        throw new Error('mapColor must be a valid hex string (e.g., "#FFFFFF")');
      }
    } else if (Array.isArray(value)) {
      if (value.length !== 3 || value.some((v) => typeof v !== "number" || v < 0 || v > 255)) {
        throw new Error('mapColor must be a valid RGB array (e.g., [255, 255, 255])');
      }
    } else {
      throw new Error('mapColor must be a hex string or an RGB array');
    }

    return new Map().set("minecraft:map_color", value);
  }

  /**
   * 设置方块的材质实例。
   * @param {Object} instances - 材质实例配置。
   * @returns {Map} - 新的组件集合。
   */
  static setMaterialInstances(instances) {
    if (!instances || typeof instances !== "object") {
      throw new Error('instances must be an object');
    }

    if (!instances["*"] ) {
      throw new Error('material_instances must include a "*" material instance');
    }

    for (const [key, value] of Object.entries(instances)) {
      if (typeof value === "object") {
        if (!value.texture || typeof value.texture !== "string") {
          throw new Error(`material instance "${key}" must have a texture`);
        }
        if (value.ambient_occlusion !== undefined && typeof value.ambient_occlusion !== "boolean" && typeof value.ambient_occlusion !== "number") {
          throw new Error(`ambient_occlusion in material instance "${key}" must be a boolean or number`);
        }
        if (value.face_dimming !== undefined && typeof value.face_dimming !== "boolean") {
          throw new Error(`face_dimming in material instance "${key}" must be a boolean`);
        }
        if (value.render_method && !["opaque", "double_sided", "blend", "alpha_test", "alpha_test_single_sided"].includes(value.render_method)) {
          throw new Error(`render_method in material instance "${key}" must be one of: opaque, double_sided, blend, alpha_test, alpha_test_single_sided`);
        }
      } else if (typeof value !== "string") {
        throw new Error(`material instance "${key}" must be an object or a string`);
      }
    }

    return new Map().set("minecraft:material_instances", instances);
  }

  /**
   * 设置方块的放置过滤条件。
   * @param {Array} conditions - 放置条件列表。
   * @returns {Map} - 新的组件集合。
   */
  static setPlacementFilter(conditions) {
    if (!Array.isArray(conditions) || conditions.length === 0 || conditions.length > 64) {
      throw new Error('conditions must be an array with 1 to 64 elements');
    }

    for (const condition of conditions) {
      if (condition.allowed_faces && Array.isArray(condition.allowed_faces)) {
        const validFaces = ["up", "down", "north", "south", "east", "west", "side", "all"];
        for (const face of condition.allowed_faces) {
          if (!validFaces.includes(face)) {
            throw new Error(`allowed_faces must be one of: ${validFaces.join(", ")}`);
          }
        }
      }

      if (condition.block_filter && Array.isArray(condition.block_filter)) {
        for (const block of condition.block_filter) {
          if (typeof block === "string") {
            continue;
          } else if (typeof block === "object" && block !== null) {
            if (block.tags && typeof block.tags !== "string") {
              throw new Error('tags in block_filter must be a string');
            }
            if (block.name && typeof block.name !== "string") {
              throw new Error('name in block_filter must be a string');
            }
            if (block.states && typeof block.states !== "object") {
              throw new Error('states in block_filter must be an object');
            }
          } else {
            throw new Error('block_filter must be a string or a BlockDescriptor object');
          }
        }
      }

      if (!condition.allowed_faces && !condition.block_filter) {
        throw new Error('each condition must have at least one of allowed_faces or block_filter');
      }
    }

    return new Map().set("minecraft:placement_filter", { conditions });
  }

  /**
   * 设置方块的红石导电性。
   * @param {Boolean} allowsWireToStepDown - 是否允许红石线向下阶梯连接。
   * @param {Boolean} redstoneConductor - 方块是否可以被红石信号激活。
   * @returns {Map} - 新的组件集合。
   */
  static setRedstoneConductivity(allowsWireToStepDown, redstoneConductor) {
    if (typeof allowsWireToStepDown !== "boolean") {
      throw new Error('allowsWireToStepDown must be a boolean');
    }
    if (typeof redstoneConductor !== "boolean") {
      throw new Error('redstoneConductor must be a boolean');
    }

    return new Map().set("minecraft:redstone_conductivity", {
      allows_wire_to_step_down: allowsWireToStepDown,
      redstone_conductor: redstoneConductor,
    });
  }

  /**
   * 启用或禁用方块的选择框。
   * @param {Boolean} enabled - 是否启用选择框。
   * @returns {Map} - 新的组件集合。
   */
  static setSelectionBoxEnabled(enabled) {
    if (typeof enabled !== "boolean") {
      throw new Error('enabled must be a boolean');
    }
    return new Map().set("minecraft:selection_box", enabled);
  }

  /**
   * 设置自定义的选择框。
   * @param {Array} origin - 选择框的起点坐标 [x, y, z]。
   * @param {Array} size - 选择框的大小 [width, height, depth]。
   * @returns {Map} - 新的组件集合。
   */
  static setSelectionBoxCustom(origin, size) {
    if (!Array.isArray(origin) || origin.length !== 3) {
      throw new Error('origin must be an array of 3 numbers');
    }
    if (!Array.isArray(size) || size.length !== 3) {
      throw new Error('size must be an array of 3 numbers');
    }

    const [x, y, z] = origin;
    const [width, height, depth] = size;

    if (x < -8 || x > 8 || y < 0 || y > 16 || z < -8 || z > 8) {
      throw new Error('origin must be in the range (-8, 0, -8) to (8, 16, 8)');
    }
    if (x + width < -8 || x + width > 8 || y + height < 0 || y + height > 16 || z + depth < -8 || z + depth > 8) {
      throw new Error('origin + size must be in the range (-8, 0, -8) to (8, 16, 8)');
    }

    return new Map().set("minecraft:selection_box", { origin, size });
  }

  /**
   * 将多个组件集合合并为一个。
   * @param {...Map} componentMaps - 多个组件集合。
   * @returns {Map} - 合并后的组件集合。
   */
  static combineComponents(...componentMaps) {
    return new Map(componentMaps.flatMap(map => [...map]));
  }

  /**
   * 获取当前组件的 JSON 表示。
   * @param {Map} components - 组件集合。
   * @returns {Object} - 组件的 JSON 对象。
   */
  static toJSON(components) {
    return Object.fromEntries(components);
  }
}

if (!Symbol.metadata) {
    //@ts-ignore
    Symbol.metadata = Symbol('[[metadata]]');
}
function getMetadata(target) {
    return target?.[Symbol.metadata];
}
function getOrCreateMetadata(target) {
    if (target === undefined || target === null) {
        return undefined;
    }
    const metadata = target?.[Symbol.metadata] ?? (target[Symbol.metadata] = {});
    return metadata;
}

// 因为无法判断其他代码实现的接口是否真的是RawType，所以用Symbol来标记
// 只要不export，其他代码就无法访问这个Symbol， 确保了唯一性
const IS_RAW_SYMBOL = Symbol('isRawJSON');
const f64 = (literal) => {
    // 判断是否可以转换为json原始值
    // 不可转换会SyntaxError
    const rawJSON = JSON.rawJSON(literal).rawJSON;
    return {
        [IS_RAW_SYMBOL]: true,
        rawJSON,
        valueOf() {
            return parseFloat(literal);
        }
    };
};
function isRawJSON(v) {
    return v?.[IS_RAW_SYMBOL] === true;
}

const rawTypes = [
    'string', 'boolean', 'number', 'undefined'
];
function jsonEncoderReplacer(_, v) {
    if (typeof v === null) {
        return null;
    }
    if (rawTypes.includes(typeof v)) {
        return JSON.rawJSON(v);
    }
    if (typeof v === 'object') {
        if (JSON.isRawJSON(v)) {
            return v;
        }
        if (isRawJSON(v)) {
            // 字符串再包装一遍
            return JSON.rawJSON(v.rawJSON);
        }
        return v;
    }
    if (typeof v === 'bigint') {
        return JSON.rawJSON(v.toString());
    }
    throw new Error('Unexpected value');
}
const defaultSerializer = instance => {
    return structuredClone(instance);
};
const serializerSymbol = Symbol('serializer');
const serializerMapping = new WeakMap();
function Serializable(serializer = defaultSerializer) {
    return (_, ctx) => {
        if (ctx.kind === 'class') {
            getOrCreateMetadata(ctx)[serializerSymbol] = serializer;
            return;
        }
        throw new Error('Serializable decorator can only be applied to classes');
    };
}
/**
 * 只能应用一个 Serializer
 *
 * 重复的 Serializer 会被覆盖
 * @param target
 * @param ctx
 */
// export function Serializer(target: CallableFunction, ctx: DecoratorContext) {
//     if (ctx.kind !== 'method') {
//         throw new Error('Serializer decorator can only be applied to methods')
//     }
//     const ctor = Reflect.getPrototypeOf(target)?.constructor as ConstructorOf<any>
//     if (!ctor) {
//         throw new Error('Cannot serialize an instance of an anonymous class')
//     }
//     serializerMapping.set(ctor, target as ISerializer)
// }
const Serializer = (target, prop, desc) => {
    console.log(target);
};
function serialize(inst) {
    const ctor = Reflect.getPrototypeOf(inst)?.constructor;
    if (!ctor) {
        throw new Error('Cannot serialize an instance of an anonymous class');
    }
    const serializer = getMetadata(ctor)?.[serializerSymbol]
        ?? serializerMapping.get(ctor)
        // 兼容旧版本， 未来会移除
        ?? inst.toJson?.bind?.(inst)
        ?? defaultSerializer;
    return serializer(inst);
}
const jsonEncodeDecoder = {
    encode(value) {
        return JSON.stringify(value, jsonEncoderReplacer);
    },
    decode: JSON.parse
};
function encode(value, encodeDecoder = jsonEncodeDecoder) {
    return encodeDecoder.encode(value);
}
function decode(value, encodeDecoder = jsonEncodeDecoder) {
    return encodeDecoder.decode(value);
}

class AddonMenuCategory{
    constructor(category,group,is_hidden){
        this.category = category;
        this.group = group ;
        this.is_hidden_in_commands = is_hidden;
    }
}

class AddonBlock {
    /**
     * Addon方块类
     * @param {string} format_version 格式版本
     * @param {AddonBlockDefinition} definitions 方块定义
     */
    constructor(format_version,definitions){
        this.format_version = format_version;
        this.definitions = definitions;
    }
    @Serializer
    toObject(){
        return {
            format_version:this.format_version,
            ["minecraft:block"]:this.definitions
        }
    }
}

class AddonBlockDefinition{
    /**
     * 方块定义类
     * @param {AddonBlockDescription} description 方块描述
     * @param {Object} components 方块组件
     * @param {Array} permutations 方块变体
     */
    constructor(description,components,permutations=[]){
        this.description = description;
        this.components = components;
        this.permutations = permutations;
    }
}

class AddonBlockDescription {
    /**
     * 方块描述类
     * @param {string} identifier 唯一标识符
     * @param {map} traits 方块特性
     * @param {map} states 方块状态
     * @param {AddonMenuCategory} menu_category 
     */
    constructor(identifier, traits, states, menu_category){
        this.identifier = identifier;
        this.traits = traits;
        this.states = states;
        this.menu_category = menu_category;
    }
}

class BasicBlock {
    /**
     * 基础方块类
     * @param {string} identifier 方块唯一标识符
     * @param {string} category 菜单栏分类 可选："construction", "nature", "equipment", "items", and "none"
     * @param {Array} textures_arr 纹理数组 [上,下,东,西,南,北]
     * @param {Object} options 可选参数
     * @param {string} options.group 分组，默认为 "construction"
     * @param {boolean} options.hide_in_command 是否在命令中隐藏，默认为 false
     */
    constructor(identifier, category, textures_arr, options = {}) {
        // 参数校验
        if (!identifier || typeof identifier !== "string") {
            throw new Error("identifier is required and must be a string");
        }
        if (!category || typeof category !== "string") {
            throw new Error("category is required and must be a string");
        }
        if (!Array.isArray(textures_arr) ) {
            throw new Error("textures_arr must be an array ");
        }
        if (textures_arr.length !== 6) {
            for (let i = textures_arr.length; i < 6; i++) {
                textures_arr.push(textures_arr[0]);
            }
        }

        const { hide_in_command = false } = options;

        this.identifier = identifier;
        this.category = category;
        this.textures = textures_arr;
        this.group = options.group;
        this.hide_in_command = hide_in_command;
        this.traits = new Map();
        this.states = new Map();
        this.components = new Map();
        this.permutations = [];
    }
    
    getId() {
        return this.identifier;
    }

    registerTrait(key,value){
        this.traits.set(key,value);
        return this;
    }

    registerState(key,value){
        this.states.set(key,value);
        return this;
    }

    /**
     * 添加组件
     * @param {Map} componentMap 组件 Map
     */
    addComponent(componentMap) {
        if (!componentMap || !(componentMap instanceof Map)) {
            throw new Error("componentMap is required and must be a Map");
        }
        for (const [key, value] of componentMap.entries()) {
            this.components.set(key, value);
        }
        return this;
    }

    /**
     * 移除组件
     * @param {string} key 组件名称
     */
    removeComponent(key) {
        if (!key || typeof key !== "string") {
            throw new Error("key is required and must be a string");
        }
        this.components.delete(key);
        return this;
    }

    /**
     * 添加方块变体
     * @param {string} condition 变体条件
     * @param {Map} componentMap 组件 Map
     */
    addPermutation(condition, componentMap) {
        if (!condition || typeof condition !== "string") {
            throw new Error("condition is required and must be a string");
        }
        if (!componentMap || !(componentMap instanceof Map)) {
            throw new Error("componentMap is required and must be a Map");
        }
        this.permutations.push({
            condition: condition,
            components: Object.fromEntries(componentMap)
        });
        return this;
    }

    /**
     * 将方块对象转换为 JSON 格式
     * @returns {Object} JSON 格式的方块对象
     */
    @Serializer
    toObject() {
        return serialize(new AddonBlock(
            "1.21.50", // 格式版本
            new AddonBlockDefinition(
                new AddonBlockDescription(
                    this.identifier,
                    Object.fromEntries(this.traits), // 将 Map 转换为普通对象
                    Object.fromEntries(this.states), // 将 Map 转换为普通对象
                    new AddonMenuCategory(
                        this.category,
                        this.group,
                        this.hide_in_command
                    )
                ),
                Object.fromEntries(this.components), // 将 Map 转换为普通对象
                this.permutations
            )
        ))
    }
}

class Block extends BasicBlock {
    /**
     * 方块类
     * @param {string} identifier 方块的唯一标识符
     * @param {string} category 方块的分类 "construction", "nature", "equipment", "items", and "none"
     * @param {Array} variantDatas 方块的变体数据，包含每个变体的状态标签和纹理
     * @param {Object} options 可选参数
     * @param {string} options.group 分组，默认为 "construction"
     * @param {boolean} options.hide_in_command 是否在命令中隐藏，默认为 false
     * @param {boolean} options.ambient_occlusion 是否应用环境光遮蔽，默认为 false
     * @param {boolean} options.face_dimming 是否根据面的方向进行亮度调整，默认为 false
     * @param {string} options.render_method 渲染方法，默认为 "alpha_test"
     */
    constructor(identifier, category, variantDatas, options = {}) {
        console.log("options:",options);
        // 检查 variantDatas 是否有效
        if (!Array.isArray(variantDatas) || variantDatas.length === 0) {
            throw new Error('variantDatas 必须是一个非空数组');
        }

        // 调用父类构造函数
        super(identifier, category, variantDatas[0]["textures"], options);

        this.options = options;
        this.variantDatas = variantDatas;

        // 初始化方块
        this.#init();
    }

    /**
     * 初始化方块（私有方法）
     * @param {Array} variantDatas 方块的变体数据
     * @param {Object} options 材质属性
     */
    #init() {
        // 注册方块状态
        this.registerState("sapdon:block_variant_tag", {
            values: {
                min: 0,
                max: this.variantDatas.length > 1 ? this.variantDatas.length - 1 : 1
            }
        });

        // 为每个变体创建材质实例
        this.variantDatas.forEach((variant, index) => {
            const material_instances = this.#createMaterialInstances(variant.textures, this.options);
            const condition = `q.block_state('sapdon:block_variant_tag') == ${index}`;

            // 添加材质实例组件
            this.addPermutation(condition, BlockComponent.setMaterialInstances(material_instances));
        });
    }

    /**
     * 创建材质实例（私有方法）
     * @param {Array} textures 纹理数组
     * @param {Object} options 材质属性
     * @returns {Object} 材质实例对象
     */
    #createMaterialInstances(textures) {
        
        
        const material_instances = {};
        const sides = ["*", "up", "down", "north", "south", "east", "west"];
        
        textures.forEach((texture, index) => {
            material_instances[sides[index]] = {
                texture: texture,
                ambient_occlusion: this.options.ambient_occlusion || true,
                face_dimming: this.options.face_dimming || true,
                render_method: this.options.render_method || "alpha_test"
            };
        });

        return material_instances;
    }

    addVariantComponent(variantIndex, componentMap) {
        if (variantIndex < 0 || variantIndex >= this.variantDatas.length) {
            throw new Error('variantIndex 必须在 0 到 variantDatas.length-1 之间');
        }
        const condition = `q.block_state('sapdon:block_variant_tag') == ${variantIndex}`;
        this.addPermutation(condition, componentMap);
        return this;
    }
}

/*
// 示例用法
const block = new Block("sapdon:block", "construction", [
    { stateTag: 1, textures: ["garlic_stage_0"] },
    { stateTag: 2, textures: ["garlic_stage_1"] },
    { stateTag: 3, textures: ["garlic_stage_2"] },
    { stateTag: 4, textures: ["garlic_stage_3"] },
], {
    ambient_occlusion: false,
    face_dimming: false,
    render_method: "blend"
});
console.log(block);
debugger
*/

class CropBlock extends Block {
    /**
     * 作物方块类
     * @param {string} identifier 方块的唯一标识符
     * @param {string} category 方块的分类 "construction", "nature", "equipment", "items", and "none"
     * @param {Array} variantDatas 方块的变体数据，包含每个变体的状态标签和纹理
     * @param {Object} options 可选参数
     * @param {string} options.group 分组，默认为 "construction"
     * @param {boolean} options.hide_in_command 是否在命令中隐藏，默认为 false
     * @param {boolean} options.ambient_occlusion 是否应用环境光遮蔽，默认为 false
     * @param {boolean} options.face_dimming 是否根据面的方向进行亮度调整，默认为 false
     * @param {string} options.render_method 渲染方法，默认为 "alpha_test"
     */
    constructor(identifier, category, variantDatas, options = {}){
        super(identifier, category, variantDatas, options);
        this.stageNum = variantDatas.length;
        this.addComponent(
            BlockComponent.combineComponents(
                BlockComponent.setCollisionBoxEnabled(false),
                BlockComponent.setGeometry("geometry.crop"),
                BlockComponent.setLightEmission(0),
                BlockComponent.setPlacementFilter(
                    [{
                        "allowed_faces": ["up"],
                        "block_filter": ["minecraft:farmland"]
                    }]
                )
            )
        );
        for (let i = 0; i < this.stageNum; i++) {
            this.addVariantComponent(i,
                BlockComponent.setSelectionBoxCustom(
                    [-8, 0, -8],
                    [16,(i + 1)*this.stageNum/16,16]
                )
            );
        }
    }
}

class GeometryBlock extends BasicBlock{
    /**
     * 带模型方块类
     * @param {string} identifier 方块标识符 由命名空间和方块名组成 例如 "my_mod:stone"
     * @param {string} category 方块的分类 "construction", "nature", "equipment", "items", and "none"
     * @param {string} geometry 模型标识符
     * @param {Object} material_instances 材质实例对象
     * @param {Object} options 可选参数
     */
    constructor(identifier, category, geometry, material_instances, options = {}) {
        super(identifier, category, [material_instances["*"]["texture"]], options);
        this.addComponent(
            BlockComponent.combineComponents(
                BlockComponent.setGeometry(geometry),
                BlockComponent.setMaterialInstances(material_instances)
            )
        );
    }
}

class AddonOreFeature {
    constructor(format_version,definition) {
        this.format_version = format_version;
        this.definition = definition;
    }
    @Serializer
    toObject(){
        return {
            format_version: this.format_version,
            ["minecraft:ore_feature"]: this.definition
        }
    }
}

class AddonOreFeatureDescription {
    constructor(identifier){
        this.identifier = identifier;
    }
}

class AddonOreFeatureDefinition {
    constructor(description,count,replace_rules){
        this.description = description;
        this.count = count;
        this.replace_rules = replace_rules;
    }
}

class OreFeature {
    constructor(identifier,count,replace_rules){
        this.identifier = identifier;
        this.count = count;
        this.replace_rules = replace_rules;
    }
    @Serializer
    toObject(){
        return serialize(new AddonOreFeature(
            "1.17.0",
            new AddonOreFeatureDefinition(
                new AddonOreFeatureDescription(this.identifier),
                this.count,
                this.replace_rules
            )
        ))
    }
}

/**
 * 表示生物群系过滤条件的类
 */
class BiomeFilter {
    constructor() {
        this.filters = [];
    }

    /**
     * 添加一个逻辑条件组（如 any_of, all_of）
     * @param {"any_of" | "all_of"} logicType - 逻辑类型
     * @param {Array<Object>} conditions - 条件数组
     * @returns {BiomeFilter} 返回自身以支持链式调用
     */
    addLogicGroup(logicType, conditions) {
        this.filters.push({ [logicType]: conditions });
        return this;
    }

    /**
     * 添加一个简单条件（如 has_biome_tag）
     * @param {string} test - 测试类型（如 "has_biome_tag"）
     * @param {"==" | "!="} operator - 操作符
     * @param {string} value - 目标值（如 "overworld"）
     * @returns {BiomeFilter} 返回自身以支持链式调用
     */
    addSimpleCondition(test, operator, value) {
        this.filters.push({ test, operator, value });
        return this;
    }

    /**
     * 转换为 JSON 格式
     * @returns {Array<Object>} 返回生物群系过滤条件数组
     */
    @Serializer
    toObject() {
        return this.filters;
    }
}

/**
 * 表示单个坐标轴（x/y/z）分布规则的类
 */
class CoordinateDistribution {
    /**
     * @param {"uniform" | "triangle"} distribution - 分布类型
     * @param {Array<number>} extent - 范围（如 [0, 16]）
     */
    constructor(distribution = "uniform", extent = [0, 16]) {
        this.distribution = distribution;
        this.extent = extent;
    }

    /**
     * 转换为 JSON 格式
     * @returns {Object} 返回坐标分布配置
     */
    @Serializer
    toObject() {
        return {
            distribution: this.distribution,
            extent: this.extent
        };
    }
}

class AddonFeatureRule {
    constructor(format_version,denifition){
        this.format_version = format_version;
        this.denifition = denifition;
    }
    @Serializer
    toObject(){
        return {
            format_version: this.format_version,
            ["minecraft:feature_rules"]: this.denifition
        }
    }
}

class AddonFeatureRuleDenifition {
    constructor(description,conditions,distribution){
        this.description = description;
        this.conditions = conditions;
        this.distribution = distribution;
    }
}

class AddonFeatureRuleDecription {
    constructor(identifier,places_feature){
        this.identifier = identifier;
        this.places_feature = places_feature;
    }
}

/**
 * 表示功能规则生成条件的类
 */
class FeatureConditions {
    constructor() {
        this.conditions = {
            placement_pass: "underground_pass", // 默认值
            "minecraft:biome_filter": []
        };
    }

    /**
     * 设置生成阶段（placement_pass）
     * @param {string} pass - 生成阶段标识符（如 "underground_pass"）
     * @returns {FeatureConditions} 返回自身以支持链式调用
     */
    setPlacementPass(pass) {
        this.conditions.placement_pass = pass;
        return this;
    }

    /**
     * 设置生物群系过滤器
     * @param {BiomeFilter} biomeFilter - 生物群系过滤条件对象
     * @returns {FeatureConditions} 返回自身以支持链式调用
     */
    setBiomeFilter(biomeFilter) {
        this.conditions["minecraft:biome_filter"] = serialize(biomeFilter);
        return this;
    }

    /**
     * 转换为 JSON 格式
     * @returns {Object} 返回生成条件对象
     */
    @Serializer
    toObject() {
        return this.conditions;
    }
}

/**
 * 表示功能规则分布配置的类
 */
class FeatureDistribution {
    constructor() {
        this.distribution = {
            iterations: 10, // 默认值
            coordinate_eval_order: "zyx",
            x: serialize(new CoordinateDistribution()),
            y: serialize(new CoordinateDistribution()),
            z: serialize(new CoordinateDistribution()),
        };
    }

    /**
     * 设置迭代次数
     * @param {number} iterations - 放置尝试次数
     * @returns {FeatureDistribution} 返回自身以支持链式调用
     */
    setIterations(iterations) {
        this.distribution.iterations = iterations;
        return this;
    }

    /**
     * 设置坐标轴的分布规则
     * @param {"x" | "y" | "z"} axis - 坐标轴
     * @param {CoordinateDistribution} config - 分布配置
     * @returns {FeatureDistribution} 返回自身以支持链式调用
     */
    setAxisDistribution(axis, config) {
        this.distribution[axis] = serialize(config);
        return this;
    }

    /**
     * 转换为 JSON 格式
     * @returns {Object} 返回分布规则对象
     */
    @Serializer
    toObject() {
        return this.distribution;
    }
}

class FeatureRule {
  constructor(identifier,places_feature) {
    this.identifier = identifier;   
    this.places_feature = places_feature;
    this.condition = new FeatureConditions();
    this.distribution = new FeatureDistribution();
  }
  setPlacementPass(pass) {
    this.condition.setPlacementPass(pass);
  }
  setBiomeFilter(biomeFilter) {
    this.condition.setBiomeFilter(biomeFilter);
  }
  setIterations(iterations) {
    this.distribution.setIterations(iterations);
  }
  setAxisDistribution(axis, config) {
    this.distribution.setAxisDistribution(axis, config);
  }
  @Serializer
    toObject(){
    return serialize(new AddonFeatureRule(
        "1.13.0",
        new AddonFeatureRuleDenifition(
            new AddonFeatureRuleDecription(
                this.identifier,
                this.places_feature
            ),
            serialize(this.condition),
            serialize(this.distribution)
        ))
    )
  }
}

class OreBlock{
    
    constructor(identifier, category, textures_arr, options = {}){
        this.block = new BasicBlock(identifier, category, textures_arr, options);
        this.feature = new OreFeature(`${identifier}_ore_feature`,6,[
            {
                "places_block": identifier,
                "may_replace": ["minecraft:stone"]
            },
        ]);
        this.feature_rules = new FeatureRule(`${identifier}_orefeatre_rule`,`${identifier}_ore_feature`);
        this.feature_rules.condition.setPlacementPass("underground_pass").setBiomeFilter(
            new BiomeFilter().addLogicGroup("any_of",[
                { test: "has_biome_tag", operator: "==", value: "overworld" },
                { test: "has_biome_tag", operator: "==", value: "overworld_generation" }
            ])
        );
        this.feature_rules.distribution.setIterations(10)
        .setAxisDistribution("x",new CoordinateDistribution("uniform",[0,16]))
        .setAxisDistribution("y",new CoordinateDistribution("uniform",[0,64]))
        .setAxisDistribution("z",new CoordinateDistribution("uniform",[0,16]));

    }
}

const RotationTypes = {
    CARDINAL: "cardinal", // 北、南、东、西
    FACING: "facing", // 上、下、北、南、东、西
    BLOCK_FACE: "block_face", // 上、下、北、南、东、西（与 FACING 类似，但用途不同）
    LOG: "log" // 原木旋转（X、Y、Z 轴对齐）
};

class RotatableBlock extends BasicBlock {
    /**
     * 可旋转方块类
     * @param {string} identifier 方块唯一标识符
     * @param {string} category 菜单栏分类
     * @param {Array} textures_arr 纹理数组 [上,下,东,西,南,北]
     * @param {Object} options 可选参数
     * @param {string} options.group 分组，默认为 "construction"
     * @param {boolean} options.hide_in_command 是否在命令中隐藏，默认为 false
     * @param {string} options.rotationType 旋转类型，默认为 "cardinal"
     * @param {number} options.yRotationOffset 初始旋转偏移量，默认为 180
     */
    constructor(identifier, category, textures_arr, options = {}) {
        // 调用父类构造函数
        super(identifier, category, textures_arr, options);

        const {
            rotationType = RotationTypes.CARDINAL,
            yRotationOffset = 180
        } = options;

        // 根据旋转类型注册特性和添加变体
        this.#setupRotation(rotationType, yRotationOffset);
    }

    /**
     * 根据旋转类型设置特性和变体
     * @param {string} rotationType 旋转类型
     * @param {number} yRotationOffset 初始旋转偏移量
     */
    #setupRotation(rotationType, yRotationOffset) {
        switch (rotationType) {
            case RotationTypes.CARDINAL:
                // 北、南、东、西
                this.registerTrait("minecraft:placement_direction", {
                    enabled_states: ["minecraft:cardinal_direction"],
                    y_rotation_offset: yRotationOffset
                });
                this.#addCardinalDirectionPermutations();
                break;

            case RotationTypes.FACING:
                // 上、下、北、南、东、西
                this.registerTrait("minecraft:placement_direction", {
                    enabled_states: ["minecraft:facing_direction"]
                });
                this.#addFacingDirectionPermutations();
                break;

            case RotationTypes.BLOCK_FACE:
                // 上、下、北、南、东、西（与 FACING 类似，但用途不同）
                this.registerTrait("minecraft:placement_position", {
                    enabled_states: ["minecraft:block_face"]
                });
                this.#addBlockFacePermutations();
                break;

            case RotationTypes.LOG:
                // 原木旋转（X、Y、Z 轴对齐）
                this.registerTrait("minecraft:placement_position", {
                    enabled_states: ["minecraft:block_face"]
                });
                this.#addLogRotationPermutations();
                break;

            default:
                throw new Error(`Unknown rotation type: ${rotationType}`);
        }
    }

    /**
     * 添加 Cardinal Direction 旋转变体
     */
    #addCardinalDirectionPermutations() {
        this.addPermutation("q.block_state('minecraft:cardinal_direction') == 'north'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 0, 0])
        )
        .addPermutation("q.block_state('minecraft:cardinal_direction') == 'south'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 90, 0])
        )
        .addPermutation("q.block_state('minecraft:cardinal_direction') == 'east'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 180, 0])
        )
        .addPermutation("q.block_state('minecraft:cardinal_direction') == 'west'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [0, -90, 0])
        );
    }

    /**
     * 添加 Facing Direction 旋转变体
     */
    #addFacingDirectionPermutations() {
        this.addPermutation("q.block_state('minecraft:facing_direction') == 'down'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [-90, 0, 0] )
        )
        .addPermutation("q.block_state('minecraft:facing_direction') == 'up'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [90, 0, 0])
        )
        .addPermutation("q.block_state('minecraft:facing_direction') == 'north'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 0, 0])
        )
        .addPermutation("q.block_state('minecraft:facing_direction') == 'west'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 90, 0])
        )
        .addPermutation("q.block_state('minecraft:facing_direction') == 'south'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1],[0, 0, 0], [0, 180, 0])
        )
        .addPermutation("q.block_state('minecraft:facing_direction') == 'east'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1],[0, 0, 0], [0, -90, 0], )
        );
    }

    /**
     * 添加 Block Face 旋转变体
     */
    #addBlockFacePermutations() {
        this.addPermutation("q.block_state('minecraft:block_face') == 'down'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [-90, 0, 0], [0, 0, 0])
        )
        .addPermutation("q.block_state('minecraft:block_face') == 'up'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [90, 0, 0], [0, 0, 0])
        )
        .addPermutation("q.block_state('minecraft:block_face') == 'north'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 0, 0])
        )
        .addPermutation("q.block_state('minecraft:block_face') == 'south'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 180, 0], [0, 90, 0])
        )
        .addPermutation("q.block_state('minecraft:block_face') == 'east'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 90, 0], [0, 180, 0])
        )
        .addPermutation("q.block_state('minecraft:block_face') == 'west'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, -90, 0], [0, -90, 0])
        );
    }

    /**
     * 添加 Log Rotation 旋转变体
     */
    #addLogRotationPermutations() {
        this.addPermutation("q.block_state('minecraft:block_face') == 'west' || q.block_state('minecraft:block_face') == 'east'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 90], [0, 0, 0])
        )
        .addPermutation("q.block_state('minecraft:block_face') == 'down' || q.block_state('minecraft:block_face') == 'up'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [0, 0, 0], [0, 0, 0])
        )
        .addPermutation("q.block_state('minecraft:block_face') == 'north' || q.block_state('minecraft:block_face') == 'south'",
            BlockComponent.setTransformation([0, 0, 0], [1, 1, 1], [90, 0, 0], [0, 0, 0])
        );
    }
}

const devServerConfig = {
    port: 49037
};

const {
    port: port$1
} = devServerConfig;

async function cliRequest(path, ...params) {
    try {
        await fetch(`http://localhost:${port$1}/${path}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: encode(params)
        });
    } catch (error) {
        console.error(error);
        console.error('尝试在构建脚本中使用 server.startDevServer() 启动开发服务器');
    }
}

const { port } = devServerConfig;
class DevelopmentServer {
    cliServerHandlers = new Map();
    listening = false;
    isListening() {
        return this.listening;
    }
    bootstrap() {
        this.listening = true;
        const svr = http.createServer(async (req, res) => {
            const handler = this.cliServerHandlers.get((req.url ?? '/').slice(1));
            if (handler) {
                try {
                    const { promise, resolve, reject } = Promise.withResolvers();
                    let buf = Buffer.alloc(0);
                    req.on('data', chunk => buf = Buffer.concat([buf, chunk]));
                    req.on('end', () => {
                        try {
                            resolve(decode(buf));
                        }
                        catch (error) {
                            reject(error);
                        }
                    });
                    await handler(...await promise);
                }
                catch (error) {
                    console.error(error);
                    res.writeHead(500);
                    res.end();
                    return;
                }
                res.writeHead(200);
                res.end();
            }
            else {
                res.writeHead(404);
                res.end();
            }
        }).listen(port, () => console.log(`Dev Server listening on port ${port}`));
        svr.on('error', () => this.listening = false);
        return svr;
    }
    handle(url, handler) {
        this.cliServerHandlers.set(url, handler);
    }
    getHandler(url) {
        return this.cliServerHandlers.get(url);
    }
    interceptHandler(url, interceptor) {
        const currentHandler = this.getHandler(url) ?? Function.prototype;
        const newHandler = interceptor(currentHandler);
        this.cliServerHandlers.set(url, newHandler);
        return newHandler;
    }
}
const server = new DevelopmentServer();

class UISystemRegistry {
    static #ui_system_map = {}
    static #ui_def_list = []
    // 注册 UISystem
    static registerUISystem(ui_system) {
        const ui_system_path = ui_system.path + ui_system.name + ".json";
        this.#ui_system_map[ui_system_path] = ui_system;
    }

    // 添加外部 UI 定义
    static addOuterUIdefs(ui_defs) {
        if (!Array.isArray(ui_defs)) {
            throw new Error("参数必须是一个数组")
        }
        this.#ui_def_list.concat(ui_defs);
    }

    static submit() {
        cliRequest("register-ui/def", this.#ui_def_list);
        cliRequest("register-ui/system", this.#ui_system_map);
    }
}

class UISystemRegistryServer {
    // 私有静态字段
    static #ui_system_map = {}
    static #ui_def_list = []

    // 获取所有注册的 UISystem
    static getUISystemList() {
        return Object.values(this.#ui_system_map)
    }

    // 获取 UI 定义列表（剔除 "ui/server_form"）
    static getUIdefList() {
        const combinedList = this.#ui_def_list.concat(Object.keys(this.#ui_system_map));
        return combinedList.filter(item => item !== "ui/server_form")
    }

    static startServer() {
        server.handle('register-ui/system', systems => {
            this.#ui_system_map = systems;
        });

        server.handle('register-ui/def', defs => {
            this.#ui_def_list = defs;
        });
    }
}

const clientRegistryData = [];
/**
 * Client
 */
class GRegistry {
    /**
     * 生成注册器
     * @param {string} name 文件名字
     * @param {string} root 根目录，如 "behavior"、"resource" 等
     * @param {string} path 数据的路径，如 "blocks/"、"items/"、"recipes/" 等
     * @param {string | object} data 实例 必须包含 toJson 方法
     */
    static register(name, root, path, data) {
        data = data === 'string'
            ? JSON.parse(data)
            : serialize(data);
        clientRegistryData.push({ name, root, path, data });
    }
    static submit() {
        cliRequest('submitGregistry', clientRegistryData);
    }
}
var registry;
(function (registry) {
    function submit() {
        GRegistry.submit();
        UISystemRegistry.submit();
        cliRequest('submit', {});
    }
    registry.submit = submit;
    function log(...info) {
        cliRequest('log', ...info);
    }
    registry.log = log;
})(registry || (registry = {}));

/**
 * 注册方块到注册表中。
 * @param {Block} block - 要注册的方块对象。
 */
const registerBlock = (block) => {
    if (!block || !block.identifier) {
        throw new Error("无效的方块对象或缺少 identifier。");
    }

    const block_name = block.identifier.replace(":", "_");
    GRegistry.register(block_name, "behavior", "blocks/", block);
};

const registerFeature$1 = (feature)=>{
    const feature_name = feature.identifier.split(":")[feature.identifier.split(":").length - 1];
    GRegistry.register(feature_name,"behavior","features/",feature);
};

const registerFeatureRule$1 = (feature_rule)=>{
    const feature_rule_name = feature_rule.identifier.split(":")[feature_rule.identifier.split(":").length - 1];
    GRegistry.register(feature_rule_name,"behavior","feature_rules/",feature_rule);
};

const BlockAPI = {
    /**
     * 创建一个基础方块。
     * @param {string} identifier - 方块的唯一标识符。
     * @param {string} category - 方块的分类（如 "construction"）。
     * @param {Array} textures_arr - 纹理数组，顺序为 [上, 下, 东, 西, 南, 北]。
     * @param {Object} options - 可选参数。
     * @param {string} options.group - 分组，默认为 "construction"。
     * @param {boolean} options.hide_in_command - 是否在命令中隐藏，默认为 false。
     * @returns {BasicBlock} 创建的基础方块对象。
     */
    createBasicBlock: function (identifier, category, textures_arr, options = {}) {
        if (!identifier || !category || !textures_arr ) {
            throw new Error("必须提供 identifier、category 和长度为 6 的 textures_arr。");
        }

        const block = new BasicBlock(identifier, category, textures_arr, {
            hide_in_command: false,
            ...options, // 用传入的选项覆盖默认值
        });

        registerBlock(block); // 调用注册方法
        return block;
    },

    /**
     * 创建一个普通方块。
     * @param {string} identifier - 方块的唯一标识符。
     * @param {string} category - 方块的分类（如 "construction"）。
     * @param {Array} variantDatas - 方块的变体数据，包含每个变体的状态标签和纹理。
     * @param {Object} options - 可选参数。
     * @param {string} options.group - 分组，默认为 "construction"。
     * @param {boolean} options.hide_in_command - 是否在命令中隐藏，默认为 false。
     * @param {boolean} options.ambient_occlusion - 是否应用环境光遮蔽，默认为 false。
     * @param {boolean} options.face_dimming - 是否根据面的方向进行亮度调整，默认为 false。
     * @param {string} options.render_method - 渲染方法，默认为 "alpha_test"。
     * @returns {Block} 创建的方块对象。
     */
    createBlock: function (identifier, category, variantDatas, options = {}) {
        if (!identifier || !category || !variantDatas || variantDatas.length === 0) {
            throw new Error("必须提供 identifier、category 和 variantDatas。");
        }

        const block = new Block(identifier, category, variantDatas, {
            hide_in_command: false,
            ambient_occlusion: false,
            face_dimming: false,
            render_method: "alpha_test",
            ...options, // 用传入的选项覆盖默认值
        });

        registerBlock(block); // 调用注册方法
        return block;
    },

    /**
     * 创建一个可旋转方块。
     * @param {string} identifier - 方块的唯一标识符。
     * @param {string} category - 方块的分类（如 "construction"）。
     * @param {Array} textures_arr - 纹理数组，顺序为 [上, 下, 东, 西, 南, 北]。
     * @param {Object} options - 可选参数。
     * @param {string} options.group - 分组，默认为 "construction"。
     * @param {boolean} options.hide_in_command - 是否在命令中隐藏，默认为 false。
     * @param {string} options.rotationType - 旋转类型，默认为 "cardinal"。
     * @param {number} options.yRotationOffset - 初始旋转偏移量，默认为 180。
     * @returns {RotatableBlock} 创建的可旋转方块对象。
     */
    createRotatableBlock: function (identifier, category, textures_arr, options = {}) {
        if (!identifier || !category || !textures_arr ) {
            throw new Error("必须提供 identifier、category 和 textures_arr。");
        }

        const block = new RotatableBlock(identifier, category, textures_arr, {
            hide_in_command: false,
            rotationType: "cardinal",
            yRotationOffset: 180,
            ...options, // 用传入的选项覆盖默认值
        });

        registerBlock(block); // 调用注册方法
        return block;
    },
    createGeometryBlock: function (identifier, category, geometry, material_instances, options = {}) {
        if (!identifier || !category || !geometry || !material_instances ) {
            throw new Error("必须提供 identifier、category、geometry 和 material_instances。");
        }
        const block = new GeometryBlock(identifier, category, geometry, material_instances, options);
        registerBlock(block); // 调用注册方法
        return block;
    },
    createOreBlock(identifier, category, textures_arr, options = {}){
        const ore_block = new OreBlock(identifier, category, textures_arr, options);
        registerBlock(ore_block.block); // 调用注册方法
        registerFeature$1(ore_block.feature); // 调用注册方法
        registerFeatureRule$1(ore_block.feature_rules); // 调用注册方法
        return ore_block;
    },
    /**
     * 创建一个作物方块。
     * @param {string} identifier - 方块的唯一标识符。
     * @param {string} category - 方块的分类（如 "construction"）。
     * @param {Array} variantDatas - 方块的变体数据，包含每个变体的状态标签和纹理。
     * @param {Object} options - 可选参数。
     * @param {string} options.group - 分组，默认为 "construction"。
     * @param {boolean} options.hide_in_command - 是否在命令中隐藏，默认为 false。
     * @param {boolean} options.ambient_occlusion - 是否应用环境光遮蔽，默认为 false。
     * @param {boolean} options.face_dimming - 是否根据面的方向进行亮度调整，默认为 false。
     * @param {string} options.render_method - 渲染方法，默认为 "alpha_test"。
     * @returns {CropBlock} 创建的方块对象。
     */
    createCropBlock: function (identifier, category, variantDatas, options = {}) {
        if (!identifier || !category || !variantDatas || variantDatas.length === 0) {
            throw new Error("必须提供 identifier、category 和 variantDatas。");
        }

        const block = new CropBlock(identifier, category, variantDatas, {
            hide_in_command: false,
            ambient_occlusion: true,
            face_dimming: true,
            render_method: "alpha_test",
            ...options, // 用传入的选项覆盖默认值
        });

        registerBlock(block); // 调用注册方法
        return block;
    },
};

class AddonEntity {
    /**
     * 实体类
     * @param {string} format_version 格式版本
     * @param {AddonEntityDefinition} definitions 实体定义
     */
    constructor(format_version, definitions) {
        this.format_version = format_version;
        this.definitions = definitions;
    }

    /**
     * 将对象转换为 JSON 格式
     * @returns {Object} JSON 对象
     */
    @Serializer
    toObject() {
        return {
            format_version: this.format_version,
            ["minecraft:entity"]: this.definitions
        };
    }
}

class AddonEntityDefinition {
    /**
     * 实体定义类
     * @param {AddonEntityDescription} description 实体描述
     * @param {Object} components 实体组件
     */
    constructor(description, components = {}, component_groups = {}, events = {}) {
        this.description = description;
        this.components = components; // 修正拼写错误
        this.component_groups = component_groups;
        this.events = events;   
    }
}

class AddonEntityDescription {
    /**
     * 实体描述类
     * @param {string} identifier 实体标识符
     * @param {boolean} is_spawnable 是否可生成
     * @param {boolean} is_summonable 是否可召唤
     * @param {string} runtime_identifier 复刻标识符
     */
    constructor(identifier, is_spawnable = false, is_summonable = false, properties = {}, runtime_identifier) {
        this.identifier = identifier;
        this.is_spawnable = is_spawnable;
        this.is_summonable = is_summonable;
        this.properties = properties;
        this.runtime_identifier = runtime_identifier;
    }
}

class BasicEntity {
    /**
     * 构造函数
     * @param {string} identifier - 实体的唯一标识符
     * @param {Object} options - 配置选项
     * @param {boolean} [options.is_spawnable=true] - 是否可生成
     * @param {boolean} [options.is_summonable=true] - 是否可召唤
     * @param {string} [options.runtime_identifier] - 复刻标识符
     * @param {Object} data - 继承的数据
     * @param {Object} [data.components={}] - 继承的组件
     * @param {Object} [data.component_groups={}] - 继承的组件组
     * @param {Object} [data.events={}] - 继承的事件
     */
    constructor(identifier, options = {}, data = {}) {
        // 参数验证
        if (typeof identifier !== 'string' || !identifier) {
            throw new Error('identifier must be a non-empty string.');
        }
        if (options.runtime_identifier && typeof options.runtime_identifier !== 'string') {
            throw new Error('runtime_identifier must be a string.');
        }

        this.identifier = identifier;
        this.is_spawnable = options.is_spawnable ?? true;
        this.is_summonable = options.is_summonable ?? true;
        this.runtime_identifier = options.runtime_identifier;

        // 初始化 components、component_groups 和 events，确保 data 中的值为对象
        this.properties = data?.description?.properties ?? {};
        this.components = new Map(Object.entries(data.components ?? {}));
        this.component_groups = new Map(Object.entries(data.component_groups ?? {}));
        this.events = new Map(Object.entries(data.events ?? {}));
    }
    /**
     * 添加属性到实体
     * @param {string} name 属性名称
     * @param {Object} value 属性值
     * @returns 
     */
    addProperty(name, value) {
        this.properties[name] = value;
        return this;
    }
    /**
     * 移除属性
     * @param {string} name 属性名称
     * @returns 
     */
    removeProperty(name) {
        delete this.properties[name];
        return this;
    }
    /**
     * 移除所有属性
     * @returns 
     */
    clearProperties() {
        this.properties = {};
        return this;
    }

    /**
     * 添加事件到实体
     * @param {string} name - 事件名称
     * @param {Map} eventMap - 事件的键值对 Map
     * @returns {BasicEntity} - 返回当前实例以支持链式调用
     */
    addEvent(name, eventMap) {
        if (!(eventMap instanceof Map)) {
            throw new Error("eventMap must be an instance of Map.");
        }
        this.events.set(name, eventMap);
        return this;
    }

    /**
     * 删除事件
     * @param {string} name - 事件名称
     * @returns {BasicEntity} - 返回当前实例以支持链式调用
     */
    removeEvent(name) {
        this.events.delete(name);
        return this;
    }

    /**
     * 清除所有事件
     * @returns {BasicEntity} - 返回当前实例以支持链式调用
     */
    clearEvents() {
        this.events.clear();
        return this;
    }

    /**
     * 添加组件组到实体
     * @param {string} name - 组件组名称
     * @param {Map} componentMap - 组件组的键值对 Map
     * @returns {BasicEntity} - 返回当前实例以支持链式调用
     */
    addComponentGroup(name, componentMap) {
        if (!(componentMap instanceof Map)) {
            throw new Error("componentMap must be an instance of Map.");
        }
        this.component_groups.set(name, componentMap);
        return this;
    }

    /**
     * 删除组件组
     * @param {string} name - 组件组名称
     * @returns {BasicEntity} - 返回当前实例以支持链式调用
     */
    removeComponentGroup(name) {
        this.component_groups.delete(name);
        return this;
    }

    /**
     * 清除所有组件组
     * @returns {BasicEntity} - 返回当前实例以支持链式调用
     */
    clearComponentGroups() {
        this.component_groups.clear();
        return this;
    }

    /**
     * 添加组件到实体
     * @param {Map} componentMap - 组件的键值对 Map
     * @returns {BasicEntity} - 返回当前实例以支持链式调用
     */
    addComponent(componentMap) {
        if (!(componentMap instanceof Map)) {
            throw new Error("componentMap must be an instance of Map.");
        }

        for (const [key, value] of componentMap) {
            this.components.set(key, value);
        }
        return this; // 支持链式调用
    }

    /**
     * 删除组件
     * @param {string} key - 组件名称
     * @returns {BasicEntity} - 返回当前实例以支持链式调用
     */
    removeComponent(key) {
        this.components.delete(key);
        return this;
    }

    /**
     * 清除所有组件
     * @returns {BasicEntity} - 返回当前实例以支持链式调用
     */
    clearComponents() {
        this.components.clear();
        return this;
    }

    /**
     * 清除所有数据
     */
    clearAll() {
        this.components.clear();
        this.component_groups.clear();
        this.events.clear();
        return this;
    }

    /**
     * 将实体转换为 JSON 格式
     * @returns {Object} - 返回 JSON 格式的实体数据
     */
    @Serializer
    toObject() {
        return serialize(new AddonEntity(
            "1.16.0",
            new AddonEntityDefinition(
                new AddonEntityDescription(
                    this.identifier,
                    this.is_spawnable,
                    this.is_summonable,
                    this.properties,
                    this.runtime_identifier
                ),
                Object.fromEntries(this.components), // 将 Map 转换为普通对象
                Object.fromEntries(this.component_groups), // 将 Map 转换为普通对象
                Object.fromEntries(this.events) // 将 Map 转换为普通对象
            )
        ))
    }
}

class AddonClientEntity {
    /**
     * 客户端实体类
     * @param {string} format_version 格式版本
     * @param {AddonClientEntityDefinition} definitions 实体定义
     */
    constructor(format_version, definitions) {
        this.format_version = format_version;
        this.definitions = definitions;
    }

    /**
     * 将对象转换为 JSON 格式
     * @returns {Object} JSON 对象
     */
    @Serializer
    toObject() {
        return {
            format_version: this.format_version,
            ["minecraft:client_entity"]: this.definitions
        };
    }
}

class AddonClientEntityDefinition {
    /**
     * 客户端实体定义类
     * @param {Description} description 实体描述
     */
    constructor(description) {
        this.description = description;
    }
}

class AddonClientEntityDescription {
    /**
     * 实体描述类
     * @param {string} identifier 实体标识符
     * @param {string} min_engine_version 最低引擎版本
     */
    constructor(identifier, min_engine_version) {
        this.identifier = identifier;
        this.min_engine_version = min_engine_version;
    }

    /**
     * 注册粒子效果
     * @param {string} name 组件名称
     * @param {Object} component 组件数据
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
    */
    addParticleEffect(name, particle) {
        if (this.particle_effects == undefined) this.particle_effects = {};
        this.particle_effects[name] = particle;
        return this;
    }

    /**
     * 添加材质
     * @param {string} name 材质名称
     * @param {string} material 材质路径
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
     */
    addMaterial(name, material) {
        if (this.materials == undefined) this.materials = {};
        this.materials[name] = material;
        return this;
    }

    /**
     * 添加纹理
     * @param {string} name 纹理名称
     * @param {string} texture 纹理路径
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
     */
    addTexture(name, texture) {
        if (this.textures == undefined) this.textures = {};
        this.textures[name] = texture;
        return this;
    }

    /**
     * 添加几何体
     * @param {string} name 几何体名称
     * @param {string} geometry 几何体路径
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
     */
    addGeometry(name, geometry) {
        if (this.geometry == undefined) this.geometry = {};
        this.geometry[name] = geometry;
        return this;
    }

    /**
     * 添加动画
     * @param {string} name 动画名称
     * @param {string} animation 动画路径
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
     */
    addAnimation(name, animation) {
        if (this.animations == undefined) this.animations = {};
        this.animations[name] = animation;
        return this;
    }

    /**
     * 添加动画控制器
     * @param {string} name 控制器名称
     * @param {string} controller 控制器路径
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
     */
    addAnimationController(name, controller) {
        if (this.animation_controllers == undefined) this.animation_controllers = [];
        this.animation_controllers.push({ [name]: controller });
        return this;
    }

    /**
     * 添加渲染控制器
     * @param {string} controller 渲染控制器路径
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
     */
    addRenderController(controller) {
        if (this.render_controllers == undefined) this.render_controllers = [];
        this.render_controllers.push(controller);
        return this;
    }

    /**
     * 添加定位器
     * @param {string} name 定位器名称
     * @param {Object} locator 定位器数据
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
     */
    addLocator(name, locator) {
        if (this.locators == undefined) this.locators = {};
        this.locators[name] = locator;
        return this;
    }

    /**
     * 设置生成蛋
     * @param {string} texture 生成蛋纹理
     * @param {number} texture_index 生成蛋纹理索引
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
     */
    setSpawnEgg(texture, texture_index) {
        this.spawn_egg = {
            texture: texture,
            texture_index: texture_index
        };
        return this;
    }

    /**
     * 设置脚本
     * @param {string} key 脚本键
     * @param {string} value 脚本值
     * @returns {AddonClientEntityDescription} 返回当前实例以支持链式调用
     */
    setScript(key, value) {
        if (this.scripts == undefined) this.scripts = {};
        this.scripts[key] = value;
        return this;
    }
}

/**
 * ClientEntity 类，用于表示客户端实体。
 * 继承自 AddonClientEntityDescription，并扩展了实体的数据加载和 JSON 序列化功能。
 */
class ClientEntity extends AddonClientEntityDescription {
    /**
     * 构造函数，用于创建一个客户端实体实例。
     * 
     * @param {string} identifier - 实体的唯一标识符。
     * @param {Object} data - 实体的初始数据，默认为空对象。
     */
    constructor(identifier, data = {}) {
        // 调用父类构造函数，初始化实体的标识符
        super(identifier);

        // 遍历传入的数据对象，将属性赋值到当前实例
        const keys = Object.keys(data);
        keys.forEach((key) => {
            // 跳过 "identifier" 属性，因为已经在父类中处理
            if (key === "identifier") return;

            // 将数据对象的属性赋值到当前实例
            this[key] = data[key];
        });
    }

    /**
     * 将当前实体实例转换为 JSON 格式。
     * 
     * @returns {Object} - 表示实体的 JSON 对象。
     */
    @Serializer
    toObject() {
        // 创建一个 AddonClientEntity 实例，包含实体定义和版本信息
        return serialize(new AddonClientEntity(
            "1.10.0", // 版本号
            new AddonClientEntityDefinition(this) // 实体定义
        ))
    }
}

class EntityComponent {
  
  static setDamageSensor(deals_damage){
    return new Map().set("minecraft:damage_sensor",{
				"triggers": {
					"deals_damage": deals_damage
				}
			}
    );
  }

  static setMovement(speed){
    return new Map().set("minecraft:movement", {
      "value": speed
    });
  }

  static setCollisionBox(width, height) {
    return new Map().set("minecraft:collision_box", {
      width: width,
      height: height,
    });
  }
  /**
     * 将多个组件集合合并为一个。
     * @param {...Map} componentMaps - 多个组件集合。
     * @returns {Map} - 合并后的组件集合。
     */
  static combineComponents(...componentMaps) {
    return new Map(componentMaps.flatMap(map => [...map]));
  }

  /**
     * 创建 minecraft:health 组件。
     * @param {Object} options 配置选项
     * @param {number} options.max 实体的最大生命值
     * @param {number|Object} options.value 实体的初始生命值（可以是固定值或范围值）
     * @returns {Map} 包含 minecraft:health 组件的 Map 对象
     * @throws {Error} 如果参数无效。
     */
  static setHealth(options = {}) {
    const { max, value } = options;

    // 参数验证
    this.validateHealthParameters(max, value);

    // 构建组件
    const healthComponent = {
      max: max,
      value: value,
    };

    // 返回 Map 对象
    const healthMap = new Map();
    healthMap.set("minecraft:health", healthComponent);
    return healthMap;
  }

  /**
   * 验证 minecraft:health 组件的参数。
   * @param {number} max 最大生命值
   * @param {number|Object} value 初始生命值
   * @throws {Error} 如果参数无效。
   */
  static validateHealthParameters(max, value) {
    if (typeof max !== "number" || max <= 0) {
      throw new Error("max 必须是一个正数");
    }

    if (
      (typeof value !== "number" && typeof value !== "object") ||
      (typeof value === "number" && value <= 0) ||
      (typeof value === "object" &&
        (typeof value.range_min !== "number" ||
          typeof value.range_max !== "number" ||
          value.range_min <= 0 ||
          value.range_max <= 0))
    ) {
      throw new Error("value 必须是一个正数或包含 range_min 和 range_max 的对象");
    }
  }
  /**
   * 创建 minecraft:physics 组件。
   * @param {boolean} has_collision 是否碰撞（默认：true）
   * @param {boolean} has_gravity 是否受重力影响（默认：true）
   * @param {boolean} push_towards_closest_space 是否在卡住时推向最近空间（默认：false）
   * @returns {Map} 包含 minecraft:physics 组件的 Map 对象
   * @throws {Error} 如果参数不是布尔类型。
   */
  static setPhysics(
    has_collision = true,
    has_gravity = true,
    push_towards_closest_space = false
  ) {
    // 参数验证
    if (
      typeof has_collision !== "boolean" ||
      typeof has_gravity !== "boolean" ||
      typeof push_towards_closest_space !== "boolean"
    ) {
      throw new Error("所有参数必须是布尔类型");
    }

    // 创建 Map 对象
    const physicsMap = new Map();
    physicsMap.set("minecraft:physics", {
      has_collision: has_collision,
      has_gravity: has_gravity,
      push_towards_closest_space: push_towards_closest_space,
    });

    return physicsMap;
  }

  /**
 * 创建 minecraft:scale 组件。
 * @param {number} value 实体的缩放比例（默认：1.0）
 * @returns {Map} 包含 minecraft:scale 组件的 Map 对象
 * @throws {Error} 如果参数无效。
 */
  static setScale(value = 1.0) {
    // 参数验证
    if (typeof value !== "number" || value <= 0) {
      throw new Error("value 必须是一个正数");
    }

    // 返回 Map 对象
    const scaleMap = new Map();
    scaleMap.set("minecraft:scale", {
      value: value,
    });
    return scaleMap;
  }
  /**
 * 创建默认的 minecraft:nameable 组件（不填写参数）。
 * @returns {Map} 包含 minecraft:nameable 组件的 Map 对象
 */
  static setDefaultNameable() {
    const nameableMap = new Map();
    nameableMap.set("minecraft:nameable", {});
    return nameableMap;
  }

  /**
   * 创建自定义的 minecraft:nameable 组件（填写参数）。
   * @param {boolean} allowNameTagRenaming 是否允许使用命名牌重命名（默认：true）
   * @param {boolean} alwaysShow 是否始终显示名称（默认：false）
   * @param {Object} defaultTrigger 默认触发事件（可选）
   * @param {Array} nameActions 特殊名称及其对应的事件（可选）
   * @returns {Map} 包含 minecraft:nameable 组件的 Map 对象
   * @throws {Error} 如果参数无效。
   */
  static setCustomNameable(
    allowNameTagRenaming = true,
    alwaysShow = false,
    defaultTrigger = null,
    nameActions = []
  ) {
    // 参数验证
    if (
      typeof allowNameTagRenaming !== "boolean" ||
      typeof alwaysShow !== "boolean"
    ) {
      throw new Error("allowNameTagRenaming 和 alwaysShow 必须是布尔类型");
    }

    // 构建组件
    const nameableComponent = {
      allow_name_tag_renaming: allowNameTagRenaming,
      always_show: alwaysShow,
    };

    // 添加 default_trigger（如果存在）
    if (defaultTrigger) {
      nameableComponent.default_trigger = defaultTrigger;
    }

    // 添加 name_actions（如果存在）
    if (nameActions.length > 0) {
      nameableComponent.name_actions = nameActions;
    }

    // 返回 Map 对象
    const nameableMap = new Map();
    nameableMap.set("minecraft:nameable", nameableComponent);
    return nameableMap;
  }

  /**
   * 创建 minecraft:pushable 组件。
   * @param {boolean} isPushable 是否可以被其他实体推动（默认：true）
   * @param {boolean} isPushableByPiston 是否可以被活塞推动（默认：true）
   * @returns {Map} 包含 minecraft:pushable 组件的 Map 对象
   * @throws {Error} 如果参数无效。
   */
  static setPushable(isPushable = true, isPushableByPiston = true) {
    // 参数验证
    if (typeof isPushable !== "boolean" || typeof isPushableByPiston !== "boolean") {
      throw new Error("isPushable 和 isPushableByPiston 必须是布尔类型");
    }

    // 返回 Map 对象
    const pushableMap = new Map();
    pushableMap.set("minecraft:pushable", {
      is_pushable: isPushable,
      is_pushable_by_piston: isPushableByPiston,
    });
    return pushableMap;
  }


  /**
     * 创建 minecraft:jump.static 组件。
     * @param {number} jumpPower 跳跃的初始垂直速度（默认：0.42）
     * @returns {Map} 包含 minecraft:jump.static 组件的 Map 对象
     * @throws {Error} 如果参数无效。
     */
  static setJumpStatic(jumpPower = 0.42) {
    // 参数验证
    if (typeof jumpPower !== "number" || jumpPower < 0) {
      throw new Error("jumpPower 必须是一个非负数");
    }

    // 返回 Map 对象
    const jumpStaticMap = new Map();
    jumpStaticMap.set("minecraft:jump.static", {
      jump_power: jumpPower,
    });
    return jumpStaticMap;
  }

  /**
  * 创建 minecraft:navigation.walk 组件。
  * @param {Object} options 配置选项
  * @param {boolean} options.avoidDamageBlocks 是否避免伤害性方块（默认：false）
  * @param {boolean} options.avoidPortals 是否避免传送门（默认：false）
  * @param {boolean} options.avoidSun 是否避免阳光下的方块（默认：false）
  * @param {boolean} options.avoidWater 是否避免水（默认：false）
  * @param {Array} options.blocksToAvoid 需要避免的方块列表（默认：[]）
  * @param {boolean} options.canBreach 是否可以跳出水面（默认：false）
  * @param {boolean} options.canBreakDoors 是否可以破坏门（默认：false）
  * @param {boolean} options.canFloat 是否可以漂浮（默认：false）
  * @param {boolean} options.canJump 是否可以跳跃（默认：true）
  * @param {boolean} options.canOpenDoors 是否可以开门（默认：false）
  * @param {boolean} options.canOpenIronDoors 是否可以开铁门（默认：false）
  * @param {boolean} options.canPassDoors 是否可以穿过门（默认：true）
  * @param {boolean} options.canPathFromAir 是否可以在空中开始路径规划（默认：false）
  * @param {boolean} options.canPathOverLava 是否可以在熔岩表面行走（默认：false）
  * @param {boolean} options.canPathOverWater 是否可以在水面上行走（默认：false）
  * @param {boolean} options.canSink 是否会在水中下沉（默认：true）
  * @param {boolean} options.canSwim 是否可以游泳（默认：false）
  * @param {boolean} options.canWalk 是否可以在地面上行走（默认：true）
  * @param {boolean} options.canWalkInLava 是否可以在熔岩中行走（默认：false）
  * @param {boolean} options.isAmphibious 是否可以在水下行走（默认：false）
  * @returns {Map} 包含 minecraft:navigation.walk 组件的 Map 对象
  * @throws {Error} 如果参数无效。
  */
  static setNavigationWalk(options = {}) {
    // 默认值
    const {
      avoidDamageBlocks = false,
      avoidPortals = false,
      avoidSun = false,
      avoidWater = false,
      blocksToAvoid = [],
      canBreach = false,
      canBreakDoors = false,
      canFloat = false,
      canJump = true,
      canOpenDoors = false,
      canOpenIronDoors = false,
      canPassDoors = true,
      canPathFromAir = false,
      canPathOverLava = false,
      canPathOverWater = false,
      canSink = true,
      canSwim = false,
      canWalk = true,
      canWalkInLava = false,
      isAmphibious = false,
    } = options;

    // 构建组件
    const navigationWalkComponent = {
      avoid_damage_blocks: avoidDamageBlocks,
      avoid_portals: avoidPortals,
      avoid_sun: avoidSun,
      avoid_water: avoidWater,
      blocks_to_avoid: blocksToAvoid,
      can_breach: canBreach,
      can_break_doors: canBreakDoors,
      can_float: canFloat,
      can_jump: canJump,
      can_open_doors: canOpenDoors,
      can_open_iron_doors: canOpenIronDoors,
      can_pass_doors: canPassDoors,
      can_path_from_air: canPathFromAir,
      can_path_over_lava: canPathOverLava,
      can_path_over_water: canPathOverWater,
      can_sink: canSink,
      can_swim: canSwim,
      can_walk: canWalk,
      can_walk_in_lava: canWalkInLava,
      is_amphibious: isAmphibious,
    };

    // 返回 Map 对象
    const navigationWalkMap = new Map();
    navigationWalkMap.set("minecraft:navigation.walk", navigationWalkComponent);
    return navigationWalkMap;
  }

  /**
   * 创建 minecraft:movement.basic 组件。
   * @param {number} maxTurn 实体每 tick 可以转向的最大角度（默认：30.0）
   * @returns {Map} 包含 minecraft:movement.basic 组件的 Map 对象
   * @throws {Error} 如果参数无效。
   */
  static setMovementBasic(maxTurn = 30.0) {
    // 参数验证
    if (typeof maxTurn !== "number" || maxTurn < 0) {
      throw new Error("maxTurn 必须是一个非负数");
    }

    // 返回 Map 对象
    const movementBasicMap = new Map();
    movementBasicMap.set("minecraft:movement.basic", {
      max_turn: maxTurn,
    });
    return movementBasicMap;
  }

  /**
   * 创建 minecraft:projectile 组件。
   * @param {Object} options 配置选项
   * @param {number} options.anchor 发射锚点（默认：0）
   * @param {number} options.angleOffset 角度偏移（默认：0.0）
   * @param {boolean} options.catchFire 是否点燃目标（默认：false）
   * @param {boolean} options.critParticleOnHurt 是否生成暴击粒子（默认：false）
   * @param {boolean} options.destroyOnHurt 是否在击中时销毁（默认：false）
   * @param {string} options.filter 过滤的实体（可选）
   * @param {boolean} options.fireAffectedByGriefing 是否受游戏规则影响（默认：false）
   * @param {number} options.gravity 重力值（默认：0.05）
   * @param {string} options.hitSound 击中声音（可选）
   * @param {string} options.hitGroundSound 击中地面声音（可选）
   * @param {boolean} options.homing 是否追踪目标（默认：false）
   * @param {number} options.inertia 空气惯性（默认：0.99）
   * @param {boolean} options.isDangerous 是否对玩家危险（默认：false）
   * @param {boolean} options.knockback 是否击退目标（默认：true）
   * @param {boolean} options.lightning 是否召唤闪电（默认：false）
   * @param {number} options.liquidInertia 水中惯性（默认：0.6）
   * @param {boolean} options.multipleTargets 是否可击中多个目标（默认：true）
   * @param {number[]} options.offset 发射偏移量（默认：[0, 0, 0]）
   * @param {number} options.onFireTime 着火时间（默认：0.0）
   * @param {Object} options.onHit 击中时的行为（可选）
   * @param {string} options.particle 碰撞粒子（默认："ironcrack"）
   * @param {number} options.power 初始速度（默认：1.3）
   * @param {number} options.reflectImmunity 反射免疫时间（默认：0.0）
   * @param {boolean} options.reflectOnHurt 是否反射（默认：false）
   * @param {string} options.shootSound 发射声音（可选）
   * @param {boolean} options.shootTarget 是否朝向目标发射（默认：true）
   * @param {boolean} options.shouldBounce 是否反弹（默认：false）
   * @param {boolean} options.splashPotion 是否为喷溅药水（默认：false）
   * @param {number} options.splashRange 喷溅范围（默认：4）
   * @param {boolean} options.stopOnHurt 是否在击中时停止（默认：false）
   * @param {number} options.uncertaintyBase 基础精度（默认：0）
   * @param {number} options.uncertaintyMultiplier 精度倍数（默认：0）
   * @returns {Map} 包含 minecraft:projectile 组件的 Map 对象
   * @throws {Error} 如果参数无效。
   */
  static setProjectile(options = {}) {
    // 默认值
    const {
      anchor
      = 0,
      angleOffset
      = 0.0,
      catchFire
      = false,
      critParticleOnHurt
      = false,
      destroyOnHurt
      = false,
      filter
      = null,
      fireAffectedByGriefing
      = false,
      gravity
      = 0.05,
      hitSound
      = null,
      hitGroundSound
      = null,
      homing
      = false,
      inertia
      = 0.99,
      isDangerous
      = false,
      knockback
      = true,
      lightning
      = false,
      liquidInertia
      = 0.6,
      multipleTargets
      = true,
      offset
      = [0, 0, 0],
      onFireTime
      = 0.0,
      onHit
      = null,
      particle
      = "ironcrack",
      power
      = 1.3,
      reflectImmunity
      = 0.0,
      reflectOnHurt
      = false,
      shootSound
      = null,
      shootTarget
      = true,
      shouldBounce
      = false,
      splashPotion
      = false,
      splashRange
      = 4,
      stopOnHurt
      = false,
      uncertaintyBase
      = 0,
      uncertaintyMultiplier
      = 0,
    } = options;

    // 构建组件
    const projectileComponent = {
      anchor
      ,
      angle_offset: angleOffset,
      catch_fire: catchFire,
      crit_particle_on_hurt: critParticleOnHurt,
      destroy_on_hurt: destroyOnHurt,
      fire_affected_by_griefing: fireAffectedByGriefing,
      gravity
      ,
      homing
      ,
      inertia
      ,
      is_dangerous: isDangerous,
      knockback
      ,
      lightning
      ,
      liquid_inertia: liquidInertia,
      multiple_targets: multipleTargets,
      offset
      ,
      on_fire_time: onFireTime,
      particle
      ,
      power
      ,
      reflect_immunity: reflectImmunity,
      reflect_on_hurt: reflectOnHurt,
      shoot_target: shootTarget,
      should_bounce: shouldBounce,
      splash_potion: splashPotion,
      splash_range: splashRange,
      stop_on_hurt: stopOnHurt,
      uncertainty_base: uncertaintyBase,
      uncertainty_multiplier: uncertaintyMultiplier,
    };

    // 添加可选参数
    if (filter) projectileComponent.filter = filter;
    if (hitSound) projectileComponent.hit_sound = hitSound;
    if (hitGroundSound) projectileComponent.hit_ground_sound = hitGroundSound;
    if (onHit) projectileComponent.on_hit = onHit;
    if (shootSound) projectileComponent.shoot_sound = shootSound;

    // 返回 Map 对象
    const projectileMap = new Map();
    projectileMap.set("minecraft:projectile", projectileComponent);
    return projectileMap;
  }



}

class Entity {
    constructor(identifier, texture, options = {}, behData, resData ) {
        // 创建行为实体和客户端实体
        this.identifier = identifier;
        this.behavior = new BasicEntity(identifier, options, behData);
        this.resource = new ClientEntity(identifier, resData);
        
        this.resource.addTexture("default", texture);
    }
}

class DummyEntity extends Entity{
    constructor(identifier, texture, options = {}, behData, resData ) {
        super(identifier, texture, options, behData, resData );

        //行为设置
        this.behavior.addComponent(
            EntityComponent.combineComponents(
                EntityComponent.setPhysics(false,false),
                EntityComponent.setPushable(false,false),
                EntityComponent.setCollisionBox(0.001,0.001),
                EntityComponent.setDamageSensor(false)
            )
        );

        //资源设置
        this.resource.addMaterial("default", "entity_alphatest");//添加默认材质
        this.resource.addTexture("default", "textures/entity/none");//添加默认纹理
        this.resource.addGeometry("default","geometry.dummy");//设置默认几何体
        this.resource.addRenderController("controller.render.cow");//添加渲染控制器
    }
}

var data_rp = {
	"minecraft:agent": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:agent",
			materials: {
				"default": "agent"
			},
			textures: {
				"default": "textures/entity/agent"
			},
			geometry: {
				"default": "geometry.agent"
			},
			scripts: {
				pre_animation: [
					"variable.Agent.ArmZRotation = (Math.cos(query.life_time * 114.6) + 1.0) * 1.15;",
					"variable.Agent.ArmXRotationFactor = Math.sin(query.life_time * 80.0) * 4.6;",
					"variable.Agent.LegXRotationFactor = Math.sin(query.life_time * 46.0) * 1.15;"
				],
				animate: [
					"move_controller",
					"look_at_target"
				]
			},
			animations: {
				move: "animation.agent.move",
				look_at_target: "animation.common.look_at_target",
				swing_arms: "animation.agent.swing_arms",
				move_controller: "controller.animation.agent.move"
			},
			render_controllers: [
				"controller.render.agent"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 52
			}
		}
	}
},
	"minecraft:allay": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:allay",
			materials: {
				"default": "allay"
			},
			textures: {
				"default": "textures/entity/allay/allay"
			},
			geometry: {
				"default": "geometry.allay"
			},
			spawn_egg: {
				base_color: "#00daff",
				overlay_color: "#00adff"
			},
			scripts: {
				pre_animation: [
					"variable.holding_trident = query.is_item_name_any('slot.weapon.mainhand', 'minecraft:trident');"
				]
			},
			animations: {
				idle: "animation.allay.idle",
				fly: "animation.allay.fly",
				hold_item: "animation.allay.hold_item",
				hold_item_fly: "animation.allay.hold_item_fly",
				look_at_target_default: "animation.allay.look_at_target.default",
				dance: "animation.allay.dance"
			},
			animation_controllers: [
				{
					general: "controller.animation.allay.general"
				},
				{
					look_at_target: "controller.animation.allay.look_at_target"
				},
				{
					holding: "controller.animation.allay.holding"
				},
				{
					dancing: "controller.animation.allay.dancing"
				}
			],
			render_controllers: [
				"controller.render.allay"
			],
			enable_attachables: true,
			held_item_ignores_lighting: true
		}
	}
},
	"minecraft:armor_stand": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:armor_stand",
			min_engine_version: "1.8.0",
			materials: {
				"default": "armor_stand"
			},
			textures: {
				"default": "textures/entity/armor_stand"
			},
			animations: {
				default_pose: "animation.armor_stand.default_pose",
				no_pose: "animation.armor_stand.no_pose",
				solemn_pose: "animation.armor_stand.solemn_pose",
				athena_pose: "animation.armor_stand.athena_pose",
				brandish_pose: "animation.armor_stand.brandish_pose",
				honor_pose: "animation.armor_stand.honor_pose",
				entertain_pose: "animation.armor_stand.entertain_pose",
				salute_pose: "animation.armor_stand.salute_pose",
				riposte_pose: "animation.armor_stand.riposte_pose",
				zombie_pose: "animation.armor_stand.zombie_pose",
				cancan_a_pose: "animation.armor_stand.cancan_a_pose",
				cancan_b_pose: "animation.armor_stand.cancan_b_pose",
				hero_pose: "animation.armor_stand.hero_pose",
				wiggle: "animation.armor_stand.wiggle",
				"controller.pose": "controller.animation.armor_stand.pose",
				"controller.wiggling": "controller.animation.armor_stand.wiggle"
			},
			scripts: {
				initialize: [
					"variable.armor_stand.pose_index = 0;",
					"variable.armor_stand.hurt_time = 0;"
				],
				animate: [
					"controller.pose",
					"controller.wiggling"
				]
			},
			geometry: {
				"default": "geometry.armor_stand"
			},
			render_controllers: [
				"controller.render.armor_stand"
			],
			enable_attachables: true
		}
	}
},
	"minecraft:armor_stand.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:armor_stand",
			materials: {
				"default": "armor_stand"
			},
			textures: {
				"default": "textures/entity/armor_stand"
			},
			animations: {
				default_pose: "animation.armor_stand.default_pose",
				no_pose: "animation.armor_stand.no_pose",
				solemn_pose: "animation.armor_stand.solemn_pose",
				athena_pose: "animation.armor_stand.athena_pose",
				brandish_pose: "animation.armor_stand.brandish_pose",
				honor_pose: "animation.armor_stand.honor_pose",
				entertain_pose: "animation.armor_stand.entertain_pose",
				salute_pose: "animation.armor_stand.salute_pose",
				riposte_pose: "animation.armor_stand.riposte_pose",
				zombie_pose: "animation.armor_stand.zombie_pose",
				cancan_a_pose: "animation.armor_stand.cancan_a_pose",
				cancan_b_pose: "animation.armor_stand.cancan_b_pose",
				hero_pose: "animation.armor_stand.hero_pose",
				wiggle: "animation.armor_stand.wiggle"
			},
			animation_controllers: [
				{
					pose: "controller.animation.armor_stand.pose"
				},
				{
					wiggling: "controller.animation.armor_stand.wiggle"
				}
			],
			geometry: {
				"default": "geometry.armor_stand"
			},
			render_controllers: [
				"controller.render.armor_stand"
			],
			enable_attachables: true
		}
	}
},
	"minecraft:arrow": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:arrow",
			materials: {
				"default": "arrow"
			},
			textures: {
				"default": "textures/entity/arrows"
			},
			geometry: {
				"default": "geometry.arrow"
			},
			animations: {
				move: "animation.arrow.move"
			},
			scripts: {
				pre_animation: [
					"variable.shake = query.shake_time - query.frame_alpha;",
					"variable.shake_power = variable.shake > 0.0 ? -Math.sin(variable.shake * 200.0) * variable.shake : 0.0;"
				],
				animate: [
					"move"
				]
			},
			render_controllers: [
				"controller.render.arrow"
			]
		}
	}
},
	"minecraft:axolotl": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:axolotl",
			materials: {
				"default": "axolotl",
				limbs: "axolotl_limbs"
			},
			textures: {
				blue: "textures/entity/axolotl/axolotl_blue",
				cyan: "textures/entity/axolotl/axolotl_cyan",
				gold: "textures/entity/axolotl/axolotl_gold",
				lucy: "textures/entity/axolotl/axolotl_lucy",
				wild: "textures/entity/axolotl/axolotl_wild"
			},
			geometry: {
				"default": "geometry.axolotl"
			},
			animations: {
				idle_float: "animation.axolotl.idle_underwater",
				idle_floor: "animation.axolotl.idle_floor",
				idle_floor_water: "animation.axolotl.idle_floor_underwater",
				swim: "animation.axolotl.swim",
				walk_floor: "animation.axolotl.walk_floor",
				walk_floor_water: "animation.axolotl.walk_floor_underwater",
				play_dead: "animation.axolotl.play_dead",
				swim_angle: "animation.axolotl.swim_angle",
				look_at_target: "animation.common.look_at_target"
			},
			scripts: {
				pre_animation: [
					"variable.moving = query.ground_speed > 0 || query.vertical_speed > 0;",
					"variable.pitch = query.body_x_rotation;"
				]
			},
			animation_controllers: [
				{
					general: "controller.animation.axolotl.general"
				},
				{
					move: "controller.animation.axolotl.move"
				}
			],
			render_controllers: [
				"controller.render.axolotl"
			],
			spawn_egg: {
				base_color: "#0xfbc1e3",
				overlay_color: "#0xa62d74"
			}
		}
	}
},
	"minecraft:bat": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:bat",
			materials: {
				"default": "bat"
			},
			textures: {
				"default": "textures/entity/bat"
			},
			geometry: {
				"default": "geometry.bat"
			},
			scripts: {
				scale: "0.35"
			},
			animations: {
				resting: "animation.bat.resting",
				flying: "animation.bat.flying"
			},
			animation_controllers: [
				{
					move: "controller.animation.bat.move"
				}
			],
			render_controllers: [
				"controller.render.bat"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 18
			}
		}
	}
},
	"minecraft:bed": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:bed",
			textures: {
				"default": "textures/entity/bed/white",
				white: "textures/entity/bed/white",
				orange: "textures/entity/bed/orange",
				magenta: "textures/entity/bed/magenta",
				light_blue: "textures/entity/bed/light_blue",
				yellow: "textures/entity/bed/yellow",
				lime: "textures/entity/bed/lime",
				pink: "textures/entity/bed/pink",
				gray: "textures/entity/bed/gray",
				silver: "textures/entity/bed/silver",
				cyan: "textures/entity/bed/cyan",
				purple: "textures/entity/bed/purple",
				blue: "textures/entity/bed/blue",
				brown: "textures/entity/bed/brown",
				green: "textures/entity/bed/green",
				red: "textures/entity/bed/red",
				black: "textures/entity/bed/black"
			},
			geometry: {
				"default": "geometry.bed"
			}
		}
	}
},
	"minecraft:bee": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:bee",
			materials: {
				"default": "bee"
			},
			textures: {
				"default": "textures/entity/bee/bee",
				angry: "textures/entity/bee/bee_angry",
				nectar: "textures/entity/bee/bee_nectar",
				angry_nectar: "textures/entity/bee/bee_angry_nectar"
			},
			geometry: {
				"default": "geometry.bee"
			},
			animations: {
				flying: "animation.bee.flying",
				drip: "controller.animation.bee.drip",
				controller_bee_sting: "controller.animation.bee.sting",
				bee_sting: "animation.bee.sting",
				bee_no_stinger: "animation.bee.no_stinger",
				bee_fly_bobbing: "animation.bee.fly.bobbing",
				bee_root_controller: "controller.animation.bee.root"
			},
			particle_effects: {
				nectar_dripping: "minecraft:nectar_drip_particle"
			},
			scripts: {
				animate: [
					"bee_root_controller",
					{
						bee_no_stinger: "query.mark_variant == 1"
					}
				]
			},
			render_controllers: [
				"controller.render.bee"
			],
			spawn_egg: {
				texture: "egg_bee",
				texture_index: 0
			}
		}
	}
},
	"minecraft:blaze": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:blaze",
			min_engine_version: "1.8.0",
			materials: {
				body: "blaze_body",
				head: "blaze_head"
			},
			textures: {
				"default": "textures/entity/blaze"
			},
			geometry: {
				"default": "geometry.blaze"
			},
			animations: {
				look_at_target: "animation.common.look_at_target",
				move: "animation.blaze.move"
			},
			particle_effects: {
				charged_flames: "minecraft:mobflame_emitter"
			},
			animation_controllers: [
				{
					move: "controller.animation.blaze.move"
				},
				{
					flame: "controller.animation.blaze.flame"
				}
			],
			render_controllers: [
				"controller.render.blaze"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 21
			}
		}
	}
},
	"minecraft:blaze.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:blaze",
			materials: {
				body: "blaze_head",
				head: "blaze_body"
			},
			textures: {
				"default": "textures/entity/blaze"
			},
			geometry: {
				"default": "geometry.blaze"
			},
			animations: {
				look_at_target: "animation.common.look_at_target",
				move: "animation.blaze.move"
			},
			particle_effects: {
				charged_flames: "minecraft:mobflame_emitter"
			},
			animation_controllers: [
				{
					move: "controller.animation.blaze.move"
				},
				{
					flame: "controller.animation.blaze.flame"
				}
			],
			render_controllers: [
				"controller.render.blaze"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 21
			}
		}
	}
},
	"minecraft:boat": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:boat",
			textures: {
				"default": "textures/entity/boat/boat_acacia",
				mangrove: "textures/entity/boat/mangrove_boat"
			},
			geometry: {
				"default": "geometry.boat"
			}
		}
	}
},
	"minecraft:cat": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:cat",
			materials: {
				"default": "cat"
			},
			textures: {
				white: "textures/entity/cat/white",
				black: "textures/entity/cat/tuxedo",
				red: "textures/entity/cat/redtabby",
				siamese: "textures/entity/cat/siamesecat",
				british: "textures/entity/cat/britishshorthair",
				calico: "textures/entity/cat/calico",
				persian: "textures/entity/cat/persian",
				ragdoll: "textures/entity/cat/ragdoll",
				tabby: "textures/entity/cat/tabby",
				jellie: "textures/entity/cat/jellie",
				all_black: "textures/entity/cat/allblackcat",
				white_tame: "textures/entity/cat/white_tame",
				black_tame: "textures/entity/cat/tuxedo_tame",
				red_tame: "textures/entity/cat/redtabby_tame",
				siamese_tame: "textures/entity/cat/siamesecat_tame",
				british_tame: "textures/entity/cat/britishshorthair_tame",
				calico_tame: "textures/entity/cat/calico_tame",
				persian_tame: "textures/entity/cat/persian_tame",
				ragdoll_tame: "textures/entity/cat/ragdoll_tame",
				tabby_tame: "textures/entity/cat/tabby_tame",
				all_black_tame: "textures/entity/cat/allblackcat_tame",
				jellie_tame: "textures/entity/cat/jellie_tame"
			},
			geometry: {
				"default": "geometry.cat"
			},
			animations: {
				sneak: "animation.cat.sneak",
				walk: "animation.cat.walk",
				sprint: "animation.cat.sprint",
				sit: "animation.cat.sit",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.cat.baby_transform",
				lie_down: "animation.cat.lie_down"
			},
			animation_controllers: [
				{
					look_at_target: "controller.animation.cat.look_at_target"
				},
				{
					move: "controller.animation.cat.move"
				},
				{
					baby: "controller.animation.cat.baby"
				}
			],
			render_controllers: [
				"controller.render.cat"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 53
			}
		}
	}
},
	"minecraft:cave_spider": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:cave_spider",
			min_engine_version: "1.8.0",
			materials: {
				"default": "spider",
				invisible: "spider_invisible"
			},
			textures: {
				"default": "textures/entity/spider/cave_spider"
			},
			geometry: {
				"default": "geometry.spider.v1.8"
			},
			scripts: {
				scale: "0.7"
			},
			animations: {
				default_leg_pose: "animation.spider.default_leg_pose",
				look_at_target: "animation.spider.look_at_target",
				walk: "animation.spider.walk"
			},
			animation_controllers: [
				{
					move: "controller.animation.spider.move"
				}
			],
			render_controllers: [
				"controller.render.spider"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 22
			}
		}
	}
},
	"minecraft:cave_spider.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:cave_spider",
			materials: {
				"default": "spider",
				invisible: "spider_invisible"
			},
			textures: {
				"default": "textures/entity/spider/cave_spider"
			},
			geometry: {
				"default": "geometry.spider"
			},
			scripts: {
				scale: "0.7"
			},
			animations: {
				default_leg_pose: "animation.spider.default_leg_pose",
				look_at_target: "animation.spider.look_at_target",
				walk: "animation.spider.walk"
			},
			animation_controllers: [
				{
					move: "controller.animation.spider.move"
				}
			],
			render_controllers: [
				"controller.render.spider"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 22
			}
		}
	}
},
	"minecraft:chest_boat": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:chest_boat",
			textures: {
				"default": "textures/entity/boat/chest_boat_oak",
				oak: "textures/entity/boat/chest_boat_oak",
				spruce: "textures/entity/boat/chest_boat_spruce",
				birch: "textures/entity/boat/chest_boat_birch",
				jungle: "textures/entity/boat/chest_boat_jungle",
				acacia: "textures/entity/boat/chest_boat_acacia",
				darkoak: "textures/entity/boat/chest_boat_darkoak",
				mangrove: "textures/entity/boat/chest_boat_mangrove"
			},
			geometry: {
				"default": "geometry.chest_boat"
			}
		}
	}
},
	"minecraft:chest_minecart": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:chest_minecart",
			min_engine_version: "1.8.0",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				]
			},
			animations: {
				move: "animation.minecart.move"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:chest_minecart.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:chest_minecart",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				]
			},
			animations: {
				move: "animation.minecart.move.v1.0"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:chicken": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:chicken",
			min_engine_version: "1.12.0",
			materials: {
				"default": "chicken",
				legs: "chicken_legs"
			},
			textures: {
				"default": "textures/entity/chicken"
			},
			geometry: {
				"default": "geometry.chicken.v1.12"
			},
			animations: {
				move: "animation.chicken.move",
				general: "animation.chicken.general",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.chicken.baby_transform"
			},
			scripts: {
				animate: [
					"general",
					{
						move: "query.modified_move_speed"
					},
					"look_at_target",
					{
						baby_transform: "query.is_baby"
					}
				]
			},
			render_controllers: [
				"controller.render.chicken"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 0
			}
		}
	}
},
	"minecraft:chicken.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:chicken",
			materials: {
				"default": "chicken",
				legs: "chicken_legs"
			},
			textures: {
				"default": "textures/entity/chicken"
			},
			geometry: {
				"default": "geometry.chicken"
			},
			animations: {
				move: "animation.chicken.move",
				general: "animation.chicken.general.v1.0",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.chicken.baby_transform"
			},
			scripts: {
				animate: [
					"general",
					{
						move: "query.modified_move_speed"
					},
					"look_at_target",
					{
						baby_transform: "query.is_baby"
					}
				]
			},
			render_controllers: [
				"controller.render.chicken"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 0
			}
		}
	}
},
	"minecraft:cod": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:cod",
			materials: {
				"default": "cod"
			},
			textures: {
				"default": "textures/entity/fish/cod"
			},
			geometry: {
				"default": "geometry.cod"
			},
			scripts: {
				pre_animation: [
					"variable.ZRot = !query.is_in_water ? Math.cos((query.time_stamp + query.frame_alpha) * 14.32) * 90 : 0.0;",
					"variable.AnimationAmountBlend = Math.lerp(variable.AnimationAmountPrev, variable.AnimationAmount, query.frame_alpha);"
				]
			},
			animations: {
				flop: "animation.cod.flop",
				swim: "animation.cod.swim"
			},
			animation_controllers: [
				{
					general: "controller.animation.fish.general"
				}
			],
			render_controllers: [
				"controller.render.cod"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 45
			}
		}
	}
},
	"minecraft:command_block_minecart": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:command_block_minecart",
			min_engine_version: "1.8.0",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				]
			},
			animations: {
				move: "animation.minecart.move"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:command_block_minecart.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:command_block_minecart",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				]
			},
			animations: {
				move: "animation.minecart.move.v1.0"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:cow": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:cow",
			min_engine_version: "1.8.0",
			materials: {
				"default": "cow"
			},
			textures: {
				"default": "textures/entity/cow/cow"
			},
			geometry: {
				"default": "geometry.cow.v1.8"
			},
			animations: {
				setup: "animation.cow.setup",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.cow.baby_transform"
			},
			scripts: {
				animate: [
					"setup",
					{
						walk: "query.modified_move_speed"
					},
					"look_at_target",
					{
						baby_transform: "query.is_baby"
					}
				]
			},
			render_controllers: [
				"controller.render.cow"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 1
			}
		}
	}
},
	"minecraft:cow.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:cow",
			materials: {
				"default": "cow"
			},
			textures: {
				"default": "textures/entity/cow/cow"
			},
			geometry: {
				"default": "geometry.cow"
			},
			animations: {
				setup: "animation.cow.setup.v1.0",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.cow.baby_transform"
			},
			scripts: {
				animate: [
					"setup",
					{
						walk: "query.modified_move_speed"
					},
					"look_at_target",
					{
						baby_transform: "query.is_baby"
					}
				]
			},
			render_controllers: [
				"controller.render.cow"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 1
			}
		}
	}
},
	"minecraft:creeper": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:creeper",
			min_engine_version: "1.8.0",
			materials: {
				"default": "creeper",
				charged: "charged_creeper"
			},
			textures: {
				"default": "textures/entity/creeper/creeper",
				charged: "textures/entity/creeper/creeper_armor"
			},
			geometry: {
				"default": "geometry.creeper.v1.8",
				charged: "geometry.creeper.charged.v1.8"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 6
			},
			scripts: {
				pre_animation: [
					"variable.wobble = Math.sin(query.swell_amount * 5730) * query.swell_amount * 0.01 + 1.0;",
					"variable.swelling_scale1 = (Math.pow(Math.clamp(query.swell_amount, 0.0, 1.0), 4.0) * 0.4 + 1.0) * variable.wobble;",
					"variable.swelling_scale2 = (Math.pow(Math.clamp(query.swell_amount, 0.0, 1.0), 4.0) * 0.1 + 1.0) / variable.wobble;",
					"variable.leg_rot = Math.cos(query.modified_distance_moved * 38.17326) * 80.22 * query.modified_move_speed;",
					"variable.flash = Math.mod(Math.Round(query.swell_amount * 10.0), 2.0);"
				]
			},
			animations: {
				creeper_head: "animation.common.look_at_target",
				creeper_legs: "animation.creeper.legs",
				creeper_swelling: "animation.creeper.swelling"
			},
			animation_controllers: [
				{
					creeper_head: "controller.animation.creeper.head"
				},
				{
					creeper_legs: "controller.animation.creeper.legs"
				},
				{
					creeper_swelling: "controller.animation.creeper.swelling"
				}
			],
			render_controllers: [
				"controller.render.creeper",
				"controller.render.creeper_armor"
			]
		}
	}
},
	"minecraft:creeper.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:creeper",
			materials: {
				"default": "creeper",
				charged: "charged_creeper"
			},
			textures: {
				"default": "textures/entity/creeper/creeper",
				charged: "textures/entity/creeper/creeper_armor"
			},
			geometry: {
				"default": "geometry.creeper",
				charged: "geometry.creeper.charged"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 6
			},
			scripts: {
				pre_animation: [
					"variable.wobble = Math.sin(query.swell_amount * 5730) * query.swell_amount * 0.01 + 1.0;",
					"variable.swelling_scale1 = (Math.pow(Math.clamp(query.swell_amount, 0.0, 1.0), 4.0) * 0.4 + 1.0) * variable.wobble;",
					"variable.swelling_scale2 = (Math.pow(Math.clamp(query.swell_amount, 0.0, 1.0), 4.0) * 0.1 + 1.0) / variable.wobble;",
					"variable.leg_rot = Math.cos(query.modified_distance_moved * 38.17326) * 80.22 * query.modified_move_speed;",
					"variable.flash = Math.mod(Math.Round(query.swell_amount * 10.0), 2.0);"
				]
			},
			animations: {
				creeper_head: "animation.common.look_at_target",
				creeper_legs: "animation.creeper.legs",
				creeper_swelling: "animation.creeper.swelling"
			},
			animation_controllers: [
				{
					creeper_head: "controller.animation.creeper.head"
				},
				{
					creeper_legs: "controller.animation.creeper.legs"
				},
				{
					creeper_swelling: "controller.animation.creeper.swelling"
				}
			],
			render_controllers: [
				"controller.render.creeper",
				"controller.render.creeper_armor"
			]
		}
	}
},
	"minecraft:dolphin": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:dolphin",
			materials: {
				"default": "dolphin"
			},
			textures: {
				"default": "textures/entity/dolphin"
			},
			geometry: {
				"default": "geometry.dolphin"
			},
			animations: {
				move: "animation.dolphin.move"
			},
			animation_controllers: [
				{
					general: "controller.animation.dolphin.general"
				}
			],
			render_controllers: [
				"controller.render.dolphin"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 49
			}
		}
	}
},
	"minecraft:donkey_v1": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:donkey",
			materials: {
				"default": "horse"
			},
			textures: {
				donkey: "textures/entity/horse/donkey",
				markings_none: "textures/entity/horse/horse_markings_none",
				armor_none: "textures/entity/horse/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse"
			},
			animations: {
				setup: "animation.horse.setup",
				baby_transform: "animation.horse.baby_transform",
				walk: "animation.horse.walk",
				eat: "animation.horse.eat",
				stand: "animation.horse.stand",
				shake_tail: "animation.horse.shake_tail",
				mouth: "animation.horse.mouth",
				look_at_player: "animation.horse.look_at_player"
			},
			scripts: {
				scale: "0.87",
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;",
					"variable.leg_back_origin = query.bone_origin('leg1a');",
					"variable.leg_front_origin = query.bone_origin('leg3a');",
					"variable.head_rotation = query.bone_rotation('head');"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.walk_tail_angle = math.clamp(query.modified_move_speed * 50.0, 0.0, 90.0) * (1.0 - variable.stand_anim);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_walk_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_walk_factor * 45.8 * query.modified_move_speed;",
					"variable.leg_stand = math.cos((query.life_time * 20.0) * 34.38)  * variable.stand_anim;",
					"variable.baby_ratio = query.is_baby ? ((0.0625 - query.model_scale) * 16.0) : 0.0;"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					{
						walk: "variable.stand_anim < 0.5"
					},
					{
						stand: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						shake_tail: "variable.shake_tail"
					},
					"mouth",
					"look_at_player"
				]
			},
			render_controllers: [
				"controller.render.donkey.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 30
			}
		}
	}
},
	"minecraft:donkey_v2": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:donkey",
			min_engine_version: "1.2.6",
			materials: {
				"default": "horse"
			},
			textures: {
				donkey: "textures/entity/horse2/donkey",
				markings_none: "textures/entity/horse2/horse_markings_none",
				armor_none: "textures/entity/horse2/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse.v2"
			},
			animations: {
				setup: "animation.horse.v2.setup",
				baby_transform: "animation.horse.v2.baby_transform",
				walk: "animation.horse.v2.walk",
				eat: "animation.horse.v2.eat",
				stand: "animation.horse.v2.stand",
				tail: "animation.horse.v2.tail"
			},
			scripts: {
				scale: "0.87",
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim  * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;",
					"variable.leg1a_aabb = query.bone_aabb('leg1a');",
					"variable.y_adjust = query.is_baby ? 0.0 : (variable.leg1a_aabb.max.y - variable.leg1a_aabb.min.y) * (1.0 - (query.model_scale * 16.0));"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"stand",
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.donkey.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 30
			}
		}
	}
},
	"minecraft:donkey_v3": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:donkey",
			min_engine_version: "1.17.10",
			materials: {
				"default": "horse"
			},
			textures: {
				donkey: "textures/entity/horse2/donkey",
				markings_none: "textures/entity/horse2/horse_markings_none",
				armor_none: "textures/entity/horse2/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse.v3"
			},
			animations: {
				baby_transform: "animation.horse.v3.baby_transform",
				walk: "animation.horse.v3.walk",
				eat: "animation.horse.v3.eat",
				rear: "animation.horse.v3.rear",
				tail: "animation.horse.v3.tail",
				look_at_player: "animation.horse.v3.look_at_player"
			},
			scripts: {
				scale: "0.87",
				initialize: [
					"variable.eat_anim = 0.0;"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;"
				],
				animate: [
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"look_at_player",
					{
						rear: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.donkey.v3"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 30
			}
		}
	}
},
	"minecraft:dragon_fireball": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:dragon_fireball",
			materials: {
				"default": "fireball"
			},
			textures: {
				"default": "textures/items/dragon_fireball"
			},
			geometry: {
				"default": "geometry.fireball"
			},
			animations: {
				face_player: "animation.actor.billboard"
			},
			scripts: {
				scale: "2.0",
				animate: [
					"face_player"
				]
			},
			render_controllers: [
				"controller.render.fireball"
			]
		}
	}
},
	"minecraft:drowned": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:drowned",
			min_engine_version: "1.16.0",
			materials: {
				"default": "drowned"
			},
			textures: {
				"default": "textures/entity/zombie/drowned"
			},
			geometry: {
				"default": "geometry.zombie.drowned.v1.16"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				],
				animate: [
					{
						humanoid_big_head: "query.is_baby"
					},
					"look_at_target",
					"move",
					{
						"riding.arms": "query.is_riding"
					},
					{
						"riding.legs": "query.is_riding"
					},
					"holding",
					{
						charging: "query.is_charging"
					},
					"attack_controller",
					{
						brandish_spear: "variable.is_brandishing_spear"
					},
					"bob",
					{
						damage_nearby_mobs: "variable.damage_nearby_mobs"
					},
					{
						use_item_progress: "( variable.use_item_interval_progress > 0.0 ) || ( variable.use_item_startup_progress > 0.0 )"
					},
					{
						swimming: "variable.swim_amount > 0.0"
					}
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				look_at_target: "controller.animation.humanoid.look_at_target",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				use_item_progress: "animation.humanoid.use_item_progress",
				attack_controller: "controller.animation.drowned.attack.rotations",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand",
				attack_rotations: "animation.drowned.attack.rotations",
				swimming: "animation.zombie.swimming"
			},
			render_controllers: [
				"controller.render.drowned"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 48
			}
		}
	}
},
	"minecraft:drowned.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:drowned",
			materials: {
				"default": "drowned"
			},
			textures: {
				"default": "textures/entity/zombie/drowned"
			},
			geometry: {
				"default": "geometry.zombie.drowned"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				],
				animate: [
					{
						humanoid_big_head: "query.is_baby"
					},
					"humanoid_base_pose",
					"look_at_target",
					"move",
					{
						"riding.arms": "query.is_riding"
					},
					{
						"riding.legs": "query.is_riding"
					},
					"holding",
					{
						charging: "query.is_charging"
					},
					"attack_controller",
					{
						brandish_spear: "variable.is_brandishing_spear"
					},
					"bob",
					{
						damage_nearby_mobs: "variable.damage_nearby_mobs"
					},
					{
						use_item_progress: "( variable.use_item_interval_progress > 0.0 ) || ( variable.use_item_startup_progress > 0.0 )"
					},
					{
						swimming: "variable.swim_amount > 0.0"
					}
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head.v1.0",
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target: "controller.animation.humanoid.look_at_target",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				attack_controller: "controller.animation.drowned.attack.rotations",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand",
				attack_rotations: "animation.drowned.attack.rotations.v1.0",
				swimming: "animation.drowned.swimming.v1.0"
			},
			render_controllers: [
				"controller.render.drowned"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 48
			}
		}
	}
},
	"minecraft:egg": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:egg",
			materials: {
				"default": "egg"
			},
			textures: {
				"default": "textures/items/egg"
			},
			geometry: {
				"default": "geometry.item_sprite"
			},
			render_controllers: [
				"controller.render.item_sprite"
			],
			animations: {
				flying: "animation.actor.billboard"
			},
			scripts: {
				animate: [
					"flying"
				]
			}
		}
	}
},
	"minecraft:elder_guardian": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:elder_guardian",
			min_engine_version: "1.8.0",
			materials: {
				"default": "guardian",
				ghost: "guardian_ghost"
			},
			textures: {
				"default": "textures/entity/guardian",
				elder: "textures/entity/guardian_elder",
				beam: "textures/entity/guardian_beam"
			},
			geometry: {
				"default": "geometry.guardian.v1.8",
				ghost: "geometry.guardian"
			},
			animations: {
				setup: "animation.guardian.setup",
				spikes: "animation.guardian.spikes",
				swim: "animation.guardian.swim",
				look_at_target: "animation.common.look_at_target",
				move_eye: "animation.guardian.move_eye"
			},
			scripts: {
				initialize: [
					"variable.spike_animation_speed = 0.0;",
					"variable.tail_animation_speed = 0.0;",
					"variable.tail_swim = 0.0;"
				],
				pre_animation: [
					"variable.spike_shake = Math.sin(query.life_time * 2000)/50;",
					"variable.spike_animation_speed = query.life_time < 0.1 ? 0.0 : (!query.is_in_water ? (Math.round(Math.sin(query.life_time * 2000)) == 0.0 ? (Math.random(0.0, 1.0)) : (variable.spike_animation_speed)) : (query.is_moving ? (variable.spike_animation_speed - variable.spike_animation_speed * 0.06) : (variable.spike_animation_speed + (1.0 - variable.spike_animation_speed) * 0.06)));",
					"variable.spike_extension = (1.0 - variable.spike_animation_speed) * 0.55;",
					"variable.tail_animation_speed = query.life_time < 0.1 ? 0.0 : (!query.is_in_water ? 2.0 : query.is_moving ? (variable.tail_animation_speed < 0.5 ? 4.0 : variable.tail_animation_speed + (0.5 - variable.tail_animation_speed) * 0.1) : variable.tail_animation_speed + (0.125 - variable.tail_animation_speed) * 0.2);",
					"variable.tail_swim = query.life_time < 0.1 ? 0.0 : (variable.tail_swim + variable.tail_animation_speed);",
					"variable.tail_base_angle = Math.sin(variable.tail_swim*20.0);"
				],
				scale: "2.35",
				animate: [
					"setup",
					"spikes",
					"swim",
					"look_at_target",
					"move_eye"
				]
			},
			render_controllers: [
				"controller.render.guardian"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 36
			}
		}
	}
},
	"minecraft:elder_guardian.entity.v1.0.json": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:elder_guardian",
			materials: {
				"default": "guardian",
				ghost: "guardian_ghost"
			},
			textures: {
				"default": "textures/entity/guardian",
				elder: "textures/entity/guardian_elder",
				beam: "textures/entity/guardian_beam"
			},
			geometry: {
				"default": "geometry.guardian",
				ghost: "geometry.guardian"
			},
			animations: {
				setup: "animation.guardian.setup",
				spikes: "animation.guardian.spikes.v1.0",
				swim: "animation.guardian.swim",
				look_at_target: "animation.common.look_at_target",
				move_eye: "animation.guardian.move_eye.v1.0"
			},
			scripts: {
				initialize: [
					"variable.spike_animation_speed = 0.0;",
					"variable.tail_animation_speed = 0.0;",
					"variable.tail_swim = 0.0;"
				],
				pre_animation: [
					"variable.spike_shake = Math.sin(query.life_time * 2000)/50;",
					"variable.spike_animation_speed = query.life_time < 0.1 ? 0.0 : (!query.is_in_water ? (Math.round(Math.sin(query.life_time * 2000)) == 0.0 ? (Math.random(0.0, 1.0)) : (variable.spike_animation_speed)) : (query.is_moving ? (variable.spike_animation_speed - variable.spike_animation_speed * 0.06) : (variable.spike_animation_speed + (1.0 - variable.spike_animation_speed) * 0.06)));",
					"variable.spike_extension = (1.0 - variable.spike_animation_speed) * 0.55;",
					"variable.tail_animation_speed = query.life_time < 0.1 ? 0.0 : (!query.is_in_water ? 2.0 : query.is_moving ? (variable.tail_animation_speed < 0.5 ? 4.0 : variable.tail_animation_speed + (0.5 - variable.tail_animation_speed) * 0.1) : variable.tail_animation_speed + (0.125 - variable.tail_animation_speed) * 0.2);",
					"variable.tail_swim = query.life_time < 0.1 ? 0.0 : (variable.tail_swim + variable.tail_animation_speed);",
					"variable.tail_base_angle = Math.sin(variable.tail_swim*20.0);"
				],
				scale: "2.35",
				animate: [
					"setup",
					"spikes",
					"swim",
					"look_at_target",
					"move_eye"
				]
			},
			render_controllers: [
				"controller.render.guardian"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 36
			}
		}
	}
},
	"minecraft:enderman": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:enderman",
			min_engine_version: "1.8.0",
			materials: {
				"default": "enderman",
				invisible: "enderman_invisible"
			},
			textures: {
				"default": "textures/entity/enderman/enderman"
			},
			geometry: {
				"default": "geometry.enderman.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 28.65;"
				]
			},
			animations: {
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"attack.rotations": "animation.humanoid.attack.rotations",
				bob: "animation.humanoid.bob",
				base_pose: "animation.enderman.base_pose",
				arms_legs: "animation.enderman.arms_legs",
				carrying: "animation.enderman.carrying",
				scary_face: "animation.enderman.scary_face"
			},
			animation_controllers: [
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					base_pose: "controller.animation.enderman.base_pose"
				},
				{
					carrying: "controller.animation.enderman.carrying"
				},
				{
					scary_face: "controller.animation.enderman.scary_face"
				}
			],
			render_controllers: [
				"controller.render.enderman"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 7
			}
		}
	}
},
	"minecraft:enderman.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:enderman",
			materials: {
				"default": "enderman",
				invisible: "enderman_invisible"
			},
			textures: {
				"default": "textures/entity/enderman/enderman"
			},
			geometry: {
				"default": "geometry.enderman"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 28.65;"
				]
			},
			animations: {
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"attack.rotations": "animation.humanoid.attack.rotations",
				bob: "animation.humanoid.bob",
				base_pose: "animation.enderman.base_pose_v1.0",
				arms_legs: "animation.enderman.arms_legs",
				carrying: "animation.enderman.carrying",
				scary_face: "animation.enderman.scary_face_v1.0"
			},
			animation_controllers: [
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					base_pose: "controller.animation.enderman.base_pose"
				},
				{
					carrying: "controller.animation.enderman.carrying"
				},
				{
					scary_face: "controller.animation.enderman.scary_face"
				}
			],
			render_controllers: [
				"controller.render.enderman"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 7
			}
		}
	}
},
	"minecraft:endermite": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:endermite",
			materials: {
				"default": "endermite"
			},
			textures: {
				"default": "textures/entity/endermite"
			},
			geometry: {
				"default": "geometry.endermite"
			},
			animations: {
				move: "animation.endermite.move"
			},
			animation_controllers: [
				{
					move: "controller.animation.endermite.move"
				}
			],
			render_controllers: [
				"controller.render.endermite"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 25
			}
		}
	}
},
	"minecraft:ender_crystal": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:ender_crystal",
			materials: {
				"default": "ender_crystal"
			},
			textures: {
				"default": "textures/entity/endercrystal/endercrystal",
				beam: "textures/entity/endercrystal/endercrystal_beam"
			},
			geometry: {
				"default": "geometry.ender_crystal"
			},
			animations: {
				move: "animation.ender_crystal.move"
			},
			scripts: {
				initialize: [
					"variable.time_offset = Math.random(0, 100000);"
				],
				animate: [
					"move"
				],
				should_update_effects_offscreen: "1.0"
			},
			render_controllers: [
				"controller.render.ender_crystal"
			]
		}
	}
},
	"minecraft:ender_dragon": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:ender_dragon",
			materials: {
				"default": "ender_dragon",
				beam_material: "entity_beam",
				death_material: "entity_beam_additive",
				dissolve_0: "entity_dissolve_layer0.skinning",
				dissolve_1: "entity_dissolve_layer1.skinning"
			},
			textures: {
				"default": "textures/entity/dragon/dragon",
				exploding: "textures/entity/dragon/dragon_exploding",
				beam: "textures/entity/endercrystal/endercrystal_beam"
			},
			geometry: {
				"default": "geometry.dragon"
			},
			scripts: {
				pre_animation: [
					"variable.flap_time = query.wing_flap_position * 360.0;",
					"variable.base_rotation = Math.sin(variable.flap_time - 57.3) + 57.3;",
					"variable.rotation_factor = (variable.base_rotation * variable.base_rotation + variable.base_rotation * 114.6) * 2.87;",
					"variable.base_rotation_translate = Math.sin(variable.flap_time - 57.3) + 1.0;",
					"variable.rotation_factor_translate = (variable.base_rotation_translate * variable.base_rotation_translate + variable.base_rotation_translate * 2.0) * 0.05;",
					"variable.pre_rotation_raw = Math.mod(v.historical_frame_5.rot_y - v.historical_frame_10.rot_y + 180.0, 360.0);",
					"variable.pre_rotation = variable.pre_rotation_raw < 0.0 ? variable.pre_rotation_raw + 180.0 : variable.pre_rotation_raw - 180.0;",
					"variable.piece_rotation_raw = Math.mod(v.historical_frame_5.rot_y + (variable.pre_rotation / 2.0) + 180.0, 360.0);",
					"variable.piece_rotation = variable.piece_rotation_raw < 0.0 ? variable.piece_rotation_raw + 180.0 : variable.piece_rotation_raw - 180.0;",
					"variable.rotationScale = 1.5;",
					"variable.death_effect_duration = 200.0;",
					"variable.death_alpha = (1.0 - (query.death_ticks + query.frame_alpha) / variable.death_effect_duration) * 2.0 + 0.3;",
					"variable.pitch = -(math.min_angle(v.historical_frame_5.pos_y - v.historical_frame_10.pos_y)) * 10.0;",
					"variable.roll = math.min_angle(v.historical_frame_5.rot_y - v.historical_frame_10.rot_y) * variable.rotationScale;",
					"variable.clamped_pitch = math.clamp(variable.pitch, -30, 30);",
					"variable.clamped_roll = math.clamp(variable.roll, -45, 45);",
					"variable.neck_distance = 10.0;",
					"variable.neck_1_rotation_x = Math.cos(variable.flap_time) * 8.6 + (query.is_sitting ? 0.0 : (v.historical_frame_5.pos_y - v.historical_frame_6.pos_y)) * variable.rotationScale * 5.0;",
					"variable.neck_1_rotation_y_raw = Math.mod((v.historical_frame_5.rot_y - v.historical_frame_6.rot_y) + 180.0, 360.0);",
					"variable.neck_1_rotation_y = (variable.neck_1_rotation_y_raw < 0.0 ? (variable.neck_1_rotation_y_raw + 180.0) : (variable.neck_1_rotation_y_raw - 180.0)) * variable.rotationScale;",
					"variable.neck_1_rotation_z_raw = Math.mod((v.historical_frame_5.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.neck_1_rotation_z = -(variable.neck_1_rotation_z_raw < 0.0 ? (variable.neck_1_rotation_z_raw + 180.0) : (variable.neck_1_rotation_z_raw - 180.0))  * variable.rotationScale;",
					"variable.neck_1_position_x = 0.0;",
					"variable.neck_1_position_y = -20.0;",
					"variable.neck_1_position_z = -12.0;",
					"variable.neck_2_rotation_x = Math.cos(25.79 + variable.flap_time) * 8.6 + (query.is_sitting ? 1.0 : (v.historical_frame_4.pos_y - v.historical_frame_6.pos_y)) * variable.rotationScale * 5.0;",
					"variable.neck_2_rotation_y_raw = Math.mod((v.historical_frame_4.rot_y - v.historical_frame_6.rot_y) + 180.0, 360.0);",
					"variable.neck_2_rotation_y = (variable.neck_2_rotation_y_raw < 0.0 ? (variable.neck_2_rotation_y_raw + 180.0) : (variable.neck_2_rotation_y_raw - 180.0)) * variable.rotationScale;",
					"variable.neck_2_rotation_z_raw = Math.mod((v.historical_frame_4.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.neck_2_rotation_z = -(variable.neck_2_rotation_z_raw < 0.0 ? (variable.neck_2_rotation_z_raw + 180.0) : (variable.neck_2_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.neck_2_position_x = variable.neck_1_position_x - Math.sin(variable.neck_1_rotation_y) * Math.cos(variable.neck_1_rotation_x) * variable.neck_distance;",
					"variable.neck_2_position_y = variable.neck_1_position_y - Math.sin(variable.neck_1_rotation_x) * variable.neck_distance;",
					"variable.neck_2_position_z = variable.neck_1_position_z - Math.cos(variable.neck_1_rotation_y) * Math.cos(variable.neck_1_rotation_x) * variable.neck_distance;",
					"variable.neck_3_rotation_x = Math.cos(51.57 + variable.flap_time) * 8.6 + (query.is_sitting ? 2.0 : (v.historical_frame_3.pos_y - v.historical_frame_6.pos_y)) * variable.rotationScale * 5.0;",
					"variable.neck_3_rotation_y_raw = Math.mod((v.historical_frame_3.rot_y - v.historical_frame_6.rot_y + 180.0), 360.0);",
					"variable.neck_3_rotation_y = (variable.neck_3_rotation_y_raw < 0.0 ? (variable.neck_3_rotation_y_raw + 180.0) : (variable.neck_3_rotation_y_raw - 180.0)) * variable.rotationScale;",
					"variable.neck_3_rotation_z_raw = Math.mod((v.historical_frame_3.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.neck_3_rotation_z = -(variable.neck_3_rotation_z_raw < 0.0 ? (variable.neck_3_rotation_z_raw + 180.0) : (variable.neck_3_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.neck_3_position_x = variable.neck_2_position_x - Math.sin(variable.neck_2_rotation_y) * Math.cos(variable.neck_2_rotation_x) * variable.neck_distance;",
					"variable.neck_3_position_y = variable.neck_2_position_y - Math.sin(variable.neck_2_rotation_x) * variable.neck_distance;",
					"variable.neck_3_position_z = variable.neck_2_position_z - Math.cos(variable.neck_2_rotation_y) * Math.cos(variable.neck_2_rotation_x) * variable.neck_distance;",
					"variable.neck_4_rotation_x = Math.cos(77.36 + variable.flap_time) * 8.6 + (query.is_sitting ? 3.0 : (v.historical_frame_2.pos_y - v.historical_frame_6.pos_y)) * variable.rotationScale * 5.0;",
					"variable.neck_4_rotation_y_raw = Math.mod((v.historical_frame_2.rot_y - v.historical_frame_6.rot_y + 180.0), 360.0);",
					"variable.neck_4_rotation_y = (variable.neck_4_rotation_y_raw < 0.0 ? (variable.neck_4_rotation_y_raw + 180.0) : (variable.neck_4_rotation_y_raw - 180.0)) * variable.rotationScale;",
					"variable.neck_4_rotation_z_raw = Math.mod((v.historical_frame_2.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.neck_4_rotation_z = -(variable.neck_4_rotation_z_raw < 0.0 ? (variable.neck_4_rotation_z_raw + 180.0) : (variable.neck_4_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.neck_4_position_x = variable.neck_3_position_x - Math.sin(variable.neck_3_rotation_y) * Math.cos(variable.neck_3_rotation_x) * variable.neck_distance;",
					"variable.neck_4_position_y = variable.neck_3_position_y - Math.sin(variable.neck_3_rotation_x) * variable.neck_distance;",
					"variable.neck_4_position_z = variable.neck_3_position_z - Math.cos(variable.neck_3_rotation_y) * Math.cos(variable.neck_3_rotation_x) * variable.neck_distance;",
					"variable.neck_5_rotation_x = Math.cos(103.14 + variable.flap_time) * 8.6 + (query.is_sitting ? 4.0 : (v.historical_frame_1.pos_y - v.historical_frame_6.pos_y)) * variable.rotationScale * 5.0;",
					"variable.neck_5_rotation_y_raw = Math.mod((v.historical_frame_1.rot_y - v.historical_frame_6.rot_y) + 180.0, 360.0);",
					"variable.neck_5_rotation_y = (variable.neck_5_rotation_y_raw < 0.0 ? (variable.neck_5_rotation_y_raw + 180.0) : (variable.neck_5_rotation_y_raw - 180.0)) * variable.rotationScale;",
					"variable.neck_5_rotation_z_raw = Math.mod((v.historical_frame_1.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.neck_5_rotation_z = -(variable.neck_5_rotation_z_raw < 0.0 ? (variable.neck_5_rotation_z_raw + 180.0) : (variable.neck_5_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.neck_5_position_x = variable.neck_4_position_x - Math.sin(variable.neck_4_rotation_y) * Math.cos(variable.neck_4_rotation_x) * variable.neck_distance;",
					"variable.neck_5_position_y = variable.neck_4_position_y - Math.sin(variable.neck_4_rotation_x) * variable.neck_distance;",
					"variable.neck_5_position_z = variable.neck_4_position_z - Math.cos(variable.neck_4_rotation_y) * Math.cos(variable.neck_4_rotation_x) * variable.neck_distance;",
					"variable.head_rotation_x_raw = Math.mod((query.is_sitting ? 6.0 : 0.0) + 180.0, 360.0);",
					"variable.head_rotation_x = (variable.head_rotation_x_raw < 0.0 ? (variable.head_rotation_x_raw + 180.0) : (variable.head_rotation_x_raw - 180.0)) * variable.rotationScale * 5.0;",
					"variable.head_rotation_y_raw = Math.mod((v.historical_frame_0.rot_y - v.historical_frame_6.rot_y) + 180.0, 360.0);",
					"variable.head_rotation_y = (variable.head_rotation_y_raw < 0.0 ? (variable.head_rotation_y_raw + 180.0) : (variable.head_rotation_y_raw - 180.0));",
					"variable.head_rotation_z_raw = Math.mod((v.historical_frame_0.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.head_rotation_z = -(variable.head_rotation_z_raw < 0.0 ? (variable.head_rotation_z_raw + 180.0) : (variable.head_rotation_z_raw - 180.0));",
					"variable.head_position_x = variable.neck_5_position_x - Math.sin(variable.neck_5_rotation_y) * Math.cos(variable.neck_5_rotation_x) * variable.neck_distance;",
					"variable.head_position_y = variable.neck_5_position_y - Math.sin(variable.neck_5_rotation_x) * variable.neck_distance;",
					"variable.head_position_z = variable.neck_5_position_z - Math.cos(variable.neck_5_rotation_y) * Math.cos(variable.neck_5_rotation_x) * variable.neck_distance;",
					"variable.tail_distance = 10.0;",
					"variable.tail_rotation_y = 180.0;",
					"variable.tail_rotation_x = Math.sin(variable.flap_time) * 2.86;",
					"variable.tail_1_rotation_x = variable.tail_rotation_x + (v.historical_frame_12.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_1_rotation_y_raw = Math.mod((v.historical_frame_12.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_1_rotation_y = (variable.tail_1_rotation_y_raw < 0.0 ? (variable.tail_1_rotation_y_raw + 180.0) : (variable.tail_1_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_1_rotation_z_raw = Math.mod((v.historical_frame_12.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_1_rotation_z = -(variable.tail_1_rotation_z_raw < 0.0 ? (variable.tail_1_rotation_z_raw + 180.0) : (variable.tail_1_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_1_position_x = 0.0;",
					"variable.tail_1_position_y = -10.0;",
					"variable.tail_1_position_z = 60.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(25.78 + variable.flap_time) * 2.86;",
					"variable.tail_2_rotation_x = variable.tail_rotation_x + (v.historical_frame_13.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_2_rotation_y_raw = Math.mod((v.historical_frame_13.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_2_rotation_y = (variable.tail_2_rotation_y_raw < 0.0 ? (variable.tail_2_rotation_y_raw + 180.0) : (variable.tail_2_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_2_rotation_z_raw = Math.mod((v.historical_frame_13.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_2_rotation_z = -(variable.tail_2_rotation_z_raw < 0.0 ? (variable.tail_2_rotation_z_raw + 180.0) : (variable.tail_2_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_2_position_x = variable.tail_1_position_x - Math.sin(variable.tail_1_rotation_y) * Math.cos(variable.tail_1_rotation_x) * 10.0;",
					"variable.tail_2_position_y = variable.tail_1_position_y - Math.sin(variable.tail_1_rotation_x) * variable.tail_distance;",
					"variable.tail_2_position_z = variable.tail_1_position_z - Math.cos(variable.tail_1_rotation_y) * Math.cos(variable.tail_1_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(51.56 + variable.flap_time) * 2.86;",
					"variable.tail_3_rotation_x = variable.tail_rotation_x + (v.historical_frame_14.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_3_rotation_y_raw = Math.mod((v.historical_frame_14.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_3_rotation_y = (variable.tail_3_rotation_y_raw < 0.0 ? (variable.tail_3_rotation_y_raw + 180.0) : (variable.tail_3_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_3_rotation_z_raw = Math.mod((v.historical_frame_14.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_3_rotation_z = -(variable.tail_3_rotation_z_raw < 0.0 ? (variable.tail_3_rotation_z_raw + 180.0) : (variable.tail_3_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_3_position_x = variable.tail_2_position_x - Math.sin(variable.tail_2_rotation_y) * Math.cos(variable.tail_2_rotation_x) * 10.0;",
					"variable.tail_3_position_y = variable.tail_2_position_y - Math.sin(variable.tail_2_rotation_x) * variable.tail_distance;",
					"variable.tail_3_position_z = variable.tail_2_position_z - Math.cos(variable.tail_2_rotation_y) * Math.cos(variable.tail_2_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(77.35 + variable.flap_time) * 2.86;",
					"variable.tail_4_rotation_x = variable.tail_rotation_x + (v.historical_frame_15.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_4_rotation_y_raw = Math.mod((v.historical_frame_15.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_4_rotation_y = (variable.tail_4_rotation_y_raw < 0.0 ? (variable.tail_4_rotation_y_raw + 180.0) : (variable.tail_4_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_4_rotation_z_raw = Math.mod((v.historical_frame_15.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_4_rotation_z = -(variable.tail_4_rotation_z_raw < 0.0 ? (variable.tail_4_rotation_z_raw + 180.0) : (variable.tail_4_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_4_position_x = variable.tail_3_position_x - Math.sin(variable.tail_3_rotation_y) * Math.cos(variable.tail_3_rotation_x) * 10.0;",
					"variable.tail_4_position_y = variable.tail_3_position_y - Math.sin(variable.tail_3_rotation_x) * variable.tail_distance;",
					"variable.tail_4_position_z = variable.tail_3_position_z - Math.cos(variable.tail_3_rotation_y) * Math.cos(variable.tail_3_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(103.13 + variable.flap_time) * 2.86;",
					"variable.tail_5_rotation_x = variable.tail_rotation_x + (v.historical_frame_16.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_5_rotation_y_raw = Math.mod((v.historical_frame_16.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_5_rotation_y = (variable.tail_5_rotation_y_raw < 0.0 ? (variable.tail_5_rotation_y_raw + 180.0) : (variable.tail_5_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_5_rotation_z_raw = Math.mod((v.historical_frame_16.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_5_rotation_z = -(variable.tail_5_rotation_z_raw < 0.0 ? (variable.tail_5_rotation_z_raw + 180.0) : (variable.tail_5_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_5_position_x = variable.tail_4_position_x - Math.sin(variable.tail_4_rotation_y) * Math.cos(variable.tail_4_rotation_x) * 10.0;",
					"variable.tail_5_position_y = variable.tail_4_position_y - Math.sin(variable.tail_4_rotation_x) * variable.tail_distance;",
					"variable.tail_5_position_z = variable.tail_4_position_z - Math.cos(variable.tail_4_rotation_y) * Math.cos(variable.tail_4_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(128.92 + variable.flap_time) * 2.86;",
					"variable.tail_6_rotation_x = variable.tail_rotation_x + (v.historical_frame_17.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_6_rotation_y_raw = Math.mod((v.historical_frame_17.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_6_rotation_y = (variable.tail_6_rotation_y_raw < 0.0 ? (variable.tail_6_rotation_y_raw + 180.0) : (variable.tail_6_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_6_rotation_z_raw = Math.mod((v.historical_frame_17.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_6_rotation_z = -(variable.tail_6_rotation_z_raw < 0.0 ? (variable.tail_6_rotation_z_raw + 180.0) : (variable.tail_6_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_6_position_x = variable.tail_5_position_x - Math.sin(variable.tail_5_rotation_y) * Math.cos(variable.tail_5_rotation_x) * 10.0;",
					"variable.tail_6_position_y = variable.tail_5_position_y - Math.sin(variable.tail_5_rotation_x) * variable.tail_distance;",
					"variable.tail_6_position_z = variable.tail_5_position_z - Math.cos(variable.tail_5_rotation_y) * Math.cos(variable.tail_5_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(154.70 + variable.flap_time) * 2.86;",
					"variable.tail_7_rotation_x = variable.tail_rotation_x + (v.historical_frame_18.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_7_rotation_y_raw = Math.mod((v.historical_frame_18.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_7_rotation_y = (variable.tail_7_rotation_y_raw < 0.0 ? (variable.tail_7_rotation_y_raw + 180.0) : (variable.tail_7_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_7_rotation_z_raw = Math.mod((v.historical_frame_18.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_7_rotation_z = -(variable.tail_7_rotation_z_raw < 0.0 ? (variable.tail_7_rotation_z_raw + 180.0) : (variable.tail_7_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_7_position_x = variable.tail_6_position_x - Math.sin(variable.tail_6_rotation_y) * Math.cos(variable.tail_6_rotation_x) * 10.0;",
					"variable.tail_7_position_y = variable.tail_6_position_y - Math.sin(variable.tail_6_rotation_x) * variable.tail_distance;",
					"variable.tail_7_position_z = variable.tail_6_position_z - Math.cos(variable.tail_6_rotation_y) * Math.cos(variable.tail_6_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(180.48 + variable.flap_time) * 2.86;",
					"variable.tail_8_rotation_x = variable.tail_rotation_x + (v.historical_frame_19.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_8_rotation_y_raw = Math.mod((v.historical_frame_19.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_8_rotation_y = (variable.tail_8_rotation_y_raw < 0.0 ? (variable.tail_8_rotation_y_raw + 180.0) : (variable.tail_8_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_8_rotation_z_raw = Math.mod((v.historical_frame_19.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_8_rotation_z = -(variable.tail_8_rotation_z_raw < 0.0 ? (variable.tail_8_rotation_z_raw + 180.0) : (variable.tail_8_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_8_position_x = variable.tail_7_position_x - Math.sin(variable.tail_7_rotation_y) * Math.cos(variable.tail_7_rotation_x) * 10.0;",
					"variable.tail_8_position_y = variable.tail_7_position_y - Math.sin(variable.tail_7_rotation_x) * variable.tail_distance;",
					"variable.tail_8_position_z = variable.tail_7_position_z - Math.cos(variable.tail_7_rotation_y) * Math.cos(variable.tail_7_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(206.26 + variable.flap_time) * 2.86;",
					"variable.tail_9_rotation_x = variable.tail_rotation_x + (v.historical_frame_20.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_9_rotation_y_raw = Math.mod((v.historical_frame_20.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_9_rotation_y = (variable.tail_9_rotation_y_raw < 0.0 ? (variable.tail_9_rotation_y_raw + 180.0) : (variable.tail_9_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_9_rotation_z_raw = Math.mod((v.historical_frame_20.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_9_rotation_z = -(variable.tail_9_rotation_z_raw < 0.0 ? (variable.tail_9_rotation_z_raw + 180.0) : (variable.tail_9_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_9_position_x = variable.tail_8_position_x - Math.sin(variable.tail_8_rotation_y) * Math.cos(variable.tail_8_rotation_x) * 10.0;",
					"variable.tail_9_position_y = variable.tail_8_position_y - Math.sin(variable.tail_8_rotation_x) * variable.tail_distance;",
					"variable.tail_9_position_z = variable.tail_8_position_z - Math.cos(variable.tail_8_rotation_y) * Math.cos(variable.tail_8_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(232.05 + variable.flap_time) * 2.86;",
					"variable.tail_10_rotation_x = variable.tail_rotation_x + (v.historical_frame_21.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_10_rotation_y_raw = Math.mod((v.historical_frame_21.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_10_rotation_y = (variable.tail_10_rotation_y_raw < 0.0 ? (variable.tail_10_rotation_y_raw + 180.0) : (variable.tail_10_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_10_rotation_z_raw = Math.mod((v.historical_frame_21.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_10_rotation_z = -(variable.tail_10_rotation_z_raw < 0.0 ? (variable.tail_10_rotation_z_raw + 180.0) : (variable.tail_10_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_10_position_x = variable.tail_9_position_x - Math.sin(variable.tail_9_rotation_y) * Math.cos(variable.tail_9_rotation_x) * 10.0;",
					"variable.tail_10_position_y = variable.tail_9_position_y - Math.sin(variable.tail_9_rotation_x) * variable.tail_distance;",
					"variable.tail_10_position_z = variable.tail_9_position_z - Math.cos(variable.tail_9_rotation_y) * Math.cos(variable.tail_9_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(257.83 + variable.flap_time) * 2.86;",
					"variable.tail_11_rotation_x = variable.tail_rotation_x + (v.historical_frame_22.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_11_rotation_y_raw = Math.mod((v.historical_frame_22.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_11_rotation_y = (variable.tail_11_rotation_y_raw < 0.0 ? (variable.tail_11_rotation_y_raw + 180.0) : (variable.tail_11_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_11_rotation_z_raw = Math.mod((v.historical_frame_22.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_11_rotation_z = -(variable.tail_11_rotation_z_raw < 0.0 ? (variable.tail_11_rotation_z_raw + 180.0) : (variable.tail_11_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_11_position_x = variable.tail_10_position_x - Math.sin(variable.tail_10_rotation_y) * Math.cos(variable.tail_10_rotation_x) * 10.0;",
					"variable.tail_11_position_y = variable.tail_10_position_y - Math.sin(variable.tail_10_rotation_x) * variable.tail_distance;",
					"variable.tail_11_position_z = variable.tail_10_position_z - Math.cos(variable.tail_10_rotation_y) * Math.cos(variable.tail_10_rotation_x) * 10.0;",
					"variable.tail_rotation_x = variable.tail_rotation_x + Math.sin(283.61 + variable.flap_time) * 2.86;",
					"variable.tail_12_rotation_x = variable.tail_rotation_x + (v.historical_frame_23.pos_y - v.historical_frame_11.pos_y) * variable.rotationScale * 5.0;",
					"variable.tail_12_rotation_y_raw = Math.mod((v.historical_frame_23.rot_y - v.historical_frame_11.rot_y) + 180.0, 360.0);",
					"variable.tail_12_rotation_y = (variable.tail_12_rotation_y_raw < 0.0 ? (variable.tail_12_rotation_y_raw + 180.0) : (variable.tail_12_rotation_y_raw - 180.0)) * variable.rotationScale + variable.tail_rotation_y;",
					"variable.tail_12_rotation_z_raw = Math.mod((v.historical_frame_23.rot_y - variable.piece_rotation) + 180.0, 360.0);",
					"variable.tail_12_rotation_z = -(variable.tail_12_rotation_z_raw < 0.0 ? (variable.tail_12_rotation_z_raw + 180.0) : (variable.tail_12_rotation_z_raw - 180.0)) * variable.rotationScale;",
					"variable.tail_12_position_x = variable.tail_11_position_x - Math.sin(variable.tail_11_rotation_y) * Math.cos(variable.tail_11_rotation_x) * 10.0;",
					"variable.tail_12_position_y = variable.tail_11_position_y - Math.sin(variable.tail_11_rotation_x) * variable.tail_distance;",
					"variable.tail_12_position_z = variable.tail_11_position_z - Math.cos(variable.tail_11_rotation_y) * Math.cos(variable.tail_11_rotation_x) * 10.0;"
				],
				animate: [
					"setup",
					"jaw_movement",
					"neck_head_movement",
					"wings_limbs_movement",
					"tail_movement"
				]
			},
			animations: {
				setup: "animation.ender_dragon.setup",
				jaw_movement: "animation.ender_dragon.jaw_movement",
				neck_head_movement: "animation.ender_dragon.neck_head_movement",
				wings_limbs_movement: "animation.ender_dragon.wings_limbs_movement",
				tail_movement: "animation.ender_dragon.tail_movement"
			},
			render_controllers: [
				{
					"controller.render.ender_dragon_death_pre_pass": "query.death_ticks > 1.0"
				},
				{
					"controller.render.ender_dragon_death_main_pass": "query.death_ticks > 1.0"
				},
				{
					"controller.render.ender_dragon_default": "query.death_ticks <= 1.0"
				}
			]
		}
	}
},
	"minecraft:ender_eye": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:eye_of_ender_signal",
			materials: {
				"default": "eye_of_ender_signal"
			},
			textures: {
				"default": "textures/items/ender_eye"
			},
			geometry: {
				"default": "geometry.item_sprite"
			},
			render_controllers: [
				"controller.render.item_sprite"
			],
			animations: {
				flying: "animation.actor.billboard"
			},
			scripts: {
				animate: [
					"flying"
				]
			}
		}
	}
},
	"minecraft:ender_pearl": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:ender_pearl",
			materials: {
				"default": "ender_pearl"
			},
			textures: {
				"default": "textures/items/ender_pearl"
			},
			geometry: {
				"default": "geometry.item_sprite"
			},
			render_controllers: [
				"controller.render.item_sprite"
			],
			animations: {
				flying: "animation.actor.billboard"
			},
			scripts: {
				animate: [
					"flying"
				]
			}
		}
	}
},
	"minecraft:evocation_fang": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:evocation_fang",
			materials: {
				"default": "fang"
			},
			textures: {
				"default": "textures/entity/illager/fangs"
			},
			geometry: {
				"default": "geometry.evocation_fang"
			},
			scripts: {
				pre_animation: [
					"variable.remaining_life = (query.life_span - 2.0) - (query.life_time*20.0);",
					"variable.animation_progress = query.life_span == 0.0 ? 0.0 : (variable.remaining_life < 1.0 ? 1.0 : 1.0 - Math.min(1.0, variable.remaining_life / 20.0));",
					"variable.bite_amount = (1 - Math.Pow(Math.Clamp(variable.animation_progress*2.0, 0, 1.0), 3.0)) * 0.35 * 180;",
					"variable.y_offset = (variable.animation_progress + Math.sin(variable.animation_progress*2.7*80.0)) * 0.6 * 12.0;"
				],
				animate: [
					"bite"
				],
				scale: "variable.animation_progress > 0.9 ? (1.0 - variable.animation_progress) / 0.1 : 1.0"
			},
			animations: {
				bite: "animation.evocation_fang.bite"
			},
			render_controllers: [
				"controller.render.evocation_fang"
			]
		}
	}
},
	"minecraft:evocation_illager": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:evocation_illager",
			min_engine_version: "1.8.0",
			materials: {
				"default": "evoker"
			},
			textures: {
				"default": "textures/entity/illager/evoker"
			},
			geometry: {
				"default": "geometry.evoker.v1.8"
			},
			scripts: {
				scale: "0.9375",
				animate: [
					"controller_general",
					"controller_move"
				]
			},
			animations: {
				general: "animation.evoker.general",
				casting: "animation.evoker.casting",
				look_at_target: "animation.common.look_at_target",
				move: "animation.villager.move",
				celebrating: "animation.humanoid.celebrating",
				controller_general: "controller.animation.evoker.general",
				controller_move: "controller.animation.villager.move"
			},
			particle_effects: {
				spell: "minecraft:evoker_spell"
			},
			render_controllers: [
				"controller.render.evoker"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 40
			}
		}
	}
},
	"minecraft:evocation_illager.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:evocation_illager",
			materials: {
				"default": "evoker"
			},
			textures: {
				"default": "textures/entity/illager/evoker"
			},
			geometry: {
				"default": "geometry.evoker"
			},
			scripts: {
				scale: "0.9375"
			},
			animations: {
				general: "animation.evoker.general.v1.0",
				casting: "animation.evoker.casting.v1.0",
				look_at_target: "animation.humanoid.look_at_target.default.v1.0",
				move: "animation.villager.move"
			},
			animation_controllers: [
				{
					general: "controller.animation.evoker.general.v1.0"
				},
				{
					move: "controller.animation.villager.move"
				}
			],
			particle_effects: {
				spell: "minecraft:evoker_spell"
			},
			render_controllers: [
				"controller.render.evoker"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 40
			}
		}
	}
},
	"minecraft:experience_bottle": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:xp_bottle",
			materials: {
				"default": "xp_bottle"
			},
			textures: {
				"default": "textures/items/experience_bottle",
				enchanted: "textures/misc/enchanted_item_glint"
			},
			geometry: {
				"default": "geometry.item_sprite"
			},
			render_controllers: [
				"controller.render.experience_bottle"
			],
			animations: {
				flying: "animation.actor.billboard"
			},
			scripts: {
				animate: [
					"flying"
				]
			}
		}
	}
},
	"minecraft:experience_orb": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:xp_orb",
			materials: {
				"default": "experience_orb"
			},
			textures: {
				"default": "textures/entity/experience_orb"
			},
			geometry: {
				"default": "geometry.experience_orb"
			},
			animations: {
				face_player: "animation.actor.billboard"
			},
			scripts: {
				scale: "0.3",
				pre_animation: [
					"variable.u = Math.mod(query.texture_frame_index, 4) * 16.0 / 64.0;",
					"variable.v = math.round(query.texture_frame_index / 4) * 16.0 / 64.0;"
				],
				animate: [
					"face_player"
				]
			},
			render_controllers: [
				"controller.render.experience_orb"
			]
		}
	}
},
	"minecraft:fireball": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:fireball",
			materials: {
				"default": "fireball"
			},
			textures: {
				"default": "textures/items/fireball"
			},
			geometry: {
				"default": "geometry.fireball"
			},
			animations: {
				face_player: "animation.actor.billboard"
			},
			scripts: {
				scale: "2.0",
				animate: [
					"face_player"
				]
			},
			render_controllers: [
				"controller.render.fireball"
			]
		}
	}
},
	"minecraft:fireworks_rocket": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:fireworks_rocket",
			materials: {
				"default": "fireworks_rocket"
			},
			textures: {
				"default": "textures/entity/fireworks"
			},
			geometry: {
				"default": "geometry.fireworks_rocket"
			},
			animations: {
				move: "animation.fireworks_rocket.move"
			},
			scripts: {
				animate: [
					"move"
				]
			},
			render_controllers: [
				"controller.render.fireworks_rocket"
			]
		}
	}
},
	"minecraft:fishing_hook": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:fishing_hook",
			materials: {
				"default": "fishing_hook"
			},
			textures: {
				"default": "textures/entity/fishhook"
			},
			geometry: {
				"default": "geometry.fishing_hook"
			},
			render_controllers: [
				"controller.render.fishing_hook"
			]
		}
	}
},
	"minecraft:fox": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:fox",
			materials: {
				"default": "fox"
			},
			textures: {
				red: "textures/entity/fox/fox",
				arctic: "textures/entity/fox/arctic_fox"
			},
			geometry: {
				"default": "geometry.fox"
			},
			animations: {
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.fox.baby_transform",
				crouch: "animation.fox.crouch",
				sleep: "animation.fox.sleep",
				setup: "animation.fox.setup",
				sit: "animation.fox.sit",
				wiggle: "animation.fox.wiggle",
				stuck: "animation.fox.stuck",
				pounce: "animation.fox.pounce",
				move: "controller.animation.fox.move"
			},
			scripts: {
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					"move"
				]
			},
			render_controllers: [
				"controller.render.fox"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 55
			}
		}
	}
},
	"minecraft:frog": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:frog",
			materials: {
				"default": "frog"
			},
			textures: {
				temperate: "textures/entity/frog/temperate_frog",
				cold: "textures/entity/frog/cold_frog",
				warm: "textures/entity/frog/warm_frog"
			},
			geometry: {
				"default": "geometry.frog"
			},
			spawn_egg: {
				base_color: "#d07444",
				overlay_color: "#ffc77c"
			},
			scripts: {
				pre_animation: [
					"variable.moving = query.ground_speed > 0 || query.vertical_speed > 0;"
				]
			},
			animations: {
				croak: "animation.frog.croak",
				jump: "animation.frog.jump",
				tongue: "animation.frog.tongue",
				walk: "animation.frog.walk",
				swim: "animation.frog.swim",
				idle_water: "animation.frog.idle.water",
				look_at_target: "animation.common.look_at_target"
			},
			animation_controllers: [
				{
					general: "controller.animation.frog.general"
				},
				{
					croaking: "controller.animation.frog.croaking"
				},
				{
					eat_mob: "controller.animation.frog.eat_mob"
				}
			],
			render_controllers: [
				"controller.render.frog"
			]
		}
	}
},
	"minecraft:ghast": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:ghast",
			materials: {
				"default": "ghast"
			},
			textures: {
				"default": "textures/entity/ghast/ghast",
				shooting: "textures/entity/ghast/ghast_shooting"
			},
			geometry: {
				"default": "geometry.ghast"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 19
			},
			animations: {
				move: "animation.ghast.move",
				scale: "animation.ghast.scale"
			},
			animation_controllers: [
				{
					move: "controller.animation.ghast.move"
				},
				{
					scale: "controller.animation.ghast.scale"
				}
			],
			render_controllers: [
				"controller.render.ghast"
			]
		}
	}
},
	"minecraft:glow_squid": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:glow_squid",
			materials: {
				"default": "glow_squid"
			},
			textures: {
				"default": "textures/entity/glow_squid/glow_squid"
			},
			geometry: {
				"default": "geometry.squid"
			},
			animations: {
				move: "animation.squid.move",
				squid_rotate: "animation.squid.rotate"
			},
			scripts: {
				animate: [
					"move",
					"squid_rotate"
				]
			},
			render_controllers: [
				"controller.render.glow_squid"
			],
			spawn_egg: {
				base_color: "#0x095656",
				overlay_color: "#0x85f1bc"
			}
		}
	}
},
	"minecraft:goat": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:goat",
			materials: {
				"default": "goat"
			},
			textures: {
				"default": "textures/entity/goat/goat"
			},
			geometry: {
				"default": "geometry.goat"
			},
			spawn_egg: {
				base_color: "#c0ac90",
				overlay_color: "#857261"
			},
			scripts: {
				pre_animation: [
					"variable.tcos_right_side = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;",
					"variable.tcos_left_side = -variable.tcos_right_side;",
					"variable.attack_head_rot =  Math.sin(variable.attack_time * 180.0) * -37.3;",
					"variable.ram_head_rot = Math.sin(variable.should_bow_head * 90.0) * 37.3;"
				],
				animate: [
					"walk",
					"look_at_target",
					{
						attack: "variable.has_target && variable.attack_time >= 0.0"
					},
					"ram_attack"
				]
			},
			animations: {
				walk: "animation.goat.walk",
				look_at_target: "animation.goat.look_at_target",
				attack: "animation.goat.attack",
				ram_attack: "animation.goat.ram_attack"
			},
			render_controllers: [
				"controller.render.goat"
			]
		}
	}
},
	"minecraft:guardian": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:guardian",
			min_engine_version: "1.8.0",
			materials: {
				"default": "guardian",
				ghost: "guardian_ghost"
			},
			textures: {
				"default": "textures/entity/guardian",
				elder: "textures/entity/guardian_elder",
				beam: "textures/entity/guardian_beam"
			},
			geometry: {
				"default": "geometry.guardian.v1.8",
				ghost: "geometry.guardian"
			},
			animations: {
				setup: "animation.guardian.setup",
				spikes: "animation.guardian.spikes",
				swim: "animation.guardian.swim",
				look_at_target: "animation.common.look_at_target",
				move_eye: "animation.guardian.move_eye"
			},
			scripts: {
				initialize: [
					"variable.spike_animation_speed = 0.0;",
					"variable.tail_animation_speed = 0.0;",
					"variable.tail_swim = 0.0;"
				],
				pre_animation: [
					"variable.spike_shake = Math.sin(query.life_time * 2000)/50;",
					"variable.spike_animation_speed = query.life_time < 0.1 ? 0.0 : (!query.is_in_water ? (Math.round(Math.sin(query.life_time * 2000)) == 0.0 ? (Math.random(0.0, 1.0)) : (variable.spike_animation_speed)) : (query.is_moving ? (variable.spike_animation_speed - variable.spike_animation_speed * 0.06) : (variable.spike_animation_speed + (1.0 - variable.spike_animation_speed) * 0.06)));",
					"variable.spike_extension = (1.0 - variable.spike_animation_speed) * 0.55;",
					"variable.tail_animation_speed = query.life_time < 0.1 ? 0.0 : (!query.is_in_water ? 2.0 : query.is_moving ? (variable.tail_animation_speed < 0.5 ? 4.0 : variable.tail_animation_speed + (0.5 - variable.tail_animation_speed) * 0.1) : variable.tail_animation_speed + (0.125 - variable.tail_animation_speed) * 0.2);",
					"variable.tail_swim = query.life_time < 0.1 ? 0.0 : (variable.tail_swim + variable.tail_animation_speed);",
					"variable.tail_base_angle = Math.sin(variable.tail_swim*20.0);"
				],
				animate: [
					"setup",
					"spikes",
					"swim",
					"look_at_target",
					"move_eye"
				]
			},
			render_controllers: [
				"controller.render.guardian"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 26
			}
		}
	}
},
	"minecraft:guardian.entity.v1.0.json": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:guardian",
			materials: {
				"default": "guardian",
				ghost: "guardian_ghost"
			},
			textures: {
				"default": "textures/entity/guardian",
				elder: "textures/entity/guardian_elder",
				beam: "textures/entity/guardian_beam"
			},
			geometry: {
				"default": "geometry.guardian",
				ghost: "geometry.guardian"
			},
			animations: {
				setup: "animation.guardian.setup",
				spikes: "animation.guardian.spikes.v1.0",
				swim: "animation.guardian.swim",
				look_at_target: "animation.common.look_at_target",
				move_eye: "animation.guardian.move_eye.v1.0"
			},
			scripts: {
				initialize: [
					"variable.spike_animation_speed = 0.0;",
					"variable.tail_animation_speed = 0.0;",
					"variable.tail_swim = 0.0;"
				],
				pre_animation: [
					"variable.spike_shake = Math.sin(query.life_time * 2000)/50;",
					"variable.spike_animation_speed = query.life_time < 0.1 ? 0.0 : (!query.is_in_water ? (Math.round(Math.sin(query.life_time * 2000)) == 0.0 ? (Math.random(0.0, 1.0)) : (variable.spike_animation_speed)) : (query.is_moving ? (variable.spike_animation_speed - variable.spike_animation_speed * 0.06) : (variable.spike_animation_speed + (1.0 - variable.spike_animation_speed) * 0.06)));",
					"variable.spike_extension = (1.0 - variable.spike_animation_speed) * 0.55;",
					"variable.tail_animation_speed = query.life_time < 0.1 ? 0.0 : (!query.is_in_water ? 2.0 : query.is_moving ? (variable.tail_animation_speed < 0.5 ? 4.0 : variable.tail_animation_speed + (0.5 - variable.tail_animation_speed) * 0.1) : variable.tail_animation_speed + (0.125 - variable.tail_animation_speed) * 0.2);",
					"variable.tail_swim = query.life_time < 0.1 ? 0.0 : (variable.tail_swim + variable.tail_animation_speed);",
					"variable.tail_base_angle = Math.sin(variable.tail_swim*20.0);"
				],
				animate: [
					"setup",
					"spikes",
					"swim",
					"look_at_target",
					"move_eye"
				]
			},
			render_controllers: [
				"controller.render.guardian"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 26
			}
		}
	}
},
	"minecraft:hoglin": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:hoglin",
			materials: {
				"default": "hoglin"
			},
			textures: {
				"default": "textures/entity/hoglin/hoglin"
			},
			geometry: {
				"default": "geometry.hoglin"
			},
			spawn_egg: {
				base_color: "#C66E55",
				overlay_color: "#5f6464"
			},
			scripts: {
				pre_animation: [
					"variable.tcos_right_side = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;",
					"variable.tcos_left_side = -variable.tcos_right_side;",
					"variable.attack_head_rot =  Math.sin(variable.attack_time * 180.0) * -37.3;"
				]
			},
			animations: {
				walk: "animation.hoglin.walk",
				look_at_target: "animation.hoglin.look_at_target",
				attack: "animation.hoglin.attack",
				hoglin_baby_scaling: "animation.hoglin.baby_scaling"
			},
			animation_controllers: [
				{
					look_at_target: "controller.animation.hoglin.look_at_target"
				},
				{
					walk: "controller.animation.hoglin.walk"
				},
				{
					attack: "controller.animation.hoglin.attack"
				},
				{
					hoglin_baby_scaling: "controller.animation.hoglin.baby_scaling"
				}
			],
			render_controllers: [
				"controller.render.hoglin"
			]
		}
	}
},
	"minecraft:hopper_minecart": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:hopper_minecart",
			min_engine_version: "1.8.0",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				]
			},
			animations: {
				move: "animation.minecart.move"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:hopper_minecart.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:hopper_minecart",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				]
			},
			animations: {
				move: "animation.minecart.move.v1.0"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:horse_v1": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:horse",
			materials: {
				"default": "horse_leather_armor"
			},
			textures: {
				base_brown: "textures/entity/horse/horse_brown",
				base_white: "textures/entity/horse/horse_white",
				base_creamy: "textures/entity/horse/horse_creamy",
				base_chestnut: "textures/entity/horse/horse_chestnut",
				base_black: "textures/entity/horse/horse_black",
				base_gray: "textures/entity/horse/horse_gray",
				base_darkbrown: "textures/entity/horse/horse_darkbrown",
				markings_none: "textures/entity/horse/horse_markings_none",
				markings_white: "textures/entity/horse/horse_markings_white",
				markings_whitefield: "textures/entity/horse/horse_markings_whitefield",
				markings_whitedots: "textures/entity/horse/horse_markings_whitedots",
				markings_blackdots: "textures/entity/horse/horse_markings_blackdots",
				armor_none: "textures/entity/horse/armor/horse_armor_none",
				armor_leather: "textures/entity/horse/armor/horse_armor_leather",
				armor_iron: "textures/entity/horse/armor/horse_armor_iron",
				armor_gold: "textures/entity/horse/armor/horse_armor_gold",
				armor_diamond: "textures/entity/horse/armor/horse_armor_diamond"
			},
			geometry: {
				"default": "geometry.horse"
			},
			animations: {
				setup: "animation.horse.setup",
				baby_transform: "animation.horse.baby_transform",
				walk: "animation.horse.walk",
				eat: "animation.horse.eat",
				stand: "animation.horse.stand",
				shake_tail: "animation.horse.shake_tail",
				mouth: "animation.horse.mouth",
				look_at_player: "animation.horse.look_at_player"
			},
			scripts: {
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;",
					"variable.leg_back_origin = query.bone_origin('leg1a');",
					"variable.leg_front_origin = query.bone_origin('leg3a');",
					"variable.head_rotation = query.bone_rotation('head');"
				],
				pre_animation: [
					"variable.armor_texture_slot = query.armor_texture_slot(1);",
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.walk_tail_angle = math.clamp(query.modified_move_speed * 50.0, 0.0, 90.0) * (1.0 - variable.stand_anim);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_walk_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_walk_factor * 45.8 * query.modified_move_speed;",
					"variable.leg_stand = math.cos((query.life_time * 20.0) * 34.38)  * variable.stand_anim;",
					"variable.baby_ratio = query.is_baby ? ((0.0625 - query.model_scale) * 16.0) : 0.0;"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					{
						walk: "variable.stand_anim < 0.5"
					},
					{
						stand: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						shake_tail: "variable.shake_tail"
					},
					"mouth",
					"look_at_player"
				]
			},
			render_controllers: [
				"controller.render.horse.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 23
			}
		}
	}
},
	"minecraft:horse_v2": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:horse",
			min_engine_version: "1.2.6",
			materials: {
				"default": "horse_leather_armor"
			},
			textures: {
				base_brown: "textures/entity/horse2/horse_brown",
				base_white: "textures/entity/horse2/horse_white",
				base_creamy: "textures/entity/horse2/horse_creamy",
				base_chestnut: "textures/entity/horse2/horse_chestnut",
				base_black: "textures/entity/horse2/horse_black",
				base_gray: "textures/entity/horse2/horse_gray",
				base_darkbrown: "textures/entity/horse2/horse_darkbrown",
				markings_none: "textures/entity/horse2/horse_markings_none",
				markings_white: "textures/entity/horse2/horse_markings_white",
				markings_whitefield: "textures/entity/horse2/horse_markings_whitefield",
				markings_whitedots: "textures/entity/horse2/horse_markings_whitedots",
				markings_blackdots: "textures/entity/horse2/horse_markings_blackdots",
				armor_none: "textures/entity/horse2/armor/horse_armor_none",
				armor_leather: "textures/entity/horse2/armor/horse_armor_leather",
				armor_iron: "textures/entity/horse2/armor/horse_armor_iron",
				armor_gold: "textures/entity/horse2/armor/horse_armor_gold",
				armor_diamond: "textures/entity/horse2/armor/horse_armor_diamond"
			},
			geometry: {
				"default": "geometry.horse.v2"
			},
			animations: {
				setup: "animation.horse.v2.setup",
				baby_transform: "animation.horse.v2.baby_transform",
				walk: "animation.horse.v2.walk",
				eat: "animation.horse.v2.eat",
				stand: "animation.horse.v2.stand",
				tail: "animation.horse.v2.tail"
			},
			scripts: {
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;"
				],
				pre_animation: [
					"variable.armor_texture_slot = query.armor_texture_slot(1);",
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim  * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;",
					"variable.leg1a_aabb = query.bone_aabb('leg1a');",
					"variable.y_adjust = query.is_baby ? 0.0 : (variable.leg1a_aabb.max.y - variable.leg1a_aabb.min.y) * (1.0 - (query.model_scale * 16.0));"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"stand",
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.horse.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 23
			}
		}
	}
},
	"minecraft:horse_v3": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:horse",
			min_engine_version: "1.17.10",
			materials: {
				"default": "horse_leather_armor"
			},
			textures: {
				base_brown: "textures/entity/horse2/horse_brown",
				base_white: "textures/entity/horse2/horse_white",
				base_creamy: "textures/entity/horse2/horse_creamy",
				base_chestnut: "textures/entity/horse2/horse_chestnut",
				base_black: "textures/entity/horse2/horse_black",
				base_gray: "textures/entity/horse2/horse_gray",
				base_darkbrown: "textures/entity/horse2/horse_darkbrown",
				markings_none: "textures/entity/horse2/horse_markings_none",
				markings_white: "textures/entity/horse2/horse_markings_white",
				markings_whitefield: "textures/entity/horse2/horse_markings_whitefield",
				markings_whitedots: "textures/entity/horse2/horse_markings_whitedots",
				markings_blackdots: "textures/entity/horse2/horse_markings_blackdots",
				armor_none: "textures/entity/horse2/armor/horse_armor_none",
				armor_leather: "textures/entity/horse2/armor/horse_armor_leather",
				armor_iron: "textures/entity/horse2/armor/horse_armor_iron",
				armor_gold: "textures/entity/horse2/armor/horse_armor_gold",
				armor_diamond: "textures/entity/horse2/armor/horse_armor_diamond"
			},
			geometry: {
				"default": "geometry.horse.v3"
			},
			animations: {
				baby_transform: "animation.horse.v3.baby_transform",
				walk: "animation.horse.v3.walk",
				eat: "animation.horse.v3.eat",
				rear: "animation.horse.v3.rear",
				tail: "animation.horse.v3.tail",
				look_at_player: "animation.horse.v3.look_at_player"
			},
			scripts: {
				initialize: [
					"variable.eat_anim = 0.0;"
				],
				pre_animation: [
					"variable.armor_texture_slot = query.armor_texture_slot(1);",
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;"
				],
				animate: [
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"look_at_player",
					{
						rear: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.horse.v3"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 23
			}
		}
	}
},
	"minecraft:husk": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:husk",
			min_engine_version: "1.8.0",
			materials: {
				"default": "husk"
			},
			textures: {
				"default": "textures/entity/zombie/husk"
			},
			geometry: {
				"default": "geometry.zombie.husk.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				"attack.rotations": "animation.humanoid.attack.rotations",
				sneaking: "animation.humanoid.sneaking",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				use_item_progress: "animation.humanoid.use_item_progress",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand",
				swimming: "animation.zombie.swimming"
			},
			animation_controllers: [
				{
					humanoid_baby_big_head: "controller.animation.humanoid.baby_big_head"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					zombie_attack_bare_hand: "controller.animation.zombie.attack_bare_hand"
				},
				{
					swimming: "controller.animation.zombie.swimming"
				}
			],
			render_controllers: [
				"controller.render.husk"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 28
			}
		}
	}
},
	"minecraft:husk.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:husk",
			materials: {
				"default": "husk"
			},
			textures: {
				"default": "textures/entity/zombie/husk"
			},
			geometry: {
				"default": "geometry.zombie.husk"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				"attack.rotations": "animation.humanoid.attack.rotations.v1.0",
				sneaking: "animation.humanoid.sneaking.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				bow_and_arrow: "animation.humanoid.bow_and_arrow.v1.0",
				swimming: "animation.humanoid.swimming.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand",
				zombie_swimming: "animation.zombie.swimming"
			},
			animation_controllers: [
				{
					humanoid_baby_big_head: "controller.animation.humanoid.baby_big_head"
				},
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					zombie_attack_bare_hand: "controller.animation.zombie.attack_bare_hand"
				},
				{
					zombie_swimming: "controller.animation.zombie.swimming"
				}
			],
			render_controllers: [
				"controller.render.husk"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 28
			}
		}
	}
},
	"minecraft:iron_golem": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:iron_golem",
			textures: {
				cracked_high: "textures/entity/iron_golem/cracked_high",
				cracked_med: "textures/entity/iron_golem/cracked_medium",
				cracked_low: "textures/entity/iron_golem/cracked_low",
				cracked_none: "textures/entity/iron_golem/cracked_none"
			},
			render_controllers: [
				"controller.render.iron_golem",
				"controller.render.iron_golem_cracks"
			]
		}
	}
},
	"minecraft:leash_knot": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:leash_knot",
			materials: {
				"default": "leash_knot"
			},
			textures: {
				"default": "textures/entity/lead_knot"
			},
			geometry: {
				"default": "geometry.leash_knot"
			},
			render_controllers: [
				"controller.render.leash_knot"
			]
		}
	}
},
	"minecraft:lingering_potion": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:lingering_potion",
			materials: {
				"default": "lingering_potion_enchanted"
			},
			textures: {
				moveSlowdown: "textures/items/potion_bottle_lingering_moveSlowdown",
				moveSpeed: "textures/items/potion_bottle_lingering_moveSpeed",
				digSlowdown: "textures/items/potion_bottle_lingering_digSlowdown",
				digSpeed: "textures/items/potion_bottle_lingering_digSpeed",
				damageBoost: "textures/items/potion_bottle_lingering_damageBoost",
				heal: "textures/items/potion_bottle_lingering_heal",
				harm: "textures/items/potion_bottle_lingering_harm",
				jump: "textures/items/potion_bottle_lingering_jump",
				confusion: "textures/items/potion_bottle_lingering_confusion",
				regeneration: "textures/items/potion_bottle_lingering_regeneration",
				resistance: "textures/items/potion_bottle_lingering_resistance",
				fireResistance: "textures/items/potion_bottle_lingering_fireResistance",
				waterBreathing: "textures/items/potion_bottle_lingering_waterBreathing",
				invisibility: "textures/items/potion_bottle_lingering_invisibility",
				blindness: "textures/items/potion_bottle_lingering_blindness",
				nightVision: "textures/items/potion_bottle_lingering_nightVision",
				hunger: "textures/items/potion_bottle_lingering_hunger",
				weakness: "textures/items/potion_bottle_lingering_weakness",
				poison: "textures/items/potion_bottle_lingering_poison",
				wither: "textures/items/potion_bottle_lingering_wither",
				healthBoost: "textures/items/potion_bottle_lingering_healthBoost",
				absorption: "textures/items/potion_bottle_lingering_absorption",
				saturation: "textures/items/potion_bottle_lingering_saturation",
				levitation: "textures/items/potion_bottle_lingering_levitation",
				turtleMaster: "textures/items/potion_bottle_lingering_turtleMaster",
				slowFall: "textures/items/potion_bottle_lingering_slowFall",
				"default": "textures/items/potion_bottle_lingering",
				enchanted: "textures/misc/enchanted_item_glint"
			},
			geometry: {
				"default": "geometry.item_sprite"
			},
			render_controllers: [
				"controller.render.lingering_potion"
			],
			animations: {
				flying: "animation.actor.billboard"
			},
			scripts: {
				animate: [
					"flying"
				]
			}
		}
	}
},
	"minecraft:llama": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:llama",
			min_engine_version: "1.8.0",
			materials: {
				"default": "llama"
			},
			textures: {
				creamy: "textures/entity/llama/llama_creamy",
				white: "textures/entity/llama/llama_white",
				brown: "textures/entity/llama/llama_brown",
				gray: "textures/entity/llama/llama_gray",
				decor_none: "textures/entity/llama/decor/decor_none",
				decor_white: "textures/entity/llama/decor/decor_white",
				decor_orange: "textures/entity/llama/decor/decor_orange",
				decor_magenta: "textures/entity/llama/decor/decor_magenta",
				decor_light_blue: "textures/entity/llama/decor/decor_light_blue",
				decor_yellow: "textures/entity/llama/decor/decor_yellow",
				decor_lime: "textures/entity/llama/decor/decor_lime",
				decor_pink: "textures/entity/llama/decor/decor_pink",
				decor_gray: "textures/entity/llama/decor/decor_gray",
				decor_silver: "textures/entity/llama/decor/decor_silver",
				decor_cyan: "textures/entity/llama/decor/decor_cyan",
				decor_purple: "textures/entity/llama/decor/decor_purple",
				decor_blue: "textures/entity/llama/decor/decor_blue",
				decor_brown: "textures/entity/llama/decor/decor_brown",
				decor_green: "textures/entity/llama/decor/decor_green",
				decor_red: "textures/entity/llama/decor/decor_red",
				decor_black: "textures/entity/llama/decor/decor_black",
				decor_wandering_trader: "textures/entity/llama/decor/trader_llama_decor"
			},
			geometry: {
				"default": "geometry.llama.v1.8"
			},
			animations: {
				setup: "animation.llama.setup",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.llama.baby_transform"
			},
			animation_controllers: [
				{
					move: "controller.animation.llama.move"
				},
				{
					baby: "controller.animation.llama.baby"
				}
			],
			render_controllers: [
				"controller.render.llama"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 38
			}
		}
	}
},
	"minecraft:llama.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:llama",
			materials: {
				"default": "llama"
			},
			textures: {
				creamy: "textures/entity/llama/llama_creamy",
				white: "textures/entity/llama/llama_white",
				brown: "textures/entity/llama/llama_brown",
				gray: "textures/entity/llama/llama_gray",
				decor_none: "textures/entity/llama/decor/decor_none",
				decor_white: "textures/entity/llama/decor/decor_white",
				decor_orange: "textures/entity/llama/decor/decor_orange",
				decor_magenta: "textures/entity/llama/decor/decor_magenta",
				decor_light_blue: "textures/entity/llama/decor/decor_light_blue",
				decor_yellow: "textures/entity/llama/decor/decor_yellow",
				decor_lime: "textures/entity/llama/decor/decor_lime",
				decor_pink: "textures/entity/llama/decor/decor_pink",
				decor_gray: "textures/entity/llama/decor/decor_gray",
				decor_silver: "textures/entity/llama/decor/decor_silver",
				decor_cyan: "textures/entity/llama/decor/decor_cyan",
				decor_purple: "textures/entity/llama/decor/decor_purple",
				decor_blue: "textures/entity/llama/decor/decor_blue",
				decor_brown: "textures/entity/llama/decor/decor_brown",
				decor_green: "textures/entity/llama/decor/decor_green",
				decor_red: "textures/entity/llama/decor/decor_red",
				decor_black: "textures/entity/llama/decor/decor_black",
				decor_wandering_trader: "textures/entity/llama/decor/trader_llama_decor"
			},
			geometry: {
				"default": "geometry.llama"
			},
			animations: {
				setup: "animation.llama.setup.v1.0",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.llama.baby_transform.v1.0"
			},
			animation_controllers: [
				{
					move: "controller.animation.llama.move"
				},
				{
					baby: "controller.animation.llama.baby"
				}
			],
			render_controllers: [
				"controller.render.llama"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 38
			}
		}
	}
},
	"minecraft:llama_spit": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:llama_spit",
			materials: {
				"default": "llama_spit"
			},
			textures: {
				"default": "textures/entity/llama/spit"
			},
			geometry: {
				"default": "geometry.llamaspit"
			},
			animations: {
				setup: "animation.llama_spit.setup"
			},
			scripts: {
				animate: [
					"setup"
				]
			},
			render_controllers: [
				"controller.render.llama_spit"
			]
		}
	}
},
	"minecraft:magma_cube": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:magma_cube",
			materials: {
				"default": "magma_cube"
			},
			textures: {
				"default": "textures/entity/slime/magmacube"
			},
			geometry: {
				"default": "geometry.lavaslime"
			},
			scripts: {
				pre_animation: [
					"variable.slime_squish_factor = (query.previous_squish_value + (query.current_squish_value - query.previous_squish_value) * query.frame_alpha);",
					"variable.bounce = 1 / ((variable.slime_squish_factor / (query.variant * 0.5 + 1)) + 1);",
					"variable.horizontal_scale_amount = variable.bounce * query.variant;",
					"variable.vertical_scale_amount = (1 / variable.bounce) * query.variant;"
				],
				scaleX: "variable.horizontal_scale_amount",
				scaleY: "variable.vertical_scale_amount",
				scaleZ: "variable.horizontal_scale_amount"
			},
			animations: {
				move: "animation.magma_cube.move"
			},
			animation_controllers: [
				{
					general: "controller.animation.magma_cube.general"
				}
			],
			render_controllers: [
				"controller.render.magma_cube"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 20
			}
		}
	}
},
	"minecraft:minecart": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:minecart",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				],
				should_update_bones_and_effects_offscreen: "1.0"
			},
			animations: {
				move: "animation.minecart.move.v1.0"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:minecart.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:minecart",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				],
				should_update_bones_and_effects_offscreen: "1.0"
			},
			animations: {
				move: "animation.minecart.move.v1.0"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:mooshroom": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:mooshroom",
			min_engine_version: "1.8.0",
			materials: {
				"default": "mooshroom"
			},
			textures: {
				"default": "textures/entity/cow/mooshroom",
				brown: "textures/entity/cow/brown_mooshroom"
			},
			geometry: {
				"default": "geometry.mooshroom.v1.8"
			},
			animations: {
				setup: "animation.mooshroom.setup",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.mooshroom.baby_transform"
			},
			animation_controllers: [
				{
					setup: "controller.animation.mooshroom.setup"
				},
				{
					move: "controller.animation.mooshroom.move"
				},
				{
					baby: "controller.animation.mooshroom.baby"
				}
			],
			render_controllers: [
				"controller.render.mooshroom"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 5
			}
		}
	}
},
	"minecraft:mooshroom.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:mooshroom",
			materials: {
				"default": "mooshroom"
			},
			textures: {
				"default": "textures/entity/cow/mooshroom",
				brown: "textures/entity/cow/brown_mooshroom"
			},
			geometry: {
				"default": "geometry.mooshroom"
			},
			animations: {
				setup: "animation.mooshroom.setup.v1.0",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.mooshroom.baby_transform"
			},
			animation_controllers: [
				{
					setup: "controller.animation.mooshroom.setup"
				},
				{
					move: "controller.animation.mooshroom.move"
				},
				{
					baby: "controller.animation.mooshroom.baby"
				}
			],
			render_controllers: [
				"controller.render.mooshroom"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 5
			}
		}
	}
},
	"minecraft:mule_v1": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:mule",
			materials: {
				"default": "horse"
			},
			textures: {
				mule: "textures/entity/horse/mule",
				markings_none: "textures/entity/horse/horse_markings_none",
				armor_none: "textures/entity/horse/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse"
			},
			animations: {
				setup: "animation.horse.setup",
				baby_transform: "animation.horse.baby_transform",
				walk: "animation.horse.walk",
				eat: "animation.horse.eat",
				stand: "animation.horse.stand",
				shake_tail: "animation.horse.shake_tail",
				mouth: "animation.horse.mouth",
				look_at_player: "animation.horse.look_at_player"
			},
			scripts: {
				scale: "0.92",
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;",
					"variable.leg_back_origin = query.bone_origin('leg1a');",
					"variable.leg_front_origin = query.bone_origin('leg3a');",
					"variable.head_rotation = query.bone_rotation('head');"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.walk_tail_angle = math.clamp(query.modified_move_speed * 50.0, 0.0, 90.0) * (1.0 - variable.stand_anim);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_walk_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_walk_factor * 45.8 * query.modified_move_speed;",
					"variable.leg_stand = math.cos((query.life_time * 20.0) * 34.38)  * variable.stand_anim;",
					"variable.baby_ratio = query.is_baby ? ((0.0625 - query.model_scale) * 16.0) : 0.0;"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					{
						walk: "variable.stand_anim < 0.5"
					},
					{
						stand: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						shake_tail: "variable.shake_tail"
					},
					"mouth",
					"look_at_player"
				]
			},
			render_controllers: [
				"controller.render.mule.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 31
			}
		}
	}
},
	"minecraft:mule_v2": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:mule",
			min_engine_version: "1.2.6",
			materials: {
				"default": "horse"
			},
			textures: {
				mule: "textures/entity/horse2/mule",
				markings_none: "textures/entity/horse2/horse_markings_none",
				armor_none: "textures/entity/horse2/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse.v2"
			},
			animations: {
				setup: "animation.horse.v2.setup",
				baby_transform: "animation.horse.v2.baby_transform",
				walk: "animation.horse.v2.walk",
				eat: "animation.horse.v2.eat",
				stand: "animation.horse.v2.stand",
				tail: "animation.horse.v2.tail"
			},
			scripts: {
				scale: "0.92",
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim  * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;",
					"variable.leg1a_aabb = query.bone_aabb('leg1a');",
					"variable.y_adjust = query.is_baby ? 0.0 : (variable.leg1a_aabb.max.y - variable.leg1a_aabb.min.y) * (1.0 - (query.model_scale * 16.0));"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"stand",
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.mule.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 31
			}
		}
	}
},
	"minecraft:mule_v3": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:mule",
			min_engine_version: "1.17.10",
			materials: {
				"default": "horse"
			},
			textures: {
				mule: "textures/entity/horse2/mule",
				markings_none: "textures/entity/horse2/horse_markings_none",
				armor_none: "textures/entity/horse2/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse.v3"
			},
			animations: {
				baby_transform: "animation.horse.v3.baby_transform",
				walk: "animation.horse.v3.walk",
				eat: "animation.horse.v3.eat",
				rear: "animation.horse.v3.rear",
				tail: "animation.horse.v3.tail",
				look_at_player: "animation.horse.v3.look_at_player"
			},
			scripts: {
				scale: "0.92",
				initialize: [
					"variable.eat_anim = 0.0;"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;"
				],
				animate: [
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"look_at_player",
					{
						rear: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.mule.v3"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 31
			}
		}
	}
},
	"minecraft:npc": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:npc",
			materials: {
				"default": "npc"
			},
			textures: {
				npc_1: "textures/entity/npc/npc_1",
				npc_2: "textures/entity/npc/npc_2",
				npc_3: "textures/entity/npc/npc_3",
				npc_4: "textures/entity/npc/npc_4",
				npc_5: "textures/entity/npc/npc_5",
				npc_6: "textures/entity/npc/npc_6",
				npc_7: "textures/entity/npc/npc_7",
				npc_8: "textures/entity/npc/npc_8",
				npc_9: "textures/entity/npc/npc_9",
				npc_10: "textures/entity/npc/npc_10",
				npc_scientist_1: "textures/entity/npc/npc_scientist_1",
				npc_scientist_2: "textures/entity/npc/npc_scientist_2",
				npc_scientist_3: "textures/entity/npc/npc_scientist_3",
				npc_scientist_4: "textures/entity/npc/npc_scientist_4",
				npc_scientist_5: "textures/entity/npc/npc_scientist_5",
				npc_scientist_6: "textures/entity/npc/npc_scientist_6",
				npc_scientist_7: "textures/entity/npc/npc_scientist_7",
				npc_scientist_8: "textures/entity/npc/npc_scientist_8",
				npc_scientist_9: "textures/entity/npc/npc_scientist_9",
				npc_scientist_10: "textures/entity/npc/npc_scientist_10",
				npc_apiary_1: "textures/entity/npc/npc_apiary_1",
				npc_apiary_2: "textures/entity/npc/npc_apiary_2",
				npc_apiary_3: "textures/entity/npc/npc_apiary_3",
				npc_apiary_4: "textures/entity/npc/npc_apiary_4",
				npc_apiary_5: "textures/entity/npc/npc_apiary_5",
				npc_teacher_1: "textures/entity/npc/npc_teacher_1",
				npc_teacher_2: "textures/entity/npc/npc_teacher_2",
				npc_teacher_3: "textures/entity/npc/npc_teacher_3",
				npc_teacher_4: "textures/entity/npc/npc_teacher_4",
				npc_teacher_5: "textures/entity/npc/npc_teacher_5",
				npc_construction_1: "textures/entity/npc/npc_construction_1",
				npc_construction_2: "textures/entity/npc/npc_construction_2",
				npc_construction_3: "textures/entity/npc/npc_construction_3",
				npc_construction_4: "textures/entity/npc/npc_construction_4",
				npc_construction_5: "textures/entity/npc/npc_construction_5"
			},
			geometry: {
				"default": "geometry.npc"
			},
			scripts: {
				animate: [
					"general",
					{
						move: "query.modified_move_speed"
					},
					"look_at_target",
					{
						baby_transform: "query.is_baby"
					}
				]
			},
			animations: {
				general: "animation.npc.general",
				look_at_target: "animation.common.look_at_target",
				move: "animation.npc.move",
				baby_transform: "animation.npc.baby_transform"
			},
			render_controllers: [
				"controller.render.npc"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 35
			}
		}
	}
},
	"minecraft:ocelot": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:ocelot",
			min_engine_version: "1.8.0",
			materials: {
				"default": "ocelot"
			},
			textures: {
				black: "textures/entity/cat/blackcat",
				red: "textures/entity/cat/red",
				siamese: "textures/entity/cat/siamese",
				wild: "textures/entity/cat/ocelot"
			},
			geometry: {
				"default": "geometry.ocelot.v1.8"
			},
			animations: {
				sneak: "animation.ocelot.sneak",
				walk: "animation.ocelot.walk",
				sprint: "animation.ocelot.sprint",
				sit: "animation.ocelot.sit",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.ocelot.baby_transform"
			},
			animation_controllers: [
				{
					move: "controller.animation.ocelot.move"
				},
				{
					baby: "controller.animation.ocelot.baby"
				},
				{
					look_at_target: "controller.animation.ocelot.look_at_target"
				}
			],
			render_controllers: [
				"controller.render.ocelot"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 16
			}
		}
	}
},
	"minecraft:ocelot.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:ocelot",
			materials: {
				"default": "ocelot"
			},
			textures: {
				black: "textures/entity/cat/blackcat",
				red: "textures/entity/cat/red",
				siamese: "textures/entity/cat/siamese",
				wild: "textures/entity/cat/ocelot"
			},
			geometry: {
				"default": "geometry.ocelot"
			},
			animations: {
				baby_transform: "animation.ocelot_v1.0.baby_transform",
				look_at_target: "animation.common.look_at_target",
				setup: "animation.ocelot_v1.0.setup",
				sit: "animation.ocelot_v1.0.sit",
				sneak: "animation.ocelot_v1.0.sneak",
				sprint: "animation.ocelot_v1.0.sprint",
				walk: "animation.ocelot_v1.0.walk"
			},
			animation_controllers: [
				{
					setup: "controller.animation.ocelot_v1.0.setup"
				},
				{
					move: "controller.animation.ocelot_v1.0.move"
				},
				{
					baby: "controller.animation.ocelot_v1.0.baby"
				},
				{
					look_at_target: "controller.animation.ocelot_v1.0.look_at_target"
				}
			],
			render_controllers: [
				"controller.render.ocelot"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 16
			}
		}
	}
},
	"minecraft:panda": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:panda",
			materials: {
				"default": "panda"
			},
			textures: {
				"default": "textures/entity/panda/panda",
				lazy: "textures/entity/panda/panda_lazy",
				worried: "textures/entity/panda/panda_worried",
				playful: "textures/entity/panda/panda_playful",
				brown: "textures/entity/panda/panda_brown",
				weak: "textures/entity/panda/panda_sneezy",
				aggressive: "textures/entity/panda/panda_aggressive"
			},
			geometry: {
				"default": "geometry.panda"
			},
			animations: {
				unhappy: "animation.panda.unhappy",
				sneezing: "animation.panda.sneezing",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.panda.baby_transform",
				sitting: "animation.panda.sitting",
				rolling: "animation.panda.rolling",
				lying: "animation.panda.lying"
			},
			animation_controllers: [
				{
					move: "controller.animation.panda.move"
				},
				{
					unhappy: "controller.animation.panda.unhappy"
				},
				{
					sneezing: "controller.animation.panda.sneezing"
				},
				{
					baby: "controller.animation.panda.baby"
				}
			],
			render_controllers: [
				"controller.render.panda"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 54
			}
		}
	}
},
	"minecraft:parrot": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:parrot",
			materials: {
				"default": "parrot"
			},
			textures: {
				blue: "textures/entity/parrot/parrot_blue",
				green: "textures/entity/parrot/parrot_green",
				red_blue: "textures/entity/parrot/parrot_red_blue",
				yellow_blue: "textures/entity/parrot/parrot_yellow_blue",
				grey: "textures/entity/parrot/parrot_grey"
			},
			geometry: {
				"default": "geometry.parrot"
			},
			scripts: {
				pre_animation: [
					"variable.state = query.is_dancing ? 3 : (query.is_sitting ? 2 : (!query.is_on_ground && !query.is_jumping && !query.is_riding ? 0 : 1));",
					"variable.dance.x = Math.cos(query.life_time * 57.3 * 20.0);",
					"variable.dance.y = -Math.sin(query.life_time * 57.3 * 20.0);",
					"variable.wing_flap = ((math.sin(query.wing_flap_position * 57.3) + 1) * query.wing_flap_speed);"
				]
			},
			animations: {
				moving: "animation.parrot.moving",
				base: "animation.parrot.base",
				dance: "animation.parrot.dance",
				sitting: "animation.parrot.sitting",
				flying: "animation.parrot.flying",
				standing: "animation.parrot.standing",
				look_at_target: "animation.common.look_at_target"
			},
			animation_controllers: [
				{
					setup: "controller.animation.parrot.setup"
				},
				{
					move: "controller.animation.parrot.move"
				}
			],
			render_controllers: [
				"controller.render.parrot"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 43
			}
		}
	}
},
	"minecraft:phantom": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:phantom",
			materials: {
				"default": "phantom",
				invisible: "phantom_invisible"
			},
			textures: {
				"default": "textures/entity/phantom"
			},
			geometry: {
				"default": "geometry.phantom"
			},
			scripts: {
				initialize: [
					"variable.runtimeid = 0;",
					"variable.tailrotx = -5.0;",
					"variable.wingrotz = 0.0;"
				],
				animate: [
					"phantom_base_pose_controller",
					"move"
				]
			},
			animations: {
				phantom_base_pose: "animation.phantom.base_pose",
				phantom_base_pose_controller: "controller.animation.phantom.base_pose",
				move: "animation.phantom.move"
			},
			particle_effects: {
				wing_dust: "minecraft:phantom_trail_particle"
			},
			sound_effects: {
				flap: "mob.phantom.flap"
			},
			render_controllers: [
				"controller.render.phantom"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 51
			}
		}
	}
},
	"minecraft:pig": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:pig",
			min_engine_version: "1.8.0",
			materials: {
				"default": "pig"
			},
			textures: {
				"default": "textures/entity/pig/pig",
				saddled: "textures/entity/pig/pig_saddle"
			},
			geometry: {
				"default": "geometry.pig.v1.8"
			},
			animations: {
				setup: "animation.pig.setup",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.pig.baby_transform"
			},
			scripts: {
				animate: [
					"setup",
					{
						walk: "query.modified_move_speed"
					},
					"look_at_target",
					{
						baby_transform: "query.is_baby"
					}
				]
			},
			render_controllers: [
				"controller.render.pig"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 2
			}
		}
	}
},
	"minecraft:pig.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:pig",
			materials: {
				"default": "pig"
			},
			textures: {
				"default": "textures/entity/pig/pig",
				saddled: "textures/entity/pig/pig_saddle"
			},
			geometry: {
				"default": "geometry.pig"
			},
			animations: {
				setup: "animation.pig.setup.v1.0",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.pig.baby_transform"
			},
			scripts: {
				animate: [
					"setup",
					{
						walk: "query.modified_move_speed"
					},
					"look_at_target",
					{
						baby_transform: "query.is_baby"
					}
				]
			},
			render_controllers: [
				"controller.render.pig"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 2
			}
		}
	}
},
	"minecraft:piglin": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:piglin",
			materials: {
				"default": "piglin"
			},
			textures: {
				"default": "textures/entity/piglin/piglin"
			},
			geometry: {
				"default": "geometry.piglin"
			},
			spawn_egg: {
				base_color: "#995f40",
				overlay_color: "#f9f3a4"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;",
					"variable.attack = Math.sin((1.0 - (1.0 - variable.attack_time) * (1.0 - variable.attack_time)) * 180.0) * 57.3;",
					"variable.attack2 = Math.sin(variable.attack_time * 180.0) * 57.3;",
					"variable.z_bob = Math.cos(query.life_time * 103.13244) * 2.865 + 2.865;",
					"variable.x_bob = Math.sin(query.life_time * 76.776372) * 2.865;"
				],
				animate: [
					{
						admire: "query.is_admiring"
					},
					{
						humanoid_big_head: "query.is_baby"
					},
					{
						celebrate_hunt: "query.is_celebrating"
					},
					{
						celebrate_hunt_special: "query.is_celebrating_special"
					},
					"move",
					"bob",
					"look_at_target_controller",
					"piglin_attack_controller",
					"riding_controller"
				]
			},
			animations: {
				move: "animation.piglin.move",
				bob: "animation.humanoid.bob",
				humanoid_big_head: "animation.humanoid.big_head",
				admire: "animation.piglin.admire",
				celebrate_hunt: "animation.piglin.celebrate_hunt",
				celebrate_hunt_special: "animation.piglin.celebrate_hunt_special",
				look_at_target_controller: "controller.animation.humanoid.look_at_target",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				piglin_attack_controller: "controller.animation.piglin.attack",
				crossbow_hold: "animation.piglin.crossbow.hold",
				crossbow_charge: "animation.piglin.crossbow.charge",
				melee_attack: "animation.piglin.sword.attack",
				hand_attack: "animation.piglin.hand.attack",
				riding_controller: "controller.animation.humanoid.riding",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs"
			},
			render_controllers: [
				"controller.render.piglin"
			],
			enable_attachables: true
		}
	}
},
	"minecraft:piglin_brute": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:piglin_brute",
			materials: {
				"default": "piglin_brute"
			},
			textures: {
				"default": "textures/entity/piglin/piglin_brute"
			},
			geometry: {
				"default": "geometry.piglin"
			},
			spawn_egg: {
				base_color: "#592A10",
				overlay_color: "#F9F3A4"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;",
					"variable.attack = Math.sin((1.0 - (1.0 - variable.attack_time) * (1.0 - variable.attack_time)) * 180.0) * 57.3;",
					"variable.attack2 = Math.sin(variable.attack_time * 180.0) * 57.3;",
					"variable.z_bob = Math.cos(query.life_time * 103.13244) * 2.865 + 2.865;",
					"variable.x_bob = Math.sin(query.life_time * 76.776372) * 2.865;"
				],
				animate: [
					{
						humanoid_big_head: "query.is_baby"
					},
					"move",
					"bob",
					"look_at_target_controller",
					"piglin_attack_controller",
					"riding_controller"
				]
			},
			animations: {
				move: "animation.piglin.move",
				bob: "animation.humanoid.bob",
				humanoid_big_head: "animation.humanoid.big_head",
				look_at_target_controller: "controller.animation.humanoid.look_at_target",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				piglin_attack_controller: "controller.animation.piglin.attack",
				crossbow_hold: "animation.piglin.crossbow.hold",
				crossbow_charge: "animation.piglin.crossbow.charge",
				melee_attack: "animation.piglin.sword.attack",
				hand_attack: "animation.piglin.hand.attack",
				riding_controller: "controller.animation.humanoid.riding",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs"
			},
			render_controllers: [
				"controller.render.piglin_brute"
			],
			enable_attachables: true
		}
	}
},
	"minecraft:pillager": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:pillager",
			materials: {
				"default": "pillager"
			},
			textures: {
				"default": "textures/entity/pillager"
			},
			geometry: {
				"default": "geometry.pillager"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 56
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				],
				animate: [
					"pillager_root_controller"
				]
			},
			animations: {
				humanoid_base_pose: "animation.humanoid.base_pose",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				"attack.rotations": "animation.humanoid.attack.rotations",
				bob: "animation.humanoid.bob",
				crossbow_hold: "animation.pillager.crossbow.hold",
				crossbow_charge: "animation.pillager.crossbow.charge",
				celebrating: "animation.humanoid.celebrating",
				controller_humanoid_base_pose: "controller.animation.humanoid.base_pose",
				controller_look_at_target: "controller.animation.humanoid.look_at_target",
				controller_move: "controller.animation.humanoid.move",
				controller_riding: "controller.animation.humanoid.riding",
				controller_attack: "controller.animation.humanoid.attack",
				controller_bob: "controller.animation.humanoid.bob",
				controller_pillager_attack: "controller.animation.pillager.attack",
				pillager_root_controller: "controller.animation.pillager.root"
			},
			render_controllers: [
				"controller.render.pillager"
			],
			enable_attachables: true,
			hide_armor: true
		}
	}
},
	"minecraft:player": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:player",
			materials: {
				"default": "entity_alphatest",
				cape: "entity_alphatest",
				animated: "player_animated"
			},
			textures: {
				"default": "textures/entity/steve",
				cape: "textures/entity/cape_invisible"
			},
			geometry: {
				"default": "geometry.humanoid.custom",
				cape: "geometry.cape"
			},
			scripts: {
				scale: "0.9375",
				initialize: [
					"variable.is_holding_right = 0.0;",
					"variable.is_blinking = 0.0;",
					"variable.last_blink_time = 0.0;",
					"variable.hand_bob = 0.0;"
				],
				pre_animation: [
					"variable.helmet_layer_visible = 1.0;",
					"variable.leg_layer_visible = 1.0;",
					"variable.boot_layer_visible = 1.0;",
					"variable.chest_layer_visible = 1.0;",
					"variable.attack_body_rot_y = Math.sin(360*Math.sqrt(variable.attack_time)) * 5.0;",
					"variable.tcos0 = (math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;",
					"variable.first_person_rotation_factor = math.sin((1 - variable.attack_time) * 180.0);",
					"variable.hand_bob = query.life_time < 0.01 ? 0.0 : variable.hand_bob + ((query.is_on_ground && query.is_alive ? math.clamp(math.sqrt(math.pow(query.position_delta(0), 2.0) + math.pow(query.position_delta(2), 2.0)), 0.0, 0.1) : 0.0) - variable.hand_bob) * 0.02;",
					"variable.map_angle = math.clamp(1 - variable.player_x_rotation / 45.1, 0.0, 1.0);",
					"variable.item_use_normalized = query.main_hand_item_use_duration / query.main_hand_item_max_duration;"
				],
				animate: [
					"root"
				]
			},
			animations: {
				root: "controller.animation.player.root",
				base_controller: "controller.animation.player.base",
				hudplayer: "controller.animation.player.hudplayer",
				humanoid_base_pose: "animation.humanoid.base_pose",
				look_at_target: "controller.animation.humanoid.look_at_target",
				look_at_target_ui: "animation.player.look_at_target.ui",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				look_at_target_inverted: "animation.player.look_at_target.inverted",
				cape: "animation.player.cape",
				"move.arms": "animation.player.move.arms",
				"move.legs": "animation.player.move.legs",
				swimming: "animation.player.swim",
				"swimming.legs": "animation.player.swim.legs",
				"riding.arms": "animation.player.riding.arms",
				"riding.legs": "animation.player.riding.legs",
				holding: "animation.player.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				holding_spyglass: "animation.humanoid.holding_spyglass",
				charging: "animation.humanoid.charging",
				"attack.positions": "animation.player.attack.positions",
				"attack.rotations": "animation.player.attack.rotations",
				sneaking: "animation.player.sneaking",
				bob: "animation.player.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				use_item_progress: "animation.humanoid.use_item_progress",
				skeleton_attack: "animation.skeleton.attack",
				sleeping: "animation.player.sleeping",
				first_person_base_pose: "animation.player.first_person.base_pose",
				first_person_empty_hand: "animation.player.first_person.empty_hand",
				first_person_swap_item: "animation.player.first_person.swap_item",
				first_person_shield_block: "animation.player.first_person.shield_block",
				first_person_attack_controller: "controller.animation.player.first_person_attack",
				first_person_attack_rotation: "animation.player.first_person.attack_rotation",
				first_person_vr_attack_rotation: "animation.player.first_person.vr_attack_rotation",
				first_person_walk: "animation.player.first_person.walk",
				first_person_map_controller: "controller.animation.player.first_person_map",
				first_person_map_hold: "animation.player.first_person.map_hold",
				first_person_map_hold_attack: "animation.player.first_person.map_hold_attack",
				first_person_map_hold_off_hand: "animation.player.first_person.map_hold_off_hand",
				first_person_map_hold_main_hand: "animation.player.first_person.map_hold_main_hand",
				first_person_crossbow_equipped: "animation.player.first_person.crossbow_equipped",
				third_person_crossbow_equipped: "animation.player.crossbow_equipped",
				third_person_bow_equipped: "animation.player.bow_equipped",
				crossbow_hold: "animation.player.crossbow_hold",
				crossbow_controller: "controller.animation.player.crossbow",
				shield_block_main_hand: "animation.player.shield_block_main_hand",
				shield_block_off_hand: "animation.player.shield_block_off_hand",
				blink: "controller.animation.persona.blink",
				tooting_goat_horn: "animation.humanoid.tooting_goat_horn"
			},
			render_controllers: [
				{
					"controller.render.player.first_person": "variable.is_first_person"
				},
				{
					"controller.render.player.third_person": "!variable.is_first_person && !variable.map_face_icon"
				},
				{
					"controller.render.player.map": "variable.map_face_icon"
				}
			],
			enable_attachables: true
		}
	}
},
	"minecraft:polar_bear": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:polar_bear",
			materials: {
				"default": "polar_bear"
			},
			textures: {
				"default": "textures/entity/polarbear"
			},
			geometry: {
				"default": "geometry.polarbear"
			},
			animations: {
				walk: "animation.quadruped.walk",
				move: "animation.polarbear.move",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.polarbear.baby_transform"
			},
			scripts: {
				scale: "1.2"
			},
			animation_controllers: [
				{
					move: "controller.animation.polarbear.move"
				},
				{
					baby: "controller.animation.polarbear.baby"
				}
			],
			render_controllers: [
				"controller.render.polarbear"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 37
			}
		}
	}
},
	"minecraft:pufferfish": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:pufferfish",
			min_engine_version: "1.8.0",
			materials: {
				"default": "pufferfish"
			},
			textures: {
				"default": "textures/entity/fish/pufferfish"
			},
			geometry: {
				"default": "geometry.pufferfish.small.v1.8",
				mid: "geometry.pufferfish.mid.v1.8",
				large: "geometry.pufferfish.large.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.ZRot = !query.is_in_water ? Math.cos(query.time_stamp * 14.32) * 90 : 0.0;",
					"variable.AnimationAmountBlend = Math.lerp(variable.AnimationAmountPrev, variable.AnimationAmount, query.frame_alpha);"
				],
				animate: [
					"general"
				]
			},
			animations: {
				flop: "animation.pufferfish.flop",
				swim: "animation.pufferfish.swim",
				general: "controller.animation.fish.general"
			},
			render_controllers: [
				{
					"controller.render.pufferfish.small": "query.variant == 0"
				},
				{
					"controller.render.pufferfish.medium": "query.variant == 1"
				},
				{
					"controller.render.pufferfish.large": "query.variant == 2"
				}
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 46
			}
		}
	}
},
	"minecraft:pufferfish.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:pufferfish",
			materials: {
				"default": "pufferfish"
			},
			textures: {
				"default": "textures/entity/fish/pufferfish"
			},
			geometry: {
				"default": "geometry.pufferfish.small",
				mid: "geometry.pufferfish.mid",
				large: "geometry.pufferfish.large"
			},
			scripts: {
				pre_animation: [
					"variable.ZRot = !query.is_in_water ? Math.cos(query.time_stamp * 14.32) * 90 : 0.0;",
					"variable.AnimationAmountBlend = Math.lerp(variable.AnimationAmountPrev, variable.AnimationAmount, query.frame_alpha);"
				],
				animate: [
					"general"
				]
			},
			animations: {
				flop: "animation.pufferfish.flop",
				swim: "animation.pufferfish.swim",
				general: "controller.animation.fish.general"
			},
			render_controllers: [
				{
					"controller.render.pufferfish.small": "query.variant == 0"
				},
				{
					"controller.render.pufferfish.medium": "query.variant == 1"
				},
				{
					"controller.render.pufferfish.large": "query.variant == 2"
				}
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 46
			}
		}
	}
},
	"minecraft:rabbit": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:rabbit",
			min_engine_version: "1.8.0",
			materials: {
				"default": "rabbit"
			},
			textures: {
				brown: "textures/entity/rabbit/brown",
				white: "textures/entity/rabbit/white",
				black: "textures/entity/rabbit/blackrabbit",
				white_splotched: "textures/entity/rabbit/white_splotched",
				gold: "textures/entity/rabbit/gold",
				salt: "textures/entity/rabbit/salt",
				toast: "textures/entity/rabbit/toast"
			},
			geometry: {
				"default": "geometry.rabbit.v1.8"
			},
			animations: {
				move: "animation.rabbit.move",
				baby_transform: "animation.rabbit.baby_transform",
				look_at_target: "animation.common.look_at_target"
			},
			animation_controllers: [
				{
					general: "controller.animation.rabbit.general"
				},
				{
					baby: "controller.animation.rabbit.baby"
				}
			],
			render_controllers: [
				"controller.render.rabbit"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 24
			}
		}
	}
},
	"minecraft:rabbit.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:rabbit",
			materials: {
				"default": "rabbit"
			},
			textures: {
				brown: "textures/entity/rabbit/brown",
				white: "textures/entity/rabbit/white",
				black: "textures/entity/rabbit/blackrabbit",
				white_splotched: "textures/entity/rabbit/white_splotched",
				gold: "textures/entity/rabbit/gold",
				salt: "textures/entity/rabbit/salt",
				toast: "textures/entity/rabbit/toast"
			},
			geometry: {
				"default": "geometry.rabbit"
			},
			animations: {
				move: "animation.rabbit.move",
				baby_transform: "animation.rabbit.baby_transform",
				look_at_target: "animation.common.look_at_target"
			},
			animation_controllers: [
				{
					general: "controller.animation.rabbit.general"
				},
				{
					baby: "controller.animation.rabbit.baby"
				}
			],
			render_controllers: [
				"controller.render.rabbit"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 24
			}
		}
	}
},
	"minecraft:ravager": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:ravager",
			textures: {
				"default": "textures/entity/illager/ravager"
			},
			materials: {
				"default": "ravager"
			},
			geometry: {
				"default": "geometry.ravager"
			},
			render_controllers: [
				"controller.render.ravager"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 57
			},
			animations: {
				walk: "animation.ravager.walk",
				look_at_target: "animation.common.look_at_target",
				idle_mouth: "animation.ravager.idle_mouth",
				stunned: "animation.ravager.stunned",
				roaring: "animation.ravager.roaring",
				move: "controller.animation.ravager.move",
				head: "controller.animation.ravager.head_movement",
				biting: "animation.ravager.biting"
			},
			scripts: {
				pre_animation: [
					"variable.roar_length = 1.0;",
					"variable.bite_anim_duration = 0.75f;",
					"variable.bite_neck_length = 10;"
				],
				animate: [
					"move",
					"head"
				]
			},
			particle_effects: {
				stun_particles: "minecraft:stunned_emitter"
			}
		}
	}
},
	"minecraft:salmon": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:salmon",
			materials: {
				"default": "salmon"
			},
			textures: {
				"default": "textures/entity/fish/salmon"
			},
			geometry: {
				"default": "geometry.salmon"
			},
			scripts: {
				pre_animation: [
					"variable.ZRot = !query.is_in_water ? Math.cos((query.time_stamp + query.frame_alpha) * 14.32) * 90 : 0.0;",
					"variable.AnimationAmountBlend = Math.lerp(variable.AnimationAmountPrev, variable.AnimationAmount, query.frame_alpha);"
				]
			},
			animations: {
				flop: "animation.salmon.flop",
				swim: "animation.salmon.swim"
			},
			animation_controllers: [
				{
					general: "controller.animation.fish.general"
				}
			],
			render_controllers: [
				"controller.render.salmon"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 47
			}
		}
	}
},
	"minecraft:sheep": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:sheep",
			min_engine_version: "1.8.0",
			materials: {
				"default": "sheep"
			},
			textures: {
				"default": "textures/entity/sheep/sheep"
			},
			geometry: {
				"default": "geometry.sheep.v1.8",
				sheared: "geometry.sheep.sheared.v1.8"
			},
			animations: {
				setup: "animation.sheep.setup",
				grazing: "animation.sheep.grazing",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.sheep.baby_transform",
				move: "controller.animation.sheep.move"
			},
			scripts: {
				animate: [
					"setup",
					"look_at_target",
					"move",
					{
						baby_transform: "query.is_baby"
					}
				]
			},
			render_controllers: [
				"controller.render.sheep"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 3
			}
		}
	}
},
	"minecraft:sheep.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:sheep",
			materials: {
				"default": "sheep"
			},
			textures: {
				"default": "textures/entity/sheep/sheep"
			},
			geometry: {
				"default": "geometry.sheep",
				sheared: "geometry.sheep.sheared"
			},
			particle_emitters: {
				flame: "animation.blaze.flame"
			},
			animations: {
				setup: "animation.sheep.setup",
				grazing: "animation.sheep.grazing",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.sheep.baby_transform",
				move: "controller.animation.sheep.move"
			},
			scripts: {
				animate: [
					"setup",
					"look_at_target",
					"move",
					{
						baby_transform: "query.is_baby"
					}
				]
			},
			render_controllers: [
				"controller.render.sheep"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 3
			}
		}
	}
},
	"minecraft:shulker": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:shulker",
			min_engine_version: "1.8.0",
			materials: {
				"default": "shulker"
			},
			textures: {
				undyed: "textures/entity/shulker/shulker_undyed",
				white: "textures/entity/shulker/shulker_white",
				orange: "textures/entity/shulker/shulker_orange",
				magenta: "textures/entity/shulker/shulker_magenta",
				light_blue: "textures/entity/shulker/shulker_light_blue",
				yellow: "textures/entity/shulker/shulker_yellow",
				lime: "textures/entity/shulker/shulker_lime",
				pink: "textures/entity/shulker/shulker_pink",
				gray: "textures/entity/shulker/shulker_gray",
				silver: "textures/entity/shulker/shulker_silver",
				cyan: "textures/entity/shulker/shulker_cyan",
				purple: "textures/entity/shulker/shulker_purple",
				blue: "textures/entity/shulker/shulker_blue",
				brown: "textures/entity/shulker/shulker_brown",
				green: "textures/entity/shulker/shulker_green",
				red: "textures/entity/shulker/shulker_red",
				black: "textures/entity/shulker/shulker_black"
			},
			geometry: {
				"default": "geometry.shulker.v1.8"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 34
			},
			scripts: {
				pre_animation: [
					"variable.Shulker.LidPositionFactor = 180 * (0.5 + variable.Shulker.PeekAmount);",
					"variable.Shulker.LidRotationFactor = -1 + Math.sin(180 * (0.5 + variable.Shulker.PeekAmount));",
					"variable.Shulker.UpFacing = variable.Shulker.FacingDirection == 1;",
					"variable.Shulker.NorthFacing = variable.Shulker.FacingDirection == 2;",
					"variable.Shulker.SouthFacing = variable.Shulker.FacingDirection == 3;",
					"variable.Shulker.WestFacing = variable.Shulker.FacingDirection == 4;",
					"variable.Shulker.EastFacing = variable.Shulker.FacingDirection == 5;",
					"variable.Shulker.XPreRotation = variable.Shulker.UpFacing * 180 + variable.Shulker.NorthFacing * 90 - variable.Shulker.SouthFacing * 90;",
					"variable.Shulker.ZPreRotation = variable.Shulker.NorthFacing * 180 + variable.Shulker.WestFacing * 90 - variable.Shulker.EastFacing * 90;",
					"variable.Shulker.XOffset = -variable.Shulker.WestFacing * 7.99 + variable.Shulker.EastFacing * 7.99;",
					"variable.Shulker.YOffset = variable.Shulker.UpFacing * 16 + variable.Shulker.NorthFacing * 7.99 + variable.Shulker.SouthFacing * 7.99 + variable.Shulker.WestFacing * 7.99 + variable.Shulker.EastFacing * 7.99;",
					"variable.Shulker.ZOffset = variable.Shulker.NorthFacing * 7.99 - variable.Shulker.SouthFacing * 7.99;"
				]
			},
			animations: {
				facing: "animation.shulker.facing",
				move: "animation.shulker.move",
				look_at_target: "animation.common.look_at_target"
			},
			animation_controllers: [
				{
					facing: "controller.animation.shulker.facing"
				},
				{
					move: "controller.animation.shulker.move"
				}
			],
			render_controllers: [
				"controller.render.shulker"
			]
		}
	}
},
	"minecraft:shulker.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:shulker",
			materials: {
				"default": "shulker"
			},
			textures: {
				undyed: "textures/entity/shulker/shulker_undyed",
				white: "textures/entity/shulker/shulker_white",
				orange: "textures/entity/shulker/shulker_orange",
				magenta: "textures/entity/shulker/shulker_magenta",
				light_blue: "textures/entity/shulker/shulker_light_blue",
				yellow: "textures/entity/shulker/shulker_yellow",
				lime: "textures/entity/shulker/shulker_lime",
				pink: "textures/entity/shulker/shulker_pink",
				gray: "textures/entity/shulker/shulker_gray",
				silver: "textures/entity/shulker/shulker_silver",
				cyan: "textures/entity/shulker/shulker_cyan",
				purple: "textures/entity/shulker/shulker_purple",
				blue: "textures/entity/shulker/shulker_blue",
				brown: "textures/entity/shulker/shulker_brown",
				green: "textures/entity/shulker/shulker_green",
				red: "textures/entity/shulker/shulker_red",
				black: "textures/entity/shulker/shulker_black"
			},
			geometry: {
				"default": "geometry.shulker"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 34
			},
			scripts: {
				pre_animation: [
					"variable.Shulker.LidPositionFactor = 180 * (0.5 + variable.Shulker.PeekAmount);",
					"variable.Shulker.LidRotationFactor = -1 + Math.sin(180 * (0.5 + variable.Shulker.PeekAmount));",
					"variable.Shulker.UpFacing = variable.Shulker.FacingDirection == 1;",
					"variable.Shulker.NorthFacing = variable.Shulker.FacingDirection == 2;",
					"variable.Shulker.SouthFacing = variable.Shulker.FacingDirection == 3;",
					"variable.Shulker.WestFacing = variable.Shulker.FacingDirection == 4;",
					"variable.Shulker.EastFacing = variable.Shulker.FacingDirection == 5;",
					"variable.Shulker.XPreRotation = variable.Shulker.UpFacing * 180 + variable.Shulker.NorthFacing * 90 - variable.Shulker.SouthFacing * 90;",
					"variable.Shulker.ZPreRotation = variable.Shulker.NorthFacing * 180 + variable.Shulker.WestFacing * 90 - variable.Shulker.EastFacing * 90;",
					"variable.Shulker.XOffset = -variable.Shulker.WestFacing * 7.99 + variable.Shulker.EastFacing * 7.99;",
					"variable.Shulker.YOffset = variable.Shulker.UpFacing * 16 + variable.Shulker.NorthFacing * 7.99 + variable.Shulker.SouthFacing * 7.99 + variable.Shulker.WestFacing * 7.99 + variable.Shulker.EastFacing * 7.99;",
					"variable.Shulker.ZOffset = variable.Shulker.NorthFacing * 7.99 - variable.Shulker.SouthFacing * 7.99;"
				]
			},
			animations: {
				facing: "animation.shulker.facing.v1.0",
				move: "animation.shulker.move.v1.0",
				look_at_target: "animation.common.look_at_target"
			},
			animation_controllers: [
				{
					facing: "controller.animation.shulker.facing"
				},
				{
					move: "controller.animation.shulker.move"
				}
			],
			render_controllers: [
				"controller.render.shulker"
			]
		}
	}
},
	"minecraft:shulker_bullet": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:shulker_bullet",
			materials: {
				"default": "shulker_bullet"
			},
			textures: {
				"default": "textures/entity/shulker/spark"
			},
			geometry: {
				"default": "geometry.shulker_bullet"
			},
			animations: {
				move: "animation.shulker_bullet.move"
			},
			scripts: {
				animate: [
					"move"
				]
			},
			render_controllers: [
				"controller.render.shulker_bullet"
			]
		}
	}
},
	"minecraft:silverfish": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:silverfish",
			materials: {
				"default": "silverfish",
				body_layer: "silverfish_layers"
			},
			textures: {
				"default": "textures/entity/silverfish"
			},
			geometry: {
				"default": "geometry.silverfish"
			},
			animations: {
				move: "animation.silverfish.move"
			},
			animation_controllers: [
				{
					move: "controller.animation.silverfish.move"
				}
			],
			render_controllers: [
				"controller.render.silverfish"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 8
			}
		}
	}
},
	"minecraft:skeleton": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:skeleton",
			min_engine_version: "1.8.0",
			materials: {
				"default": "skeleton"
			},
			textures: {
				"default": "textures/entity/skeleton/skeleton"
			},
			geometry: {
				"default": "geometry.skeleton.v1.8"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 9
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				"attack.rotations": "animation.humanoid.attack.rotations",
				sneaking: "animation.humanoid.sneaking",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				swimming: "animation.zombie.swimming",
				use_item_progress: "animation.humanoid.use_item_progress",
				skeleton_attack: "animation.skeleton.attack"
			},
			animation_controllers: [
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.zombie.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					skeleton_attack: "controller.animation.skeleton.attack"
				}
			],
			render_controllers: [
				"controller.render.skeleton"
			],
			enable_attachables: true
		}
	}
},
	"minecraft:skeleton.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:skeleton",
			materials: {
				"default": "skeleton"
			},
			textures: {
				"default": "textures/entity/skeleton/skeleton"
			},
			geometry: {
				"default": "geometry.skeleton"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				"attack.rotations": "animation.humanoid.attack.rotations.v1.0",
				sneaking: "animation.humanoid.sneaking.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				bow_and_arrow: "animation.humanoid.bow_and_arrow.v1.0",
				swimming: "animation.humanoid.swimming.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				skeleton_attack: "animation.skeleton.attack.v1.0"
			},
			animation_controllers: [
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					skeleton_attack: "controller.animation.skeleton.attack"
				}
			],
			render_controllers: [
				"controller.render.skeleton"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 9
			}
		}
	}
},
	"minecraft:skeleton_horse_v1": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:skeleton_horse",
			materials: {
				"default": "horse"
			},
			textures: {
				skeleton: "textures/entity/horse/horse_skeleton",
				markings_none: "textures/entity/horse/horse_markings_none",
				armor_none: "textures/entity/horse/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse"
			},
			animations: {
				setup: "animation.horse.setup",
				baby_transform: "animation.horse.baby_transform",
				walk: "animation.horse.walk",
				eat: "animation.horse.eat",
				stand: "animation.horse.stand",
				shake_tail: "animation.horse.shake_tail",
				mouth: "animation.horse.mouth",
				look_at_player: "animation.horse.look_at_player"
			},
			scripts: {
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;",
					"variable.leg_back_origin = query.bone_origin('leg1a');",
					"variable.leg_front_origin = query.bone_origin('leg3a');",
					"variable.head_rotation = query.bone_rotation('head');"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.walk_tail_angle = math.clamp(query.modified_move_speed * 50.0, 0.0, 90.0) * (1.0 - variable.stand_anim);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_walk_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_walk_factor * 45.8 * query.modified_move_speed;",
					"variable.leg_stand = math.cos((query.life_time * 20.0) * 34.38)  * variable.stand_anim;",
					"variable.baby_ratio = query.is_baby ? ((0.0625 - query.model_scale) * 16.0) : 0.0;"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					{
						walk: "variable.stand_anim < 0.5"
					},
					{
						stand: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						shake_tail: "variable.shake_tail"
					},
					"mouth",
					"look_at_player"
				]
			},
			render_controllers: [
				"controller.render.skeleton_horse.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 32
			}
		}
	}
},
	"minecraft:skeleton_horse_v2": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:skeleton_horse",
			min_engine_version: "1.2.6",
			materials: {
				"default": "horse"
			},
			textures: {
				skeleton: "textures/entity/horse2/horse_skeleton",
				markings_none: "textures/entity/horse2/horse_markings_none",
				armor_none: "textures/entity/horse2/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse.v2"
			},
			animations: {
				setup: "animation.horse.v2.setup",
				baby_transform: "animation.horse.v2.baby_transform",
				walk: "animation.horse.v2.walk",
				eat: "animation.horse.v2.eat",
				stand: "animation.horse.v2.stand",
				tail: "animation.horse.v2.tail"
			},
			scripts: {
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim  * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;",
					"variable.leg1a_aabb = query.bone_aabb('leg1a');",
					"variable.y_adjust = query.is_baby ? 0.0 : (variable.leg1a_aabb.max.y - variable.leg1a_aabb.min.y) * (1.0 - (query.model_scale * 16.0));"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"stand",
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.skeleton_horse.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 32
			}
		}
	}
},
	"minecraft:skeleton_horse_v3": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:skeleton_horse",
			min_engine_version: "1.17.10",
			materials: {
				"default": "horse"
			},
			textures: {
				skeleton: "textures/entity/horse2/horse_skeleton",
				markings_none: "textures/entity/horse2/horse_markings_none",
				armor_none: "textures/entity/horse2/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse.v3"
			},
			animations: {
				baby_transform: "animation.horse.v3.baby_transform",
				walk: "animation.horse.v3.walk",
				eat: "animation.horse.v3.eat",
				rear: "animation.horse.v3.rear",
				tail: "animation.horse.v3.tail",
				look_at_player: "animation.horse.v3.look_at_player"
			},
			scripts: {
				initialize: [
					"variable.eat_anim = 0.0;"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;"
				],
				animate: [
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"look_at_player",
					{
						rear: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.skeleton_horse.v3"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 32
			}
		}
	}
},
	"minecraft:skull": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:skull",
			textures: {
				"default": "textures/entity/steve",
				steve: "textures/entity/steve",
				skeleton: "textures/entity/skulls/skeleton",
				wither: "textures/entity/skulls/wither_skeleton",
				zombie: "textures/entity/skulls/zombie",
				creeper: "textures/entity/skulls/creeper",
				dragon: "textures/entity/dragon/dragon"
			},
			geometry: {
				"default": "geometry.player_head",
				steve: "geometry.player_head",
				skeleton: "geometry.mob_head",
				wither: "geometry.mob_head",
				zombie: "geometry.mob_head",
				creeper: "geometry.mob_head",
				dragon: "geometry.dragon_head"
			}
		}
	}
},
	"minecraft:slime": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:slime",
			materials: {
				"default": "slime",
				outer: "slime_outer"
			},
			textures: {
				"default": "textures/entity/slime/slime"
			},
			geometry: {
				"default": "geometry.slime",
				armor: "geometry.slime.armor"
			},
			scripts: {
				pre_animation: [
					"variable.squish_factor = (query.previous_squish_value + (query.current_squish_value - query.previous_squish_value) * query.frame_alpha);",
					"variable.bounce = 1 / ((variable.squish_factor / (query.variant * 0.5 + 1)) + 1);",
					"variable.horizontal_scale_amount = variable.bounce * query.variant;",
					"variable.vertical_scale_amount = (1 / variable.bounce) * query.variant;"
				],
				scaleX: "variable.horizontal_scale_amount",
				scaleY: "variable.vertical_scale_amount",
				scaleZ: "variable.horizontal_scale_amount"
			},
			render_controllers: [
				"controller.render.slime",
				"controller.render.slime_armor"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 10
			}
		}
	}
},
	"minecraft:small_fireball": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:small_fireball",
			materials: {
				"default": "fireball"
			},
			textures: {
				"default": "textures/items/fireball"
			},
			geometry: {
				"default": "geometry.fireball"
			},
			animations: {
				face_player: "animation.actor.billboard"
			},
			scripts: {
				scale: "0.5",
				animate: [
					"face_player"
				]
			},
			render_controllers: [
				"controller.render.fireball"
			]
		}
	}
},
	"minecraft:snowball": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:snowball",
			materials: {
				"default": "snowball"
			},
			textures: {
				"default": "textures/items/snowball"
			},
			geometry: {
				"default": "geometry.item_sprite"
			},
			render_controllers: [
				"controller.render.item_sprite"
			],
			animations: {
				flying: "animation.actor.billboard"
			},
			scripts: {
				animate: [
					"flying"
				]
			}
		}
	}
},
	"minecraft:snow_golem": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:snow_golem",
			min_engine_version: "1.8.0",
			materials: {
				"default": "snow_golem",
				head: "snow_golem_pumpkin"
			},
			textures: {
				"default": "textures/entity/snow_golem"
			},
			geometry: {
				"default": "geometry.snowgolem.v1.8"
			},
			animations: {
				move: "animation.snowgolem.move.v1.8",
				look_at_target: "animation.common.look_at_target"
			},
			animation_controllers: [
				{
					move: "controller.animation.snowgolem.move.v1.8"
				}
			],
			render_controllers: [
				"controller.render.snowgolem"
			]
		}
	}
},
	"minecraft:snow_golem.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:snow_golem",
			materials: {
				"default": "snow_golem",
				head: "snow_golem_pumpkin"
			},
			textures: {
				"default": "textures/entity/snow_golem"
			},
			geometry: {
				"default": "geometry.snowgolem"
			},
			animations: {
				move: "animation.snowgolem.move",
				arms: "animation.snowgolem.arms",
				look_at_target: "animation.common.look_at_target"
			},
			animation_controllers: [
				{
					move: "controller.animation.snowgolem.move"
				}
			],
			render_controllers: [
				"controller.render.snowgolem"
			]
		}
	}
},
	"minecraft:spider": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:spider",
			min_engine_version: "1.8.0",
			materials: {
				"default": "spider",
				invisible: "spider_invisible"
			},
			textures: {
				"default": "textures/entity/spider/spider"
			},
			geometry: {
				"default": "geometry.spider.v1.8"
			},
			animations: {
				default_leg_pose: "animation.spider.default_leg_pose",
				look_at_target: "animation.spider.look_at_target",
				walk: "animation.spider.walk"
			},
			animation_controllers: [
				{
					move: "controller.animation.spider.move"
				}
			],
			render_controllers: [
				"controller.render.spider"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 11
			}
		}
	}
},
	"minecraft:spider.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:spider",
			materials: {
				"default": "spider",
				invisible: "spider_invisible"
			},
			textures: {
				"default": "textures/entity/spider/spider"
			},
			geometry: {
				"default": "geometry.spider"
			},
			animations: {
				default_leg_pose: "animation.spider.default_leg_pose",
				look_at_target: "animation.spider.look_at_target",
				walk: "animation.spider.walk"
			},
			animation_controllers: [
				{
					move: "controller.animation.spider.move"
				}
			],
			render_controllers: [
				"controller.render.spider"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 11
			}
		}
	}
},
	"minecraft:splash_potion": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:splash_potion",
			materials: {
				"default": "splash_potion_enchanted"
			},
			textures: {
				moveSlowdown: "textures/items/potion_bottle_splash_moveSlowdown",
				moveSpeed: "textures/items/potion_bottle_splash_moveSpeed",
				digSlowdown: "textures/items/potion_bottle_splash_digSlowdown",
				digSpeed: "textures/items/potion_bottle_splash_digSpeed",
				damageBoost: "textures/items/potion_bottle_splash_damageBoost",
				heal: "textures/items/potion_bottle_splash_heal",
				harm: "textures/items/potion_bottle_splash_harm",
				jump: "textures/items/potion_bottle_splash_jump",
				confusion: "textures/items/potion_bottle_splash_confusion",
				regeneration: "textures/items/potion_bottle_splash_regeneration",
				resistance: "textures/items/potion_bottle_splash_resistance",
				fireResistance: "textures/items/potion_bottle_splash_fireResistance",
				waterBreathing: "textures/items/potion_bottle_splash_waterBreathing",
				invisibility: "textures/items/potion_bottle_splash_invisibility",
				blindness: "textures/items/potion_bottle_splash_blindness",
				nightVision: "textures/items/potion_bottle_splash_nightVision",
				hunger: "textures/items/potion_bottle_splash_hunger",
				weakness: "textures/items/potion_bottle_splash_weakness",
				poison: "textures/items/potion_bottle_splash_poison",
				wither: "textures/items/potion_bottle_splash_wither",
				healthBoost: "textures/items/potion_bottle_splash_healthBoost",
				absorption: "textures/items/potion_bottle_splash_absorption",
				saturation: "textures/items/potion_bottle_splash_saturation",
				levitation: "textures/items/potion_bottle_splash_levitation",
				turtleMaster: "textures/items/potion_bottle_splash_turtleMaster",
				slowFall: "textures/items/potion_bottle_splash_slowFall",
				"default": "textures/items/potion_bottle_splash",
				enchanted: "textures/misc/enchanted_item_glint"
			},
			geometry: {
				"default": "geometry.item_sprite"
			},
			render_controllers: [
				"controller.render.splash_potion"
			],
			animations: {
				flying: "animation.actor.billboard"
			},
			scripts: {
				animate: [
					"flying"
				]
			}
		}
	}
},
	"minecraft:squid": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:squid",
			materials: {
				"default": "squid"
			},
			textures: {
				"default": "textures/entity/squid"
			},
			geometry: {
				"default": "geometry.squid"
			},
			animations: {
				move: "animation.squid.move",
				squid_rotate: "animation.squid.rotate"
			},
			scripts: {
				animate: [
					"move",
					"squid_rotate"
				]
			},
			render_controllers: [
				"controller.render.squid"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 15
			}
		}
	}
},
	"minecraft:stray": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:stray",
			min_engine_version: "1.8.0",
			materials: {
				"default": "stray",
				overlay: "stray_clothes"
			},
			textures: {
				"default": "textures/entity/skeleton/stray",
				overlay: "textures/entity/skeleton/stray_overlay"
			},
			geometry: {
				"default": "geometry.skeleton.stray.v1.8",
				overlay: "geometry.stray.armor.v1.8"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 27
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				"attack.rotations": "animation.humanoid.attack.rotations",
				sneaking: "animation.humanoid.sneaking",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				swimming: "animation.zombie.swimming",
				use_item_progress: "animation.humanoid.use_item_progress",
				skeleton_attack: "animation.skeleton.attack"
			},
			animation_controllers: [
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.zombie.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					skeleton_attack: "controller.animation.skeleton.attack"
				}
			],
			render_controllers: [
				"controller.render.stray_clothes",
				"controller.render.stray"
			],
			enable_attachables: true
		}
	}
},
	"minecraft:stray.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:stray",
			materials: {
				"default": "stray",
				overlay: "stray_clothes"
			},
			textures: {
				"default": "textures/entity/skeleton/stray",
				overlay: "textures/entity/skeleton/stray_overlay"
			},
			geometry: {
				"default": "geometry.skeleton.stray",
				overlay: "geometry.stray.armor"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 27
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				"attack.rotations": "animation.humanoid.attack.rotations.v1.0",
				sneaking: "animation.humanoid.sneaking.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				bow_and_arrow: "animation.humanoid.bow_and_arrow.v1.0",
				swimming: "animation.humanoid.swimming.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				skeleton_attack: "animation.skeleton.attack"
			},
			animation_controllers: [
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					skeleton_attack: "controller.animation.skeleton.attack"
				}
			],
			render_controllers: [
				"controller.render.stray_clothes",
				"controller.render.stray"
			],
			enable_attachables: true
		}
	}
},
	"minecraft:strider": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:strider",
			materials: {
				"default": "strider"
			},
			textures: {
				"default": "textures/entity/strider/strider",
				saddled: "textures/entity/strider/strider_saddled",
				suffocated: "textures/entity/strider/strider_suffocated",
				suffocated_saddled: "textures/entity/strider/strider_suffocated_saddled"
			},
			geometry: {
				"default": "geometry.strider"
			},
			spawn_egg: {
				base_color: "#9c3436",
				overlay_color: "#4d494d"
			},
			scripts: {
				pre_animation: [
					"variable.animation_speed = Math.min(query.modified_move_speed, 0.25);",
					"variable.speed = 85.9437;",
					"variable.bristle_flow=Math.cos(query.modified_distance_moved * variable.speed + 180) * variable.animation_speed;",
					"variable.bristle_range_mod=1;",
					"variable.bristle_speed_mod=1;"
				],
				animate: [
					"look_at_target",
					"walk",
					"bristle_flow"
				]
			},
			animations: {
				look_at_target: "animation.strider.look_at_target.default",
				walk: "animation.strider.walk",
				bristle_flow: "animation.strider.bristle_flow"
			},
			render_controllers: [
				"controller.render.strider"
			]
		}
	}
},
	"minecraft:tadpole": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:tadpole",
			materials: {
				"default": "tadpole"
			},
			textures: {
				"default": "textures/entity/tadpole/tadpole"
			},
			geometry: {
				"default": "geometry.tadpole"
			},
			spawn_egg: {
				base_color: "#6d533d",
				overlay_color: "#160a00"
			},
			animations: {
				swim: "animation.tadpole.swim"
			},
			animation_controllers: [
				{
					general: "controller.animation.tadpole.general"
				}
			],
			render_controllers: [
				"controller.render.tadpole"
			]
		}
	}
},
	"minecraft:thrown_trident": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:thrown_trident",
			textures: {
				"default": "textures/entity/trident",
				loyalty_rope: "textures/entity/loyalty_rope"
			},
			geometry: {
				"default": "geometry.trident"
			}
		}
	}
},
	"minecraft:tnt_minecart": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:tnt_minecart",
			min_engine_version: "1.8.0",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				]
			},
			animations: {
				move: "animation.minecart.move"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:tnt_minecart.v1.0": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:tnt_minecart",
			materials: {
				"default": "minecart"
			},
			textures: {
				"default": "textures/entity/minecart"
			},
			geometry: {
				"default": "geometry.minecart"
			},
			scripts: {
				pre_animation: [
					"variable.hurt = query.hurt_time - query.frame_alpha;"
				],
				animate: [
					"move"
				]
			},
			animations: {
				move: "animation.minecart.move.v1.0"
			},
			render_controllers: [
				"controller.render.minecart"
			]
		}
	}
},
	"minecraft:trader_llama": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:trader_llama",
			min_engine_version: "1.8.0",
			materials: {
				"default": "llama"
			},
			textures: {
				creamy: "textures/entity/llama/llama_creamy",
				white: "textures/entity/llama/llama_white",
				brown: "textures/entity/llama/llama_brown",
				gray: "textures/entity/llama/llama_gray",
				decor_none: "textures/entity/llama/decor/decor_none",
				decor_white: "textures/entity/llama/decor/decor_white",
				decor_orange: "textures/entity/llama/decor/decor_orange",
				decor_magenta: "textures/entity/llama/decor/decor_magenta",
				decor_light_blue: "textures/entity/llama/decor/decor_light_blue",
				decor_yellow: "textures/entity/llama/decor/decor_yellow",
				decor_lime: "textures/entity/llama/decor/decor_lime",
				decor_pink: "textures/entity/llama/decor/decor_pink",
				decor_gray: "textures/entity/llama/decor/decor_gray",
				decor_silver: "textures/entity/llama/decor/decor_silver",
				decor_cyan: "textures/entity/llama/decor/decor_cyan",
				decor_purple: "textures/entity/llama/decor/decor_purple",
				decor_blue: "textures/entity/llama/decor/decor_blue",
				decor_brown: "textures/entity/llama/decor/decor_brown",
				decor_green: "textures/entity/llama/decor/decor_green",
				decor_red: "textures/entity/llama/decor/decor_red",
				decor_black: "textures/entity/llama/decor/decor_black",
				decor_wandering_trader: "textures/entity/llama/decor/trader_llama_decor"
			},
			geometry: {
				"default": "geometry.llama.v1.8"
			},
			animations: {
				setup: "animation.llama.setup",
				walk: "animation.quadruped.walk",
				look_at_target: "animation.common.look_at_target",
				baby_transform: "animation.llama.baby_transform"
			},
			animation_controllers: [
				{
					move: "controller.animation.llama.move"
				},
				{
					baby: "controller.animation.llama.baby"
				}
			],
			render_controllers: [
				"controller.render.llama"
			],
			spawn_egg: {
				base_color: "#eaa430",
				overlay_color: "#456296"
			}
		}
	}
},
	"minecraft:tripod_camera": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:tripod_camera",
			materials: {
				"default": "camera"
			},
			textures: {
				"default": "textures/entity/camera_tripod"
			},
			geometry: {
				"default": "geometry.tripod_camera"
			},
			animations: {
				neutral: "animation.tripod_camera.neutral"
			},
			animation_controllers: [
				{
					base: "controller.animation.tripod_camera.base_pose"
				}
			],
			render_controllers: [
				"controller.render.tripod_camera"
			]
		}
	}
},
	"minecraft:tropicalfish": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:tropicalfish",
			materials: {
				"default": "tropicalfish"
			},
			textures: {
				typeA: "textures/entity/fish/tropical_a",
				typeB: "textures/entity/fish/tropical_b",
				aPattern1: "textures/entity/fish/tropical_a_pattern_1",
				aPattern2: "textures/entity/fish/tropical_a_pattern_2",
				aPattern3: "textures/entity/fish/tropical_a_pattern_3",
				aPattern4: "textures/entity/fish/tropical_a_pattern_4",
				aPattern5: "textures/entity/fish/tropical_a_pattern_5",
				aPattern6: "textures/entity/fish/tropical_a_pattern_6",
				bPattern1: "textures/entity/fish/tropical_b_pattern_1",
				bPattern2: "textures/entity/fish/tropical_b_pattern_2",
				bPattern3: "textures/entity/fish/tropical_b_pattern_3",
				bPattern4: "textures/entity/fish/tropical_b_pattern_4",
				bPattern5: "textures/entity/fish/tropical_b_pattern_5",
				bPattern6: "textures/entity/fish/tropical_b_pattern_6"
			},
			scripts: {
				pre_animation: [
					"variable.ZRot = !query.is_in_water ? Math.cos((query.time_stamp + query.frame_alpha) * 0.25) * 90 : 0.0;",
					"variable.AnimationAmountBlend = Math.lerp(variable.AnimationAmountPrev, variable.AnimationAmount, query.frame_alpha);"
				]
			},
			geometry: {
				typeA: "geometry.tropicalfish_a",
				typeB: "geometry.tropicalfish_b"
			},
			animations: {
				flop: "animation.tropicalfish.flop",
				swim: "animation.tropicalfish.swim"
			},
			animation_controllers: [
				{
					general: "controller.animation.fish.general"
				}
			],
			render_controllers: [
				"controller.render.tropicalfish"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 44
			}
		}
	}
},
	"minecraft:turtle": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:turtle",
			materials: {
				"default": "turtle"
			},
			textures: {
				"default": "textures/entity/sea_turtle"
			},
			geometry: {
				"default": "geometry.turtle"
			},
			scripts: {
				pre_animation: [
					"variable.timeMultiplier = query.has_rider ? 0.39972 : 1.0;",
					"variable.backLegMultiplier = query.has_rider ? 0.5 : 3.0;",
					"variable.frontLegMultiplier = query.has_rider ? 2.0 : 8.0;",
					"variable.legSpeedMultiplier = query.has_rider ? 2.0 : 5.0;"
				],
				scale: "1.2"
			},
			animations: {
				general: "animation.turtle.general",
				move: "animation.turtle.move",
				ground_move: "animation.turtle.ground_move",
				look_at_target: "animation.common.look_at_target"
			},
			animation_controllers: [
				{
					general: "controller.animation.turtle.general"
				},
				{
					move: "controller.animation.turtle.move"
				}
			],
			render_controllers: [
				"controller.render.turtle"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 50
			}
		}
	}
},
	"minecraft:vex": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:vex",
			min_engine_version: "1.8.0",
			materials: {
				"default": "vex"
			},
			textures: {
				"default": "textures/entity/vex/vex",
				charging: "textures/entity/vex/vex_charging"
			},
			geometry: {
				"default": "geometry.vex.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				],
				scale: "0.4"
			},
			animations: {
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				"attack.rotations": "animation.humanoid.attack.rotations",
				sneaking: "animation.humanoid.sneaking",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				swimming: "animation.humanoid.swimming",
				use_item_progress: "animation.humanoid.use_item_progress",
				vex_move: "animation.vex.move"
			},
			animation_controllers: [
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					vex_move: "controller.animation.vex.move"
				}
			],
			render_controllers: [
				"controller.render.vex"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 41
			}
		}
	}
},
	"minecraft:vex.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:vex",
			materials: {
				"default": "vex"
			},
			textures: {
				"default": "textures/entity/vex/vex",
				charging: "textures/entity/vex/vex_charging"
			},
			geometry: {
				"default": "geometry.vex"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;",
					"variable.attackbodyroty = Math.sin(Math.sqrt(variable.attack_time) * 360.0) * 11.46;"
				],
				scale: "0.4"
			},
			animations: {
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				"attack.rotations": "animation.vex.attack.rotations.v1.0",
				sneaking: "animation.humanoid.sneaking.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				bow_and_arrow: "animation.humanoid.bow_and_arrow.v1.0",
				swimming: "animation.humanoid.swimming.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				vex_move: "animation.vex.move"
			},
			animation_controllers: [
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					vex_move: "controller.animation.vex.move"
				}
			],
			render_controllers: [
				"controller.render.vex"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 41
			}
		}
	}
},
	"minecraft:vex.v1.0.json": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:vex",
			materials: {
				"default": "vex"
			},
			textures: {
				"default": "textures/entity/vex/vex",
				charging: "textures/entity/vex/vex_charging"
			},
			geometry: {
				"default": "geometry.vex"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				],
				scale: "0.4"
			},
			animations: {
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				"attack.rotations": "animation.humanoid.attack.rotations.v1.0",
				sneaking: "animation.humanoid.sneaking.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				bow_and_arrow: "animation.humanoid.bow_and_arrow.v1.0",
				swimming: "animation.humanoid.swimming.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				vex_move: "animation.vex.move"
			},
			animation_controllers: [
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					vex_move: "controller.animation.vex.move"
				}
			],
			render_controllers: [
				"controller.render.vex"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 41
			}
		}
	}
},
	"minecraft:villager": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:villager",
			min_engine_version: "1.8.0",
			materials: {
				"default": "villager"
			},
			textures: {
				farmer: "textures/entity/villager/farmer",
				librarian: "textures/entity/villager/librarian",
				priest: "textures/entity/villager/priest",
				smith: "textures/entity/villager/smith",
				butcher: "textures/entity/villager/butcher"
			},
			geometry: {
				"default": "geometry.villager.v1.8"
			},
			scripts: {
				scale: "0.9375"
			},
			animations: {
				general: "animation.villager.general",
				look_at_target: "animation.common.look_at_target",
				move: "animation.villager.move",
				baby_transform: "animation.villager.baby_transform"
			},
			animation_controllers: [
				{
					general: "controller.animation.villager.general"
				},
				{
					move: "controller.animation.villager.move"
				},
				{
					baby: "controller.animation.villager.baby"
				}
			],
			render_controllers: [
				"controller.render.villager"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 14
			}
		}
	}
},
	"minecraft:villager.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:villager",
			materials: {
				"default": "villager"
			},
			textures: {
				farmer: "textures/entity/villager/farmer",
				librarian: "textures/entity/villager/librarian",
				priest: "textures/entity/villager/priest",
				smith: "textures/entity/villager/smith",
				butcher: "textures/entity/villager/butcher"
			},
			geometry: {
				"default": "geometry.villager"
			},
			scripts: {
				scale: "0.9375"
			},
			animations: {
				general: "animation.villager.general.v1.0",
				look_at_target: "animation.common.look_at_target",
				move: "animation.villager.move",
				baby_transform: "animation.villager.baby_transform"
			},
			animation_controllers: [
				{
					general: "controller.animation.villager.general"
				},
				{
					move: "controller.animation.villager.move"
				},
				{
					baby: "controller.animation.villager.baby"
				}
			],
			render_controllers: [
				"controller.render.villager.v1.0"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 14
			}
		}
	}
},
	"minecraft:villager_v2": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:villager_v2",
			materials: {
				"default": "villager_v2",
				masked: "villager_v2_masked"
			},
			textures: {
				base: "textures/entity/villager2/villager",
				base2: "textures/entity/villager2/villager",
				base3: "textures/entity/villager2/villager",
				base4: "textures/entity/villager2/villager",
				base5: "textures/entity/villager2/villager",
				base6: "textures/entity/villager2/villager",
				desert: "textures/entity/villager2/biomes/biome_desert",
				jungle: "textures/entity/villager2/biomes/biome_jungle",
				plains: "textures/entity/villager2/biomes/biome_plains",
				savanna: "textures/entity/villager2/biomes/biome_savanna",
				snow: "textures/entity/villager2/biomes/biome_snow",
				swamp: "textures/entity/villager2/biomes/biome_swamp",
				taiga: "textures/entity/villager2/biomes/biome_taiga",
				armorer: "textures/entity/villager2/professions/armorer",
				butcher: "textures/entity/villager2/professions/butcher",
				cartographer: "textures/entity/villager2/professions/cartographer",
				cleric: "textures/entity/villager2/professions/cleric",
				farmer: "textures/entity/villager2/professions/farmer",
				fisherman: "textures/entity/villager2/professions/fisherman",
				fletcher: "textures/entity/villager2/professions/fletcher",
				leatherworker: "textures/entity/villager2/professions/leatherworker",
				librarian: "textures/entity/villager2/professions/librarian",
				shepherd: "textures/entity/villager2/professions/shepherd",
				tool_smith: "textures/entity/villager2/professions/toolsmith",
				weapon_smith: "textures/entity/villager2/professions/weaponsmith",
				stonemason: "textures/entity/villager2/professions/stonemason",
				nitwit: "textures/entity/villager2/professions/nitwit",
				unskilled: "textures/entity/villager2/professions/unskilled",
				level_stone: "textures/entity/villager2/levels/level_stone",
				level_iron: "textures/entity/villager2/levels/level_iron",
				level_gold: "textures/entity/villager2/levels/level_gold",
				level_emerald: "textures/entity/villager2/levels/level_emerald",
				level_diamond: "textures/entity/villager2/levels/level_diamond"
			},
			geometry: {
				"default": "geometry.villager_v2"
			},
			scripts: {
				scale: "0.9375",
				pre_animation: [
					"variable.num_professions = 15;",
					"variable.num_tiers = 3;",
					"variable.profession_index = (query.variant < variable.num_professions ? query.variant : 0);",
					"variable.level_index = query.trade_tier;"
				]
			},
			animations: {
				general: "animation.villager.general",
				look_at_target: "animation.common.look_at_target",
				move: "animation.villager.move",
				raise_arms: "animation.villager.raise_arms",
				baby_transform: "animation.villager.baby_transform",
				get_in_bed: "animation.villager.get_in_bed"
			},
			animation_controllers: [
				{
					general: "controller.animation.villager_v2.general"
				},
				{
					move: "controller.animation.villager_v2.move"
				},
				{
					raise_arms: "controller.animation.villager_v2.raise_arms"
				},
				{
					baby: "controller.animation.villager_v2.baby"
				}
			],
			render_controllers: [
				"controller.render.villager_v2_base",
				"controller.render.villager_v2_masked",
				"controller.render.villager_v2_level"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 14
			}
		}
	}
},
	"minecraft:vindicator": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:vindicator",
			min_engine_version: "1.8.0",
			materials: {
				"default": "vindicator"
			},
			textures: {
				"default": "textures/entity/vindicator"
			},
			geometry: {
				"default": "geometry.vindicator.v1.8"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 39
			},
			scripts: {
				scale: "0.9375",
				animate: [
					"vindicator_base",
					"vindicator_walk",
					"controller_look_at_target",
					"controller_vindicator_base",
					"controller_riding"
				]
			},
			animations: {
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				"riding.arms": "animation.vindicator.riding.arms",
				"riding.legs": "animation.vindicator.riding.legs",
				vindicator_base: "animation.vindicator.base",
				vindicator_attack: "animation.vindicator.attack",
				vindicator_hand_attack: "animation.vindicator.hand_attack",
				vindicator_walk: "animation.vindicator.walk",
				celebrating: "animation.humanoid.celebrating",
				controller_look_at_target: "controller.animation.humanoid.look_at_target",
				controller_vindicator_base: "controller.animation.vindicator.base",
				controller_riding: "controller.animation.humanoid.riding"
			},
			render_controllers: [
				"controller.render.vindicator"
			],
			enable_attachables: true,
			hide_armor: true
		}
	}
},
	"minecraft:vindicator.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:vindicator",
			materials: {
				"default": "vindicator"
			},
			textures: {
				"default": "textures/entity/vindicator"
			},
			geometry: {
				"default": "geometry.vindicator"
			},
			scripts: {
				scale: "0.9375"
			},
			animations: {
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				vindicator_base: "animation.vindicator.base",
				vindicator_attack: "animation.vindicator.attack",
				vindicator_walk: "animation.vindicator.walk"
			},
			animation_controllers: [
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					vindicator_base: "controller.animation.vindicator.base.v1.0"
				}
			],
			render_controllers: [
				"controller.render.vindicator"
			],
			enable_attachables: true,
			hide_armor: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 39
			}
		}
	}
},
	"minecraft:wandering_trader": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:wandering_trader",
			materials: {
				"default": "wandering_trader"
			},
			textures: {
				"default": "textures/entity/wandering_trader"
			},
			geometry: {
				"default": "geometry.villager_v2"
			},
			scripts: {
				scale: "0.9375"
			},
			animations: {
				general: "animation.villager.general",
				look_at_target: "animation.common.look_at_target",
				raise_arms: "animation.villager.raise_arms",
				move: "animation.villager.move"
			},
			animation_controllers: [
				{
					general: "controller.animation.villager.general"
				},
				{
					raise_arms: "controller.animation.villager_v2.raise_arms"
				},
				{
					move: "controller.animation.villager.move"
				}
			],
			render_controllers: [
				"controller.render.wandering_trader"
			],
			spawn_egg: {
				texture: "spawn_egg_wandering_trader"
			}
		}
	}
},
	"minecraft:warden": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:warden",
			materials: {
				"default": "warden",
				bioluminescent_layer: "warden_bioluminescent_layer"
			},
			textures: {
				"default": "textures/entity/warden/warden",
				bioluminescent_layer: "textures/entity/warden/warden_bioluminescent_layer",
				spots_1: "textures/entity/warden/warden_pulsating_spots_1",
				spots_2: "textures/entity/warden/warden_pulsating_spots_2",
				tendrils: "textures/entity/warden/warden_tendrils",
				heart: "textures/entity/warden/warden_heart"
			},
			geometry: {
				"default": "geometry.warden"
			},
			scripts: {
				pre_animation: [
					"variable.animation_speed = Math.min(0.5, 3.0 * query.modified_move_speed);",
					"variable.anim_pos_mod = 49.388962;",
					"variable.bob = query.life_time * 20;",
					"variable.modified_bob = variable.bob * 0.1 * 57.2958;",
					"variable.modified_bob_sin = math.sin(variable.modified_bob);",
					"variable.modified_bob_cos = math.cos(variable.modified_bob);",
					"variable.pi = 180;",
					"variable.halfpi = variable.pi / 2.0;",
					"variable.tendril_animation_length = 0.5;",
					"variable.head_x_rot = (68.7549 * math.cos(query.modified_distance_moved * variable.anim_pos_mod + variable.halfpi) * math.min(0.35, variable.animation_speed)) + (math.sin(variable.bob * 5.72958) * 0.06);",
					"variable.head_z_rot = (17.1887 * math.sin(query.modified_distance_moved * variable.anim_pos_mod) * variable.animation_speed) + (Math.cos(variable.bob * 5.72958) * 0.06);",
					"variable.body_x_rot = (57.2958 * math.cos(query.modified_distance_moved * variable.anim_pos_mod) * math.min(0.35, variable.animation_speed)) + (math.cos(variable.bob * 5.72958) * 0.025);",
					"variable.body_z_rot = (5.72958 * math.sin(query.modified_distance_moved * variable.anim_pos_mod) * variable.animation_speed) + (math.sin(variable.bob * 5.72958) * 0.025);",
					"variable.left_leg_x_rot = 57.2958 * math.cos(query.modified_distance_moved * variable.anim_pos_mod) * variable.animation_speed;",
					"variable.right_leg_x_rot = 57.2958 * math.cos(query.modified_distance_moved * variable.anim_pos_mod + variable.pi) * variable.animation_speed;",
					"variable.left_arm_x_rot = -(45.8366 * math.cos(query.modified_distance_moved * variable.anim_pos_mod) * variable.animation_speed);",
					"variable.right_arm_x_rot = -(45.8366 * math.sin(query.modified_distance_moved * variable.anim_pos_mod) * variable.animation_speed);",
					"variable.vibration_phase = query.time_since_last_vibration_detection;",
					"variable.tendril_animation = variable.vibration_phase < 0.0 ? 0.0 : 1.0 - (math.min(query.time_since_last_vibration_detection, variable.tendril_animation_length) / variable.tendril_animation_length);",
					"variable.left_tendril_x_rot = variable.tendril_animation * (math.cos(variable.bob * 128.9155) * variable.pi * 0.1);",
					"variable.right_tendril_x_rot = variable.left_tendril_x_rot * -1;",
					"variable.spots_1_alpha = 0.25 * math.cos(variable.bob * 2.578);",
					"variable.spots_2_alpha = 0.25 * math.cos(variable.bob * 2.578 + 180.0);",
					"variable.tendrils_alpha = variable.tendril_animation;",
					"variable.heart_alpha = 0.8 * (1.0 - query.heartbeat_phase);"
				],
				animate: [
					"base_pose",
					{
						move: "!(query.is_emerging || query.is_digging)"
					},
					"shiver_controller",
					"bob",
					{
						emerge: "query.is_emerging"
					},
					"sniff_controller",
					{
						dig: "query.is_digging"
					},
					"roar_controller",
					{
						look_at_target: "!(query.is_emerging || query.is_digging)"
					},
					"melee_attack_controller",
					{
						swimming: "query.swim_amount > 0.0"
					},
					"sonic_boom_controller"
				]
			},
			animations: {
				emerge: "animation.warden.emerge",
				sniff: "animation.warden.sniff",
				sniff_controller: "controller.animation.warden.sniff",
				dig: "animation.warden.dig",
				roar: "animation.warden.roar",
				roar_controller: "controller.animation.warden.roar",
				shiver: "animation.warden.shiver",
				shiver_controller: "controller.animation.warden.shiver",
				base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target: "animation.warden.look_at_target.default",
				move: "animation.warden.move",
				melee_attack: "animation.warden.attack",
				melee_attack_controller: "controller.animation.warden.melee_attacking",
				bob: "animation.warden.bob",
				swimming: "animation.humanoid.swimming.v1.0",
				sonic_boom: "animation.warden.sonic_boom",
				sonic_boom_controller: "controller.animation.warden.sonic_boom"
			},
			render_controllers: [
				"controller.render.warden",
				"controller.render.warden_bioluminescent_layer",
				"controller.render.warden_spots_1",
				"controller.render.warden_spots_2",
				"controller.render.warden_tendrils",
				"controller.render.warden_heart"
			],
			enable_attachables: true,
			spawn_egg: {
				base_color: "#0F4649",
				overlay_color: "#39D6E0"
			},
			sound_effects: {
				emerge: "mob.warden.emerge",
				sniff: "mob.warden.sniff",
				dig: "mob.warden.dig",
				roar: "mob.warden.roar",
				clicking: "mob.warden.clicking"
			},
			particle_effects: {
				digging: "minecraft:warden_dig"
			}
		}
	}
},
	"minecraft:witch": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:witch",
			min_engine_version: "1.8.0",
			materials: {
				"default": "witch"
			},
			textures: {
				"default": "textures/entity/witch"
			},
			geometry: {
				"default": "geometry.villager.witch.v1.8"
			},
			scripts: {
				scale: "0.9375"
			},
			animations: {
				villager_general: "animation.villager.general",
				look_at_target: "animation.common.look_at_target",
				move: "animation.villager.move",
				general: "animation.witch.general"
			},
			animation_controllers: [
				{
					general: "controller.animation.witch.general"
				},
				{
					move: "controller.animation.villager.move"
				}
			],
			render_controllers: [
				"controller.render.witch"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 17
			}
		}
	}
},
	"minecraft:witch.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:witch",
			materials: {
				"default": "witch"
			},
			textures: {
				"default": "textures/entity/witch"
			},
			geometry: {
				"default": "geometry.villager.witch"
			},
			scripts: {
				scale: "0.9375"
			},
			animations: {
				villager_general: "animation.villager.general.v1.0",
				look_at_target: "animation.common.look_at_target",
				move: "animation.villager.move",
				general: "animation.witch.general"
			},
			animation_controllers: [
				{
					general: "controller.animation.witch.general"
				},
				{
					move: "controller.animation.villager.move"
				}
			],
			render_controllers: [
				"controller.render.witch.v1.0"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 17
			}
		}
	}
},
	"minecraft:wither": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:wither",
			min_engine_version: "1.8.0",
			materials: {
				"default": "wither_boss",
				armor: "wither_boss_armor"
			},
			textures: {
				"default": "textures/entity/wither_boss/wither",
				armor_white: "textures/entity/wither_boss/wither_armor_white",
				armor_blue: "textures/entity/wither_boss/wither_armor_blue",
				invulnerable: "textures/entity/wither_boss/wither_invulnerable"
			},
			geometry: {
				"default": "geometry.witherBoss",
				armor: "geometry.witherBoss.armor.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.base_scale = 2;",
					"variable.swell_clamped = Math.clamp(query.swell_amount, 0.0, 1.0);",
					"variable.wobble = 1.0 + Math.sin(query.swell_amount * 5730) * query.swell_amount * 0.01;",
					"variable.swell_adjustment = Math.pow(variable.swell_clamped, 4);",
					"variable.scale_xz = (1.0 + variable.swell_adjustment * 0.4) * variable.wobble;",
					"variable.scale_y = (1.0 + variable.swell_adjustment * 0.1) / variable.wobble;",
					"variable.body_base_rotation = Math.cos(query.life_time * 114.6);",
					"variable.upper_body_rotation = (0.065 + 0.05 * variable.body_base_rotation) * 180 + query.target_x_rotation;",
					"variable.is_invulnerable = query.invulnerable_ticks > 0.0;",
					"variable.display_normal_skin = (query.invulnerable_ticks <= 0) || ((query.invulnerable_ticks <= 80) && (Math.mod(query.invulnerable_ticks / 5, 2) == 1));"
				],
				scalex: "variable.scale_xz * variable.base_scale",
				scaley: "variable.scale_y * variable.base_scale",
				scalez: "variable.scale_xz * variable.base_scale"
			},
			animations: {
				scale: "animation.wither_boss.scale",
				move: "animation.wither_boss.move",
				look_at_target: "animation.wither_boss.look_at_target"
			},
			animation_controllers: [
				{
					move: "controller.animation.wither_boss.move"
				}
			],
			render_controllers: [
				"controller.render.wither_boss",
				"controller.render.wither_boss_armor_white",
				"controller.render.wither_boss_armor_blue"
			]
		}
	}
},
	"minecraft:wither.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:wither",
			materials: {
				"default": "wither_boss",
				armor: "wither_boss_armor"
			},
			textures: {
				"default": "textures/entity/wither_boss/wither",
				armor_white: "textures/entity/wither_boss/wither_armor_white",
				armor_blue: "textures/entity/wither_boss/wither_armor_blue",
				invulnerable: "textures/entity/wither_boss/wither_invulnerable"
			},
			geometry: {
				"default": "geometry.witherBoss",
				armor: "geometry.witherBoss.armor"
			},
			scripts: {
				pre_animation: [
					"variable.base_scale = 2;",
					"variable.swell_clamped = Math.clamp(query.swell_amount, 0.0, 1.0);",
					"variable.wobble = 1.0 + Math.sin(query.swell_amount * 5730) * query.swell_amount * 0.01;",
					"variable.swell_adjustment = Math.pow(variable.swell_clamped, 4);",
					"variable.scale_xz = (1.0 + variable.swell_adjustment * 0.4) * variable.wobble;",
					"variable.scale_y = (1.0 + variable.swell_adjustment * 0.1) / variable.wobble;",
					"variable.body_base_rotation = Math.cos(query.life_time * 114.6);",
					"variable.upper_body_rotation = (0.065 + 0.05 * variable.body_base_rotation) * 180 + query.target_x_rotation;",
					"variable.is_invulnerable = query.invulnerable_ticks > 0.0;",
					"variable.display_normal_skin = (query.invulnerable_ticks <= 0) || ((query.invulnerable_ticks <= 80) && (Math.mod(query.invulnerable_ticks / 5, 2) == 1));"
				],
				scalex: "variable.scale_xz * variable.base_scale",
				scaley: "variable.scale_y * variable.base_scale",
				scalez: "variable.scale_xz * variable.base_scale"
			},
			animations: {
				scale: "animation.wither_boss.scale",
				move: "animation.wither_boss.move",
				look_at_target: "animation.wither_boss.look_at_target"
			},
			animation_controllers: [
				{
					move: "controller.animation.wither_boss.move"
				}
			],
			render_controllers: [
				"controller.render.wither_boss",
				"controller.render.wither_boss_armor_white",
				"controller.render.wither_boss_armor_blue"
			]
		}
	}
},
	"minecraft:wither_skeleton": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:wither_skeleton",
			min_engine_version: "1.8.0",
			materials: {
				"default": "skeleton"
			},
			textures: {
				"default": "textures/entity/skeleton/wither_skeleton"
			},
			geometry: {
				"default": "geometry.skeleton.wither.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				"attack.rotations": "animation.humanoid.attack.rotations",
				sneaking: "animation.humanoid.sneaking",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				use_item_progress: "animation.humanoid.use_item_progress",
				wither_skeleton_attack: "animation.wither_skeleton.attack",
				swimming: "animation.zombie.swimming"
			},
			animation_controllers: [
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					wither_skeleton_attack: "controller.animation.wither_skeleton.attack"
				},
				{
					swimming: "controller.animation.zombie.swimming"
				}
			],
			render_controllers: [
				"controller.render.wither_skeleton"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 29
			}
		}
	}
},
	"minecraft:wither_skeleton.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:wither_skeleton",
			materials: {
				"default": "skeleton"
			},
			textures: {
				"default": "textures/entity/skeleton/wither_skeleton"
			},
			geometry: {
				"default": "geometry.skeleton.wither"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				"attack.rotations": "animation.humanoid.attack.rotations.v1.0",
				sneaking: "animation.humanoid.sneaking.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				bow_and_arrow: "animation.humanoid.bow_and_arrow.v1.0",
				swimming: "animation.humanoid.swimming.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				wither_skeleton_attack: "animation.wither_skeleton.attack"
			},
			animation_controllers: [
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					wither_skeleton_attack: "controller.animation.wither_skeleton.attack"
				}
			],
			render_controllers: [
				"controller.render.wither_skeleton"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 29
			}
		}
	}
},
	"minecraft:wither_skull": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:wither_skull",
			materials: {
				"default": "wither_skull"
			},
			textures: {
				"default": "textures/entity/wither_boss/wither"
			},
			geometry: {
				"default": "geometry.wither_skull"
			},
			animations: {
				move: "animation.wither_skull.move"
			},
			scripts: {
				animate: [
					"move"
				]
			},
			render_controllers: [
				"controller.render.wither_skull"
			]
		}
	}
},
	"minecraft:wither_skull_dangerous": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:wither_skull_dangerous",
			materials: {
				"default": "wither_skull"
			},
			textures: {
				"default": "textures/entity/wither_boss/wither_invulnerable"
			},
			geometry: {
				"default": "geometry.wither_skull"
			},
			animations: {
				move: "animation.wither_skull.move"
			},
			scripts: {
				animate: [
					"move"
				]
			},
			render_controllers: [
				"controller.render.wither_skull"
			]
		}
	}
},
	"minecraft:wolf": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:wolf",
			materials: {
				"default": "wolf"
			},
			textures: {
				"default": "textures/entity/wolf/wolf",
				angry: "textures/entity/wolf/wolf_angry",
				tame: "textures/entity/wolf/wolf_tame"
			},
			geometry: {
				"default": "geometry.wolf"
			},
			scripts: {
				pre_animation: [
					"variable.body_shake_angle = 0.05 * query.frame_alpha + query.shake_angle;",
					"variable.body_roll_progress = Math.clamp((variable.body_shake_angle - 0.16) / 1.8, 0, 1);",
					"variable.body_rot_z = Math.sin(variable.body_roll_progress * 180) * Math.sin(variable.body_roll_progress * 1980) * 27;",
					"variable.upper_body_roll_progress = Math.clamp((variable.body_shake_angle - 0.08) / 1.8, 0, 1);",
					"variable.upper_body_rot_z = (Math.sin(variable.upper_body_roll_progress * 180) * Math.sin(variable.upper_body_roll_progress * 1980) * 27) - variable.body_rot_z;",
					"variable.tail_roll_progress = Math.clamp((variable.body_shake_angle - 0.2) / 1.8, 0, 1);",
					"variable.tail_rot_z = (Math.sin(variable.tail_roll_progress * 180) * Math.sin(variable.tail_roll_progress * 1980) * 27) - variable.body_rot_z;",
					"variable.head_roll_progress = Math.clamp(variable.body_shake_angle / 1.8, 0, 1);",
					"variable.head_rot_z = (Math.sin(variable.head_roll_progress * 180) * Math.sin(variable.head_roll_progress * 1980) * 27) - variable.body_rot_z;"
				]
			},
			animations: {
				wolf_setup: "animation.wolf.setup",
				wolf_baby_scaling: "animation.wolf.baby_scaling",
				wolf_look_at: "animation.common.look_at_target",
				wolf_head_rot_z: "animation.wolf.head_rot_z",
				wolf_tail_default: "animation.wolf.tail_default",
				wolf_angry: "animation.wolf.angry",
				wolf_sitting: "animation.wolf.sitting",
				wolf_shaking: "animation.wolf.shaking",
				wolf_leg_default: "animation.wolf.leg_default"
			},
			animation_controllers: [
				{
					wolf_setup: "controller.animation.wolf.setup"
				},
				{
					wolf_look_at: "controller.animation.wolf.look_at"
				},
				{
					wolf_baby_scaling: "controller.animation.wolf.baby_scaling"
				},
				{
					wolf_head_rot_z: "controller.animation.wolf.head_rot_z"
				},
				{
					wolf_tail_default: "controller.animation.wolf.tail_default"
				},
				{
					wolf_angry: "controller.animation.wolf.angry"
				},
				{
					wolf_sitting: "controller.animation.wolf.sitting"
				},
				{
					wolf_shaking: "controller.animation.wolf.shaking"
				}
			],
			render_controllers: [
				"controller.render.wolf"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 4
			}
		}
	}
},
	"minecraft:zoglin": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zoglin",
			materials: {
				"default": "zoglin"
			},
			textures: {
				"default": "textures/entity/zoglin/zoglin"
			},
			geometry: {
				"default": "geometry.hoglin"
			},
			spawn_egg: {
				base_color: "#c66e55",
				overlay_color: "#e6e6e6"
			},
			scripts: {
				pre_animation: [
					"variable.tcos_right_side = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;",
					"variable.tcos_left_side = -variable.tcos_right_side;",
					"variable.attack_head_rot =  Math.sin(variable.attack_time * 180.0) * -37.3;"
				],
				animate: [
					"walk",
					"look_at_target",
					{
						attack: "variable.has_target && variable.attack_time >= 0.0"
					},
					{
						hoglin_baby_scaling: "query.is_baby"
					}
				]
			},
			animations: {
				walk: "animation.hoglin.walk",
				look_at_target: "animation.hoglin.look_at_target",
				attack: "animation.hoglin.attack",
				hoglin_baby_scaling: "animation.hoglin.baby_scaling"
			},
			render_controllers: [
				"controller.render.zoglin"
			]
		}
	}
},
	"minecraft:zombie": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie",
			min_engine_version: "1.8.0",
			materials: {
				"default": "zombie"
			},
			textures: {
				"default": "textures/entity/zombie/zombie"
			},
			geometry: {
				"default": "geometry.zombie.v1.8"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 12
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				"attack.rotations": "animation.humanoid.attack.rotations",
				sneaking: "animation.humanoid.sneaking",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				use_item_progress: "animation.humanoid.use_item_progress",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand",
				swimming: "animation.zombie.swimming"
			},
			animation_controllers: [
				{
					humanoid_baby_big_head: "controller.animation.humanoid.baby_big_head"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					zombie_attack_bare_hand: "controller.animation.zombie.attack_bare_hand"
				},
				{
					swimming: "controller.animation.zombie.swimming"
				}
			],
			render_controllers: [
				"controller.render.zombie"
			],
			enable_attachables: true
		}
	}
},
	"minecraft:zombie.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie",
			materials: {
				"default": "zombie"
			},
			textures: {
				"default": "textures/entity/zombie/zombie"
			},
			geometry: {
				"default": "geometry.zombie"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				"attack.rotations": "animation.humanoid.attack.rotations.v1.0",
				sneaking: "animation.humanoid.sneaking.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				bow_and_arrow: "animation.humanoid.bow_and_arrow.v1.0",
				swimming: "animation.humanoid.swimming.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand",
				zombie_swimming: "animation.zombie.swimming"
			},
			animation_controllers: [
				{
					humanoid_baby_big_head: "controller.animation.humanoid.baby_big_head"
				},
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					zombie_attack_bare_hand: "controller.animation.zombie.attack_bare_hand"
				},
				{
					zombie_swimming: "controller.animation.zombie.swimming"
				}
			],
			render_controllers: [
				"controller.render.zombie"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 12
			}
		}
	}
},
	"minecraft:zombie_horse_v1": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie_horse",
			materials: {
				"default": "horse"
			},
			textures: {
				zombie: "textures/entity/horse/horse_zombie",
				markings_none: "textures/entity/horse/horse_markings_none",
				armor_none: "textures/entity/horse/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse"
			},
			animations: {
				setup: "animation.horse.setup",
				baby_transform: "animation.horse.baby_transform",
				walk: "animation.horse.walk",
				eat: "animation.horse.eat",
				stand: "animation.horse.stand",
				shake_tail: "animation.horse.shake_tail",
				mouth: "animation.horse.mouth",
				look_at_player: "animation.horse.look_at_player"
			},
			scripts: {
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;",
					"variable.leg_back_origin = query.bone_origin('leg1a');",
					"variable.leg_front_origin = query.bone_origin('leg3a');",
					"variable.head_rotation = query.bone_rotation('head');"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.walk_tail_angle = math.clamp(query.modified_move_speed * 50.0, 0.0, 90.0) * (1.0 - variable.stand_anim);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_walk_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_walk_factor * 45.8 * query.modified_move_speed;",
					"variable.leg_stand = math.cos((query.life_time * 20.0) * 34.38)  * variable.stand_anim;",
					"variable.baby_ratio = query.is_baby ? ((0.0625 - query.model_scale) * 16.0) : 0.0;"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					{
						walk: "variable.stand_anim < 0.5"
					},
					{
						stand: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						shake_tail: "variable.shake_tail"
					},
					"mouth",
					"look_at_player"
				]
			},
			render_controllers: [
				"controller.render.zombie_horse.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 33
			}
		}
	}
},
	"minecraft:zombie_horse_v2": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie_horse",
			min_engine_version: "1.2.6",
			materials: {
				"default": "horse"
			},
			textures: {
				zombie: "textures/entity/horse2/horse_zombie",
				markings_none: "textures/entity/horse2/horse_markings_none",
				armor_none: "textures/entity/horse2/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse.v2"
			},
			animations: {
				setup: "animation.horse.v2.setup",
				baby_transform: "animation.horse.v2.baby_transform",
				walk: "animation.horse.v2.walk",
				eat: "animation.horse.v2.eat",
				stand: "animation.horse.v2.stand",
				tail: "animation.horse.v2.tail"
			},
			scripts: {
				initialize: [
					"variable.eat_anim = 0.0;",
					"variable.mouth_anim = 0.0;"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.mouth_anim = math.clamp(variable.mouth_anim + (variable.open_mouth ? ((1.0 - variable.mouth_anim) * 0.7 + 0.05) : -variable.mouth_anim * 0.7 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.base_head_angle = variable.inverse_max_stand_eat * (30.0 + variable.head_x_rot + variable.mouth_anim  * math.sin((query.life_time * 20.0 + query.frame_alpha) * 57.3) * 2.86);",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;",
					"variable.leg1a_aabb = query.bone_aabb('leg1a');",
					"variable.y_adjust = query.is_baby ? 0.0 : (variable.leg1a_aabb.max.y - variable.leg1a_aabb.min.y) * (1.0 - (query.model_scale * 16.0));"
				],
				animate: [
					"setup",
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"stand",
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.zombie_horse.v1.and.v2"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 33
			}
		}
	}
},
	"minecraft:zombie_horse_v3": {
	format_version: "1.10.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie_horse",
			min_engine_version: "1.17.10",
			materials: {
				"default": "horse"
			},
			textures: {
				zombie: "textures/entity/horse2/horse_zombie",
				markings_none: "textures/entity/horse2/horse_markings_none",
				armor_none: "textures/entity/horse2/armor/horse_armor_none"
			},
			geometry: {
				"default": "geometry.horse.v3"
			},
			animations: {
				baby_transform: "animation.horse.v3.baby_transform",
				walk: "animation.horse.v3.walk",
				eat: "animation.horse.v3.eat",
				rear: "animation.horse.v3.rear",
				tail: "animation.horse.v3.tail",
				look_at_player: "animation.horse.v3.look_at_player"
			},
			scripts: {
				initialize: [
					"variable.eat_anim = 0.0;"
				],
				pre_animation: [
					"variable.eat_anim = math.clamp(variable.eat_anim + (query.is_grazing ? ((1.0 - variable.eat_anim) * 0.4 + 0.05) : -variable.eat_anim * 0.4 - 0.05) * query.delta_time * 20.0, 0.0, 1.0);",
					"variable.head_x_rot = query.target_x_rotation + (query.modified_move_speed > 0.2 ? (math.cos(query.modified_distance_moved * 11.46) * 11.46 * query.modified_move_speed + query.modified_move_speed * 11.46) : 0.0);",
					"variable.inverse_max_stand_eat = (1.0 - math.max(variable.stand_anim, variable.eat_anim));",
					"variable.leg_stand_factor = math.cos((query.modified_distance_moved * 38.38) + 180.0);",
					"variable.leg_x_rot_anim = variable.leg_stand_factor * 45.8 * query.modified_move_speed;"
				],
				animate: [
					{
						baby_transform: "query.is_baby"
					},
					"walk",
					"look_at_player",
					{
						rear: "variable.stand_anim > 0.0"
					},
					{
						eat: "!query.is_standing"
					},
					{
						tail: "variable.shake_tail"
					}
				]
			},
			render_controllers: [
				"controller.render.zombie_horse.v3"
			],
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 33
			}
		}
	}
},
	"minecraft:zombie_pigman": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie_pigman",
			min_engine_version: "1.8.0",
			materials: {
				"default": "zombie"
			},
			textures: {
				"default": "textures/entity/piglin/zombie_piglin"
			},
			geometry: {
				"default": "geometry.piglin"
			},
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 13
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				humanoid_base_pose: "animation.humanoid.base_pose",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				"attack.rotations": "animation.humanoid.attack.rotations",
				sneaking: "animation.humanoid.sneaking",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				swimming: "animation.humanoid.swimming",
				use_item_progress: "animation.humanoid.use_item_progress",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand"
			},
			animation_controllers: [
				{
					humanoid_baby_big_head: "controller.animation.humanoid.baby_big_head"
				},
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					zombie_attack_bare_hand: "controller.animation.zombie.attack_bare_hand"
				}
			],
			render_controllers: [
				"controller.render.zombie_pigman"
			],
			enable_attachables: true
		}
	}
},
	"minecraft:zombie_pigman.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie_pigman",
			materials: {
				"default": "zombie"
			},
			textures: {
				"default": "textures/entity/pig/pigzombie"
			},
			geometry: {
				"default": "geometry.pigzombie",
				baby: "geometry.pigzombie.baby"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				"attack.rotations": "animation.humanoid.attack.rotations.v1.0",
				sneaking: "animation.humanoid.sneaking.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				bow_and_arrow: "animation.humanoid.bow_and_arrow.v1.0",
				swimming: "animation.humanoid.swimming.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand"
			},
			animation_controllers: [
				{
					humanoid_baby_big_head: "controller.animation.humanoid.baby_big_head"
				},
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.humanoid.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					zombie_attack_bare_hand: "controller.animation.zombie.attack_bare_hand"
				}
			],
			render_controllers: [
				"controller.render.zombie_pigman"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 13
			}
		}
	}
},
	"minecraft:zombie_villager": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie_villager",
			min_engine_version: "1.8.0",
			materials: {
				"default": "zombie_villager"
			},
			textures: {
				smith: "textures/entity/zombie_villager/zombie_smith",
				butcher: "textures/entity/zombie_villager/zombie_butcher",
				librarian: "textures/entity/zombie_villager/zombie_librarian",
				priest: "textures/entity/zombie_villager/zombie_priest",
				farmer: "textures/entity/zombie_villager/zombie_farmer"
			},
			geometry: {
				"default": "geometry.zombie.villager.v1.8"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				humanoid_base_pose: "animation.humanoid.base_pose",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				"attack.rotations": "animation.humanoid.attack.rotations",
				sneaking: "animation.humanoid.sneaking",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				use_item_progress: "animation.humanoid.use_item_progress",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand",
				swimming: "animation.zombie.swimming"
			},
			animation_controllers: [
				{
					humanoid_baby_big_head: "controller.animation.humanoid.baby_big_head"
				},
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					zombie_attack_bare_hand: "controller.animation.zombie.attack_bare_hand"
				},
				{
					swimming: "controller.animation.zombie.swimming"
				}
			],
			render_controllers: [
				"controller.render.zombie_villager"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 42
			}
		}
	}
},
	"minecraft:zombie_villager.v1.0": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie_villager",
			materials: {
				"default": "zombie_villager"
			},
			textures: {
				smith: "textures/entity/zombie_villager/zombie_smith",
				butcher: "textures/entity/zombie_villager/zombie_butcher",
				librarian: "textures/entity/zombie_villager/zombie_librarian",
				priest: "textures/entity/zombie_villager/zombie_priest",
				farmer: "textures/entity/zombie_villager/zombie_farmer"
			},
			geometry: {
				"default": "geometry.zombie.villager"
			},
			scripts: {
				pre_animation: [
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				humanoid_base_pose: "animation.humanoid.base_pose.v1.0",
				look_at_target_default: "animation.humanoid.look_at_target.default.v1.0",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding.v1.0",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming.v1.0",
				move: "animation.humanoid.move.v1.0",
				"riding.arms": "animation.humanoid.riding.arms.v1.0",
				"riding.legs": "animation.humanoid.riding.legs.v1.0",
				holding: "animation.humanoid.holding.v1.0",
				brandish_spear: "animation.humanoid.brandish_spear.v1.0",
				charging: "animation.humanoid.charging.v1.0",
				"attack.rotations": "animation.humanoid.attack.rotations.v1.0",
				sneaking: "animation.humanoid.sneaking.v1.0",
				bob: "animation.humanoid.bob.v1.0",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs.v1.0",
				bow_and_arrow: "animation.humanoid.bow_and_arrow.v1.0",
				swimming: "animation.humanoid.swimming.v1.0",
				use_item_progress: "animation.humanoid.use_item_progress.v1.0",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand"
			},
			animation_controllers: [
				{
					humanoid_baby_big_head: "controller.animation.humanoid.baby_big_head"
				},
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					swimming: "controller.animation.zombie.swimming"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					zombie_attack_bare_hand: "controller.animation.zombie.attack_bare_hand"
				}
			],
			render_controllers: [
				"controller.render.zombie_villager"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 42
			}
		}
	}
},
	"minecraft:zombie_villager_v2": {
	format_version: "1.8.0",
	"minecraft:client_entity": {
		description: {
			identifier: "minecraft:zombie_villager_v2",
			materials: {
				"default": "zombie_villager_v2",
				masked: "zombie_villager_v2_masked"
			},
			textures: {
				"default": "textures/entity/zombie_villager2/zombie-villager",
				desert: "textures/entity/zombie_villager2/biomes/biome-desert-zombie",
				jungle: "textures/entity/zombie_villager2/biomes/biome-jungle-zombie",
				plains: "textures/entity/zombie_villager2/biomes/biome-plains-zombie",
				savanna: "textures/entity/zombie_villager2/biomes/biome-savanna-zombie",
				snow: "textures/entity/zombie_villager2/biomes/biome-snow-zombie",
				swamp: "textures/entity/zombie_villager2/biomes/biome-swamp-zombie",
				taiga: "textures/entity/zombie_villager2/biomes/biome-taiga-zombie",
				armorer: "textures/entity/zombie_villager2/professions/armorer",
				butcher: "textures/entity/zombie_villager2/professions/butcher",
				cartographer: "textures/entity/zombie_villager2/professions/cartographer",
				cleric: "textures/entity/zombie_villager2/professions/cleric",
				farmer: "textures/entity/zombie_villager2/professions/farmer",
				fisherman: "textures/entity/zombie_villager2/professions/fisherman",
				fletcher: "textures/entity/zombie_villager2/professions/fletcher",
				leatherworker: "textures/entity/zombie_villager2/professions/leatherworker",
				librarian: "textures/entity/zombie_villager2/professions/librarian",
				shepherd: "textures/entity/zombie_villager2/professions/shepherd",
				tool_smith: "textures/entity/zombie_villager2/professions/toolsmith",
				weapon_smith: "textures/entity/zombie_villager2/professions/weaponsmith",
				stonemason: "textures/entity/zombie_villager2/professions/stonemason",
				nitwit: "textures/entity/zombie_villager2/professions/nitwit"
			},
			geometry: {
				"default": "geometry.zombie.villager_v2"
			},
			scripts: {
				pre_animation: [
					"variable.num_professions = 14;",
					"variable.profession_index = ((query.variant < variable.num_professions) ? query.variant : 0);",
					"variable.tcos0 = (Math.cos(query.modified_distance_moved * 38.17) * query.modified_move_speed / variable.gliding_speed_value) * 57.3;"
				]
			},
			animations: {
				humanoid_big_head: "animation.humanoid.big_head",
				humanoid_base_pose: "animation.humanoid.base_pose",
				look_at_target_default: "animation.humanoid.look_at_target.default",
				look_at_target_gliding: "animation.humanoid.look_at_target.gliding",
				look_at_target_swimming: "animation.humanoid.look_at_target.swimming",
				move: "animation.humanoid.move",
				"riding.arms": "animation.humanoid.riding.arms",
				"riding.legs": "animation.humanoid.riding.legs",
				holding: "animation.humanoid.holding",
				brandish_spear: "animation.humanoid.brandish_spear",
				charging: "animation.humanoid.charging",
				"attack.rotations": "animation.humanoid.attack.rotations",
				sneaking: "animation.humanoid.sneaking",
				bob: "animation.humanoid.bob",
				damage_nearby_mobs: "animation.humanoid.damage_nearby_mobs",
				bow_and_arrow: "animation.humanoid.bow_and_arrow",
				use_item_progress: "animation.humanoid.use_item_progress",
				zombie_attack_bare_hand: "animation.zombie.attack_bare_hand",
				swimming: "animation.zombie.swimming"
			},
			animation_controllers: [
				{
					humanoid_baby_big_head: "controller.animation.humanoid.baby_big_head"
				},
				{
					humanoid_base_pose: "controller.animation.humanoid.base_pose"
				},
				{
					look_at_target: "controller.animation.humanoid.look_at_target"
				},
				{
					move: "controller.animation.humanoid.move"
				},
				{
					riding: "controller.animation.humanoid.riding"
				},
				{
					holding: "controller.animation.humanoid.holding"
				},
				{
					brandish_spear: "controller.animation.humanoid.brandish_spear"
				},
				{
					charging: "controller.animation.humanoid.charging"
				},
				{
					attack: "controller.animation.humanoid.attack"
				},
				{
					sneaking: "controller.animation.humanoid.sneaking"
				},
				{
					bob: "controller.animation.humanoid.bob"
				},
				{
					damage_nearby_mobs: "controller.animation.humanoid.damage_nearby_mobs"
				},
				{
					bow_and_arrow: "controller.animation.humanoid.bow_and_arrow"
				},
				{
					use_item_progress: "controller.animation.humanoid.use_item_progress"
				},
				{
					zombie_attack_bare_hand: "controller.animation.zombie.attack_bare_hand"
				},
				{
					swimming: "controller.animation.zombie.swimming"
				}
			],
			render_controllers: [
				"controller.render.zombie_villager_v2_base",
				"controller.render.zombie_villager_v2_masked"
			],
			enable_attachables: true,
			spawn_egg: {
				texture: "spawn_egg",
				texture_index: 42
			}
		}
	}
}
};

var mcResourcePacks = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: data_rp
});

var data_bp = {
	"minecraft:allay": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:allay",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			pickup_item_delay: {
				"minecraft:timer": {
					looping: false,
					time: 3,
					time_down_event: {
						event: "pickup_item_delay_complete"
					}
				}
			},
			pickup_item: {
				"minecraft:behavior.pickup_items": {
					priority: 2,
					max_dist: 32,
					search_height: 32,
					goal_radius: 2.2,
					speed_multiplier: 6,
					pickup_based_on_chance: false,
					can_pickup_any_item: false,
					can_pickup_to_hand_or_equipment: false,
					pickup_same_items_as_in_hand: true
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"allay",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.35,
				height: 0.6
			},
			"minecraft:balloonable": {
				mass: 0.5
			},
			"minecraft:breathable": {
				totalSupply: 15,
				suffocateTime: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:health": {
				value: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:damage_sensor": {
				triggers: [
					{
						on_damage: {
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "is_owner",
										subject: "other",
										value: true
									}
								]
							}
						},
						deals_damage: false
					}
				]
			},
			"minecraft:movement": {
				value: 0.1
			},
			"minecraft:flying_speed": {
				value: 0.1
			},
			"minecraft:navigation.hover": {
				can_path_over_water: true,
				can_sink: false,
				can_pass_doors: false,
				can_path_from_air: true,
				avoid_water: true,
				avoid_damage_blocks: true,
				avoid_sun: false
			},
			"minecraft:movement.hover": {
			},
			"minecraft:follow_range": {
				value: 1024
			},
			"minecraft:ambient_sound_interval": {
				value: 5,
				range: 5,
				event_name: "ambient",
				event_names: [
					{
						event_name: "ambient.tame",
						condition: "query.is_using_item"
					},
					{
						event_name: "ambient",
						condition: "!query.is_using_item"
					}
				]
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_fly": {
			},
			"minecraft:physics": {
				has_gravity: false
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:vibration_listener": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:game_event_movement_tracking": {
				emit_flap: true
			},
			"minecraft:inventory": {
				inventory_size: 1
			},
			"minecraft:interact": {
				interactions: [
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									}
								]
							}
						},
						give_item: true,
						take_item: true,
						interact_text: "action.interact.allay"
					}
				]
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 2
			},
			"minecraft:behavior.go_and_give_items_to_noteblock": {
				priority: 3,
				run_speed: 8,
				throw_sound: "item_thrown",
				on_item_throw: [
					{
						event: "pickup_item_delay",
						target: "self"
					}
				]
			},
			"minecraft:behavior.go_and_give_items_to_owner": {
				priority: 4,
				run_speed: 8,
				throw_sound: "item_thrown",
				on_item_throw: [
					{
						event: "pickup_item_delay",
						target: "self"
					}
				]
			},
			"minecraft:behavior.stay_near_noteblock": {
				priority: 5,
				speed: 8,
				start_distance: 16,
				stop_distance: 4
			},
			"minecraft:behavior.follow_owner": {
				priority: 6,
				speed_multiplier: 8,
				start_distance: 16,
				stop_distance: 4,
				can_teleport: false,
				ignore_vibration: false
			},
			"minecraft:behavior.float": {
				priority: 7
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				target_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:behavior.random_hover": {
				priority: 9,
				xz_dist: 8,
				y_dist: 8,
				y_offset: -1,
				interval: 1,
				hover_height: [
					1,
					4
				]
			}
		},
		events: {
			pickup_item_delay: {
				remove: {
					component_groups: [
						"pickup_item"
					]
				},
				add: {
					component_groups: [
						"pickup_item_delay"
					]
				}
			},
			pickup_item_delay_complete: {
				remove: {
					component_groups: [
						"pickup_item_delay"
					]
				},
				add: {
					component_groups: [
						"pickup_item"
					]
				}
			},
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"pickup_item"
					]
				}
			}
		}
	}
},
	"minecraft:area_effect_cloud": {
	format_version: "1.8.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:area_effect_cloud",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		components: {
			"minecraft:physics": {
				has_collision: false
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		}
	}
},
	"minecraft:armor_stand": {
	format_version: "1.16.210",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:armor_stand",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:type_family": {
				family: [
					"armor_stand",
					"inanimate",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.5,
				height: 1.975
			},
			"minecraft:health": {
				value: 6,
				max: 6
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:knockback_resistance": {
				value: 1
			},
			"minecraft:loot": {
				table: "loot_tables/entities/armor_stand.json"
			},
			"minecraft:nameable": {
			},
			"minecraft:persistent": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: false,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
		}
	}
},
	"minecraft:arrow": {
	format_version: "1.13.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:arrow",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:hard_arrow": {
				"minecraft:projectile": {
					on_hit: {
						impact_damage: {
							damage: [
								1,
								5
							],
							knockback: true,
							semi_random_diff_damage: false,
							destroy_on_hit: true
						},
						stick_in_ground: {
							shake_time: 0.35
						},
						arrow_effect: {
						}
					},
					hit_sound: "bow.hit",
					power: 1.6,
					gravity: 0.05,
					uncertainty_base: 16,
					uncertainty_multiplier: 4,
					anchor: 1,
					should_bounce: true,
					offset: [
						0,
						-0.1,
						0
					]
				}
			},
			"minecraft:player_arrow": {
				"minecraft:projectile": {
					on_hit: {
						impact_damage: {
							damage: 1,
							knockback: true,
							semi_random_diff_damage: true,
							destroy_on_hit: true,
							max_critical_damage: 10,
							min_critical_damage: 9,
							power_multiplier: 0.97
						},
						stick_in_ground: {
							shake_time: 0.35
						},
						arrow_effect: {
						}
					},
					hit_sound: "bow.hit",
					power: 5,
					gravity: 0.05,
					uncertainty_base: 1,
					uncertainty_multiplier: 0,
					anchor: 1,
					should_bounce: true,
					offset: [
						0,
						-0.1,
						0
					]
				}
			},
			"minecraft:pillager_arrow": {
				"minecraft:projectile": {
					on_hit: {
						impact_damage: {
							damage: [
								3,
								6
							],
							knockback: true,
							semi_random_diff_damage: false,
							destroy_on_hit: true
						},
						stick_in_ground: {
							shake_time: 0.35
						},
						arrow_effect: {
						}
					},
					hit_sound: "bow.hit",
					power: 1.6,
					gravity: 0.05,
					uncertainty_base: 16,
					uncertainty_multiplier: 4,
					anchor: 1,
					should_bounce: true,
					offset: [
						0,
						-0.1,
						0
					]
				}
			}
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:projectile": {
				on_hit: {
					impact_damage: {
						damage: [
							1,
							4
						],
						knockback: true,
						semi_random_diff_damage: false,
						destroy_on_hit: true
					},
					stick_in_ground: {
						shake_time: 0.35
					},
					arrow_effect: {
					}
				},
				hit_sound: "bow.hit",
				power: 1.6,
				gravity: 0.05,
				uncertainty_base: 16,
				uncertainty_multiplier: 4,
				anchor: 1,
				should_bounce: true,
				offset: [
					0,
					-0.1,
					0
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: false,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						filters: {
							test: "is_difficulty",
							value: "hard"
						},
						add: {
							component_groups: [
								"minecraft:hard_arrow"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						add: {
							component_groups: [
								"minecraft:player_arrow"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "pillager"
						},
						add: {
							component_groups: [
								"minecraft:pillager_arrow"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:axolotl": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:axolotl",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			attack_cooldown: {
				"minecraft:attack_cooldown": {
					attack_cooldown_time: 120,
					attack_cooldown_complete_event: {
						event: "attack_cooldown_complete_event",
						target: "self"
					}
				}
			},
			axolotl_lucy: {
				"minecraft:variant": {
					value: 0
				}
			},
			axolotl_cyan: {
				"minecraft:variant": {
					value: 1
				}
			},
			axolotl_gold: {
				"minecraft:variant": {
					value: 2
				}
			},
			axolotl_wild: {
				"minecraft:variant": {
					value: 3
				}
			},
			axolotl_blue: {
				"minecraft:variant": {
					value: 4
				}
			},
			axolotl_baby: {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: "tropical_fish_bucket",
					transform_to_item: "water_bucket:0",
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 5,
					speed_multiplier: 1.1
				}
			},
			axolotl_adult: {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:behavior.breed": {
					priority: 1,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: false,
					breed_items: "tropical_fish_bucket",
					transform_to_item: "water_bucket:0",
					breeds_with: {
						mate_type: "minecraft:axolotl",
						baby_type: "minecraft:axolotl",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					mutation_factor: {
						variant: 0.00083
					}
				}
			},
			axolotl_in_water: {
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								test: "in_water",
								operator: "!=",
								value: true
							},
							event: "start_drying_out"
						}
					]
				}
			},
			axolotl_dried: {
				"minecraft:damage_over_time": {
					damage_per_hurt: 1,
					time_between_hurt: 0
				}
			},
			axolotl_on_land: {
				"minecraft:drying_out_timer": {
					total_time: 300,
					water_bottle_refill_time: 90,
					dried_out_event: {
						event: "dried_out"
					},
					stopped_drying_out_event: {
						event: "stop_drying_out"
					},
					recover_after_dried_out_event: {
						event: "recover_after_dried_out"
					}
				}
			},
			axolotl_on_land_in_rain: {
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								test: "in_water_or_rain",
								operator: "!=",
								value: true
							},
							event: "start_drying_out"
						},
						{
							filters: {
								test: "in_water",
								operator: "==",
								value: true
							},
							event: "enter_water"
						}
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"axolotl",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.75,
				height: 0.42
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true,
				breathes_air: true,
				generates_bubbles: false
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 14
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "lightning",
					deals_damage: true,
					damage_multiplier: 2000
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:navigation.generic": {
				is_amphibious: true,
				can_path_over_water: true,
				can_swim: true,
				can_walk: true,
				can_sink: false,
				avoid_damage_blocks: true
			},
			"minecraft:movement.amphibious": {
				max_turn: 15
			},
			"minecraft:movement": {
				value: 0.1
			},
			"minecraft:underwater_movement": {
				value: 0.2
			},
			"minecraft:jump.static": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:attack": {
				damage: 2
			},
			"minecraft:combat_regeneration": {
			},
			"minecraft:behavior.play_dead": {
				priority: 0,
				duration: 10,
				force_below_health: 8,
				random_start_chance: 0.33,
				random_damage_range: [
					0,
					2
				],
				damage_sources: [
					"contact",
					"entity_attack",
					"entity_explosion",
					"magic",
					"projectile",
					"thorns",
					"wither"
				],
				apply_regeneration: true,
				filters: {
					test: "in_water",
					operator: "==",
					value: true
				}
			},
			"minecraft:behavior.tempt": {
				priority: 2,
				speed_multiplier: 1.1,
				can_tempt_vertically: true,
				items: [
					"tropical_fish_bucket"
				]
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 3,
				must_see: true,
				reselect_targets: true,
				within_radius: 20,
				must_see_forget_duration: 17,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "in_water",
									subject: "other",
									value: true
								},
								{
									test: "has_component",
									subject: "self",
									operator: "!=",
									value: "minecraft:attack_cooldown"
								},
								{
									any_of: [
										{
											test: "is_family",
											subject: "other",
											value: "squid"
										},
										{
											test: "is_family",
											subject: "other",
											value: "fish"
										},
										{
											test: "is_family",
											subject: "other",
											value: "tadpole"
										}
									]
								}
							]
						},
						max_dist: 8
					},
					{
						filters: {
							all_of: [
								{
									test: "in_water",
									subject: "other",
									value: true
								},
								{
									any_of: [
										{
											test: "is_family",
											subject: "other",
											value: "drowned"
										},
										{
											test: "is_family",
											subject: "other",
											value: "guardian"
										},
										{
											test: "is_family",
											subject: "other",
											value: "guardian_elder"
										}
									]
								}
							]
						},
						max_dist: 8
					}
				]
			},
			"minecraft:behavior.melee_attack": {
				priority: 4,
				on_kill: {
					event: "killed_enemy_event",
					target: "self"
				}
			},
			"minecraft:behavior.move_to_water": {
				priority: 6,
				search_range: 16,
				search_height: 5,
				search_count: 1,
				goal_radius: 0.1
			},
			"minecraft:behavior.swim_idle": {
				priority: 7,
				idle_time: 5,
				success_rate: 0.05
			},
			"minecraft:behavior.random_swim": {
				priority: 8,
				interval: 0,
				xz_dist: 30,
				y_dist: 15
			},
			"minecraft:behavior.random_stroll": {
				priority: 9,
				interval: 100
			},
			"minecraft:behavior.look_at_player": {
				priority: 10,
				target_distance: 6,
				probability: 0.02
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						add: {
							component_groups: [
								"axolotl_adult",
								"axolotl_in_water"
							]
						}
					},
					{
						randomize: [
							{
								weight: 25,
								add: {
									component_groups: [
										"axolotl_cyan"
									]
								}
							},
							{
								weight: 25,
								add: {
									component_groups: [
										"axolotl_gold"
									]
								}
							},
							{
								weight: 25,
								add: {
									component_groups: [
										"axolotl_lucy"
									]
								}
							},
							{
								weight: 25,
								add: {
									component_groups: [
										"axolotl_wild"
									]
								}
							}
						]
					}
				]
			},
			attack_cooldown_complete_event: {
				remove: {
					component_groups: [
						"attack_cooldown"
					]
				}
			},
			killed_enemy_event: {
				add: {
					component_groups: [
						"attack_cooldown"
					]
				}
			},
			"minecraft:entity_born": {
				sequence: [
					{
						remove: {
							component_groups: [
								"axolotl_adult"
							]
						},
						add: {
							component_groups: [
								"axolotl_baby",
								"axolotl_in_water"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						add: {
							component_groups: [
								"axolotl_blue"
							]
						}
					}
				]
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"axolotl_baby"
					]
				},
				add: {
					component_groups: [
						"axolotl_adult"
					]
				}
			},
			stop_drying_out: {
				remove: {
					component_groups: [
						"axolotl_on_land",
						"axolotl_dried"
					]
				},
				add: {
					component_groups: [
						"axolotl_on_land_in_rain"
					]
				}
			},
			start_drying_out: {
				remove: {
					component_groups: [
						"axolotl_on_land_in_rain",
						"axolotl_in_water"
					]
				},
				add: {
					component_groups: [
						"axolotl_on_land"
					]
				}
			},
			dried_out: {
				add: {
					component_groups: [
						"axolotl_dried"
					]
				}
			},
			recover_after_dried_out: {
				remove: {
					component_groups: [
						"axolotl_dried"
					]
				}
			},
			enter_water: {
				remove: {
					component_groups: [
						"axolotl_on_land",
						"axolotl_on_land_in_rain",
						"axolotl_dried"
					]
				},
				add: {
					component_groups: [
						"axolotl_in_water"
					]
				}
			}
		}
	}
},
	"minecraft:bat": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:bat",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"bat",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 0.5,
				height: 0.9
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.1
			},
			"minecraft:navigation.float": {
				can_path_over_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.float_wander": {
				xz_dist: 10,
				y_dist: 7,
				y_offset: -2,
				random_reselect: true,
				float_duration: [
					0.1,
					0.35
				]
			},
			"minecraft:can_fly": {
			},
			"minecraft:health": {
				value: 6,
				max: 6
			},
			"minecraft:nameable": {
			},
			"minecraft:physics": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:game_event_movement_tracking": {
				emit_flap: true
			}
		},
		events: {
		}
	}
},
	"minecraft:bee": {
	format_version: "1.18.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:bee",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			bee_baby: {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"minecraft:red_flower",
						"minecraft:yellow_flower",
						"minecraft:wither_rose",
						"minecraft:double_plant:0",
						"minecraft:double_plant:1",
						"minecraft:double_plant:4",
						"minecraft:double_plant:5",
						"minecraft:flowering_azalea",
						"minecraft:azalea_leaves_flowered",
						"minecraft:mangrove_propagule"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 11,
					speed_multiplier: 1.1
				}
			},
			bee_adult: {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:behavior.breed": {
					priority: 4,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: false,
					breeds_with: {
						mate_type: "minecraft:bee",
						baby_type: "minecraft:bee",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					breed_items: [
						"minecraft:red_flower",
						"minecraft:yellow_flower",
						"minecraft:wither_rose",
						"minecraft:double_plant:0",
						"minecraft:double_plant:1",
						"minecraft:double_plant:4",
						"minecraft:double_plant:5",
						"minecraft:flowering_azalea",
						"minecraft:azalea_leaves_flowered",
						"minecraft:mangrove_propagule"
					]
				}
			},
			track_attacker: {
				"minecraft:behavior.hurt_by_target": {
					priority: 1
				}
			},
			angry_bee: {
				"minecraft:angry": {
					duration: 25,
					broadcastAnger: true,
					broadcastRange: 20,
					broadcast_filters: {
						test: "is_family",
						operator: "!=",
						value: "pacified"
					},
					calm_event: {
						event: "calmed_down",
						target: "self"
					}
				},
				"minecraft:behavior.melee_attack": {
					priority: 2,
					attack_once: true,
					speed_multiplier: 1.4,
					on_attack: {
						event: "countdown_to_perish_event",
						target: "self"
					}
				}
			},
			escape_fire: {
				"minecraft:behavior.panic": {
					priority: 1,
					speed_multiplier: 1.25,
					force: true
				},
				"minecraft:timer": {
					looping: false,
					time: [
						20,
						50
					],
					randomInterval: true,
					time_down_event: {
						event: "stop_panicking_after_fire",
						target: "self"
					}
				}
			},
			countdown_to_perish: {
				"minecraft:mark_variant": {
					value: 1
				},
				"minecraft:behavior.panic": {
					priority: 1,
					speed_multiplier: 1.25,
					force: true
				},
				"minecraft:timer": {
					looping: false,
					time: [
						10,
						60
					],
					randomInterval: true,
					time_down_event: {
						event: "perish_event",
						target: "self"
					}
				},
				"minecraft:type_family": {
					family: [
						"bee",
						"mob",
						"arthropod",
						"pacified"
					]
				}
			},
			perish: {
				"minecraft:hurt_on_condition": {
					damage_conditions: [
						{
							cause: "none",
							damage_per_tick: 999
						}
					]
				}
			},
			take_nearest_target: {
				"minecraft:behavior.nearest_attackable_target": {
					priority: 2,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "player"
							},
							max_dist: 10
						}
					]
				},
				"minecraft:timer": {
					looping: true,
					time: 5,
					time_down_event: {
						event: "calmed_down",
						target: "self"
					}
				}
			},
			look_for_food: {
				"minecraft:behavior.move_to_block": {
					priority: 10,
					tick_interval: 1,
					start_chance: 0.5,
					search_range: 6,
					search_height: 4,
					goal_radius: 1,
					stay_duration: 20,
					target_selection_method: "random",
					target_offset: [
						0,
						0.25,
						0
					],
					target_block_filters: {
						test: "is_waterlogged",
						subject: "block",
						operator: "==",
						value: false
					},
					target_blocks: [
						"minecraft:red_flower",
						"minecraft:yellow_flower",
						"minecraft:wither_rose",
						"minecraft:double_plant:8",
						"minecraft:double_plant:9",
						"minecraft:double_plant:12",
						"minecraft:double_plant:13",
						"minecraft:flowering_azalea",
						"minecraft:azalea_leaves_flowered",
						"minecraft:mangrove_propagule"
					],
					on_stay_completed: [
						{
							event: "collected_nectar",
							target: "self"
						}
					]
				},
				"minecraft:timer": {
					looping: true,
					time: 180,
					time_down_event: {
						event: "find_flower_timeout"
					}
				},
				"minecraft:ambient_sound_interval": {
					event_name: "ambient.pollinate",
					range: 3,
					value: 2
				}
			},
			has_nectar: {
				"minecraft:is_charged": {
				},
				"minecraft:grows_crop": {
					charges: 10,
					chance: 0.03
				}
			},
			return_to_home: {
				"minecraft:behavior.go_home": {
					priority: 4,
					speed_multiplier: 1,
					interval: 1,
					goal_radius: 1.2,
					on_home: [
						{
							filters: {
								any_of: [
									{
										test: "is_block",
										subject: "block",
										value: "minecraft:bee_nest"
									},
									{
										test: "is_block",
										subject: "block",
										value: "minecraft:beehive"
									}
								]
							},
							event: "minecraft:bee_returned_to_hive",
							target: "block"
						},
						{
							filters: {
								all_of: [
									{
										test: "is_block",
										subject: "block",
										operator: "!=",
										value: "minecraft:bee_nest"
									},
									{
										test: "is_block",
										subject: "block",
										operator: "!=",
										value: "minecraft:beehive"
									}
								]
							},
							event: "find_hive_event",
							target: "self"
						}
					],
					on_failed: [
						{
							event: "find_hive_event",
							target: "self"
						}
					]
				}
			},
			find_hive: {
				"minecraft:behavior.move_to_block": {
					priority: 10,
					search_range: 16,
					search_height: 10,
					tick_interval: 1,
					goal_radius: 0.633,
					target_blocks: [
						"bee_nest",
						"beehive"
					],
					on_reach: [
						{
							event: "minecraft:bee_returned_to_hive",
							target: "block"
						}
					]
				},
				"minecraft:timer": {
					looping: false,
					time: 180,
					time_down_event: {
						event: "find_hive_timeout",
						target: "self"
					}
				}
			},
			hive_full: {
				"minecraft:timer": {
					looping: false,
					time: [
						5,
						20
					],
					randomInterval: true,
					time_down_event: {
						event: "find_hive_event",
						target: "self"
					}
				}
			},
			shelter_detection: {
				"minecraft:environment_sensor": {
					triggers: [
						{
							event: "seek_shelter",
							filters: {
								all_of: [
									{
										any_of: [
											{
												test: "is_daytime",
												value: false
											},
											{
												test: "weather",
												operator: "==",
												value: "precipitation"
											}
										]
									},
									{
										test: "has_component",
										value: "minecraft:is_charged",
										operator: "!="
									},
									{
										test: "has_biome_tag",
										value: "overworld"
									}
								]
							}
						}
					]
				}
			},
			abort_shelter_detection: {
				"minecraft:environment_sensor": {
					triggers: [
						{
							event: "abort_sheltering",
							filters: {
								all_of: [
									{
										test: "weather",
										operator: "==",
										value: "clear"
									},
									{
										test: "is_daytime",
										value: true
									}
								]
							}
						}
					]
				}
			},
			easy_attack: {
				"minecraft:attack": {
					damage: 2
				}
			},
			normal_attack: {
				"minecraft:attack": {
					damage: 2,
					effect_name: "poison",
					effect_duration: 10
				}
			},
			hard_attack: {
				"minecraft:attack": {
					damage: 2,
					effect_name: "poison",
					effect_duration: 18
				}
			},
			default_sound: {
				"minecraft:ambient_sound_interval": {
					event_name: "ambient",
					range: 0,
					value: 0
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:behavior.tempt": {
				priority: 5,
				speed_multiplier: 1.25,
				within_radius: 8,
				can_tempt_vertically: true,
				items: [
					"minecraft:red_flower",
					"minecraft:yellow_flower",
					"minecraft:wither_rose",
					"minecraft:double_plant:0",
					"minecraft:double_plant:1",
					"minecraft:double_plant:4",
					"minecraft:double_plant:5",
					"minecraft:flowering_azalea",
					"minecraft:azalea_leaves_flowered",
					"minecraft:mangrove_propagule"
				]
			},
			"minecraft:behavior.move_towards_home_restriction": {
				priority: 9
			},
			"minecraft:behavior.random_hover": {
				priority: 12,
				xz_dist: 8,
				y_dist: 8,
				y_offset: -1,
				interval: 1,
				hover_height: [
					1,
					4
				]
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 0.5
			},
			"minecraft:behavior.float": {
				priority: 19
			},
			"minecraft:type_family": {
				family: [
					"bee",
					"mob",
					"arthropod"
				]
			},
			"minecraft:on_target_acquired": {
				event: "attacked",
				target: "self"
			},
			"minecraft:breathable": {
				totalSupply: 15,
				suffocateTime: 0
			},
			"minecraft:collision_box": {
				width: 0.55,
				height: 0.5
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:game_event_movement_tracking": {
				emit_flap: true
			},
			"minecraft:home": {
				restriction_radius: 22,
				home_block_list: [
					"minecraft:bee_nest",
					"minecraft:beehive"
				]
			},
			"minecraft:follow_range": {
				value: 1024
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:flying_speed": {
				value: 0.15
			},
			"minecraft:navigation.hover": {
				can_path_over_water: true,
				can_sink: false,
				can_pass_doors: false,
				can_path_from_air: true,
				avoid_water: true,
				avoid_damage_blocks: true,
				avoid_sun: false
			},
			"minecraft:movement.hover": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_fly": {
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:nameable": {
			},
			"minecraft:block_sensor": {
				sensor_radius: 16,
				sources: [
					{
						test: "has_silk_touch",
						subject: "other",
						value: false
					}
				],
				on_break: [
					{
						block_list: [
							"minecraft:beehive",
							"minecraft:bee_nest"
						],
						on_block_broken: "hive_destroyed"
					}
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 95,
								add: {
									component_groups: [
										"bee_adult"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"bee_baby"
									]
								}
							}
						]
					},
					{
						add: {
							component_groups: [
								"track_attacker",
								"shelter_detection",
								"look_for_food"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"bee_baby",
						"shelter_detection",
						"track_attacker",
						"look_for_food"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"bee_baby"
					]
				},
				add: {
					component_groups: [
						"bee_adult"
					]
				}
			},
			"minecraft:exited_disturbed_hive": {
				add: {
					component_groups: [
						"take_nearest_target"
					]
				},
				remove: {
					component_groups: [
						"find_hive",
						"return_to_home",
						"has_nectar",
						"abort_shelter_detection",
						"shelter_detection",
						"escape_fire"
					]
				}
			},
			hive_destroyed: {
				sequence: [
					{
						filters: {
							test: "is_family",
							subject: "self",
							operator: "!=",
							value: "pacified"
						},
						add: {
							component_groups: [
								"take_nearest_target"
							]
						},
						remove: {
							component_groups: [
								"escape_fire"
							]
						}
					}
				]
			},
			stop_panicking_after_fire: {
				remove: {
					component_groups: [
						"escape_fire"
					]
				}
			},
			"minecraft:exited_hive_on_fire": {
				add: {
					component_groups: [
						"escape_fire"
					]
				}
			},
			"minecraft:exited_hive": {
				add: {
					component_groups: [
						"look_for_food",
						"shelter_detection"
					]
				},
				remove: {
					component_groups: [
						"find_hive",
						"return_to_home",
						"has_nectar",
						"abort_shelter_detection"
					]
				}
			},
			"minecraft:hive_full": {
				add: {
					component_groups: [
						"hive_full"
					]
				},
				remove: {
					component_groups: [
						"find_hive",
						"return_to_home"
					]
				}
			},
			attacked: {
				sequence: [
					{
						add: {
							component_groups: [
								"angry_bee"
							]
						},
						remove: {
							component_groups: [
								"take_nearest_target"
							]
						}
					},
					{
						filters: {
							test: "is_difficulty",
							value: "easy"
						},
						remove: {
							component_groups: [
								"normal_attack",
								"hard_attack"
							]
						},
						add: {
							component_groups: [
								"easy_attack"
							]
						}
					},
					{
						filters: {
							test: "is_difficulty",
							value: "normal"
						},
						remove: {
							component_groups: [
								"easy_attack",
								"hard_attack"
							]
						},
						add: {
							component_groups: [
								"normal_attack"
							]
						}
					},
					{
						filters: {
							test: "is_difficulty",
							value: "hard"
						},
						remove: {
							component_groups: [
								"easy_attack",
								"normal_attack"
							]
						},
						add: {
							component_groups: [
								"hard_attack"
							]
						}
					}
				]
			},
			calmed_down: {
				add: {
					component_groups: [
						"shelter_detection",
						"return_to_home"
					]
				},
				remove: {
					component_groups: [
						"angry_bee",
						"take_nearest_target"
					]
				}
			},
			collected_nectar: {
				remove: {
					component_groups: [
						"look_for_food"
					]
				},
				add: {
					component_groups: [
						"return_to_home",
						"has_nectar",
						"default_sound"
					]
				}
			},
			find_hive_event: {
				remove: {
					component_groups: [
						"return_to_home",
						"hive_full"
					]
				},
				add: {
					component_groups: [
						"find_hive"
					]
				}
			},
			find_hive_timeout: {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:is_charged"
						},
						remove: {
							component_groups: [
								"find_hive",
								"escape_fire"
							]
						},
						add: {
							component_groups: [
								"look_for_food"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							value: "minecraft:is_charged"
						},
						remove: {
							component_groups: [
								"find_hive"
							]
						},
						add: {
							component_groups: [
								"return_to_home"
							]
						}
					}
				]
			},
			find_flower_timeout: {
				remove: {
					component_groups: [
						"look_for_food"
					]
				},
				add: {
					component_groups: [
						"return_to_home"
					]
				}
			},
			seek_shelter: {
				remove: {
					component_groups: [
						"look_for_food",
						"collect_nectar",
						"shelter_detection"
					]
				},
				add: {
					component_groups: [
						"default_sound",
						"return_to_home",
						"abort_shelter_detection"
					]
				}
			},
			abort_sheltering: {
				remove: {
					component_groups: [
						"abort_shelter_detection",
						"return_to_home",
						"escape_fire"
					]
				},
				add: {
					component_groups: [
						"shelter_detection",
						"look_for_food"
					]
				}
			},
			countdown_to_perish_event: {
				remove: {
					component_groups: [
						"collect_nectar",
						"track_attacker",
						"take_nearest_target",
						"look_for_food",
						"angry_bee",
						"hive_full",
						"find_hive",
						"escape_fire"
					]
				},
				add: {
					component_groups: [
						"countdown_to_perish"
					]
				}
			},
			perish_event: {
				add: {
					component_groups: [
						"perish"
					]
				}
			}
		}
	}
},
	"minecraft:blaze": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:blaze",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			mode_switcher: {
				"minecraft:target_nearby_sensor": {
					inside_range: 2,
					outside_range: 3,
					must_see: true,
					on_inside_range: {
						event: "switch_to_melee",
						target: "self"
					},
					on_outside_range: {
						event: "switch_to_ranged",
						target: "self"
					}
				}
			},
			ranged_mode: {
				"minecraft:shooter": {
					def: "minecraft:small_fireball"
				},
				"minecraft:behavior.ranged_attack": {
					priority: 3,
					burst_shots: 3,
					burst_interval: 0.3,
					charge_charged_trigger: 0,
					charge_shoot_trigger: 4,
					attack_interval_min: 3,
					attack_interval_max: 5,
					attack_radius: 16
				}
			},
			melee_mode: {
				"minecraft:attack": {
					damage: 6
				},
				"minecraft:behavior.melee_attack": {
					priority: 3
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 10 : 0"
			},
			"minecraft:loot": {
				table: "loot_tables/entities/blaze.json"
			},
			"minecraft:collision_box": {
				width: 0.5,
				height: 1.8
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:movement": {
				value: 0.23
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_contact_with_water",
							operator: "==",
							value: true
						},
						cause: "drowning",
						damage_per_tick: 1
					}
				]
			},
			"minecraft:follow_range": {
				value: 48,
				max: 48
			},
			"minecraft:fire_immune": {
			},
			"minecraft:nameable": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				must_see: true,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 48
					}
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 4,
				speed_multiplier: 1
			},
			"minecraft:behavior.random_look_around": {
				priority: 5
			},
			"minecraft:type_family": {
				family: [
					"blaze",
					"monster",
					"mob"
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:on_hurt": {
				event: "minecraft:on_hurt_event",
				target: "self"
			},
			"minecraft:on_hurt_by_player": {
				event: "minecraft:on_hurt_event",
				target: "self"
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"mode_switcher"
					]
				}
			},
			switch_to_melee: {
				remove: {
					component_groups: [
						"ranged_mode"
					]
				},
				add: {
					component_groups: [
						"melee_mode"
					]
				}
			},
			switch_to_ranged: {
				remove: {
					component_groups: [
						"melee_mode"
					]
				},
				add: {
					component_groups: [
						"ranged_mode"
					]
				}
			},
			"minecraft:on_hurt_event": {
				add: {
					component_groups: [
						"mode_switcher"
					]
				}
			}
		}
	}
},
	"minecraft:boat": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:boat",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:floating": {
				"minecraft:buoyant": {
					base_buoyancy: 1,
					apply_gravity: true,
					simulate_waves: true,
					big_wave_probability: 0.03,
					big_wave_speed: 10,
					liquid_blocks: [
						"minecraft:water",
						"minecraft:flowing_water"
					]
				}
			},
			"minecraft:can_ride": {
				"minecraft:rideable": {
					seat_count: 2,
					interact_text: "action.interact.ride.boat",
					pull_in_entities: true,
					seats: [
						{
							position: [
								0,
								-0.2,
								0
							],
							min_rider_count: 0,
							max_rider_count: 1,
							rotate_rider_by: -90,
							lock_rider_rotation: 90
						},
						{
							position: [
								0.2,
								-0.2,
								0
							],
							min_rider_count: 2,
							max_rider_count: 2,
							rotate_rider_by: "query.has_any_family('blaze', 'creeper', 'enderman', 'illager', 'magmacube', 'piglin', 'player', 'skeleton', 'slime', 'villager', 'wandering_trader', 'witch', 'zombie', 'zombie_pigman') ? -90 : 0",
							lock_rider_rotation: 90
						},
						{
							position: [
								-0.6,
								-0.2,
								0
							],
							min_rider_count: 2,
							max_rider_count: 2,
							rotate_rider_by: "query.has_any_family('blaze', 'creeper', 'enderman', 'illager', 'magmacube', 'piglin', 'player', 'skeleton', 'slime', 'villager', 'wandering_trader', 'witch', 'zombie', 'zombie_pigman') ? -90 : 0",
							lock_rider_rotation: 90
						}
					]
				}
			},
			"minecraft:above_bubble_column_down": {
				"minecraft:buoyant": {
					base_buoyancy: 1,
					apply_gravity: true,
					simulate_waves: false,
					liquid_blocks: [
						"minecraft:water",
						"minecraft:flowing_water"
					],
					drag_down_on_buoyancy_removed: 0.7
				},
				"minecraft:timer": {
					looping: false,
					time: 3,
					time_down_event: {
						event: "minecraft:sink",
						target: "self"
					}
				},
				"minecraft:out_of_control": {
				}
			},
			"minecraft:above_bubble_column_up": {
				"minecraft:buoyant": {
					base_buoyancy: 1,
					apply_gravity: true,
					simulate_waves: false,
					liquid_blocks: [
						"minecraft:water",
						"minecraft:flowing_water"
					],
					drag_down_on_buoyancy_removed: 0.7
				},
				"minecraft:out_of_control": {
				}
			}
		},
		components: {
			"minecraft:type_family": {
				family: [
					"boat",
					"inanimate"
				]
			},
			"minecraft:collision_box": {
				width: 1.4,
				height: 0.455
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/boat.json"
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:rideable": {
				seat_count: 2,
				interact_text: "action.interact.ride.boat",
				pull_in_entities: true,
				seats: [
					{
						position: [
							0,
							-0.2,
							0
						],
						min_rider_count: 0,
						max_rider_count: 1,
						rotate_rider_by: -90,
						lock_rider_rotation: 90
					},
					{
						position: [
							0.2,
							-0.2,
							0
						],
						min_rider_count: 2,
						max_rider_count: 2,
						rotate_rider_by: "query.has_any_family('blaze', 'creeper', 'enderman', 'illager', 'magmacube', 'piglin', 'player', 'skeleton', 'slime', 'villager', 'wandering_trader', 'witch', 'zombie', 'zombie_pigman') ? -90 : 0",
						lock_rider_rotation: 90
					},
					{
						position: [
							-0.6,
							-0.2,
							0
						],
						min_rider_count: 2,
						max_rider_count: 2,
						rotate_rider_by: "query.has_any_family('blaze', 'creeper', 'enderman', 'illager', 'magmacube', 'piglin', 'player', 'skeleton', 'slime', 'villager', 'wandering_trader', 'witch', 'zombie', 'zombie_pigman') ? -90 : 0",
						lock_rider_rotation: 90
					}
				]
			},
			"minecraft:is_stackable": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:buoyant": {
				base_buoyancy: 1,
				apply_gravity: true,
				simulate_waves: true,
				big_wave_probability: 0.03,
				big_wave_speed: 10,
				liquid_blocks: [
					"minecraft:water",
					"minecraft:flowing_water"
				]
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 60,
					max_dropped_ticks: 20,
					use_motion_prediction_hints: true
				},
				conditional_values: [
					{
						max_optimized_distance: 0,
						max_dropped_ticks: 0,
						use_motion_prediction_hints: true,
						conditional_values: [
							{
								test: "is_moving",
								subject: "self",
								operator: "==",
								value: true
							}
						]
					}
				]
			},
			"minecraft:inside_block_notifier": {
				block_list: [
					{
						block: {
							name: "minecraft:bubble_column",
							states: {
								drag_down: true
							}
						},
						entered_block_event: {
							event: "minecraft:entered_bubble_column_down",
							target: "self"
						},
						exited_block_event: {
							event: "minecraft:exited_bubble_column",
							target: "self"
						}
					},
					{
						block: {
							name: "minecraft:bubble_column",
							states: {
								drag_down: false
							}
						},
						entered_block_event: {
							event: "minecraft:entered_bubble_column_up",
							target: "self"
						},
						exited_block_event: {
							event: "minecraft:exited_bubble_column",
							target: "self"
						}
					}
				]
			}
		},
		events: {
			"minecraft:entered_bubble_column_down": {
				remove: {
					component_groups: [
						"minecraft:floating"
					]
				},
				add: {
					component_groups: [
						"minecraft:above_bubble_column_down"
					]
				}
			},
			"minecraft:entered_bubble_column_up": {
				remove: {
					component_groups: [
						"minecraft:floating"
					]
				},
				add: {
					component_groups: [
						"minecraft:above_bubble_column_up"
					]
				}
			},
			"minecraft:exited_bubble_column": {
				remove: {
					component_groups: [
						"minecraft:above_bubble_column_down",
						"minecraft:above_bubble_column_up"
					]
				},
				add: {
					component_groups: [
						"minecraft:floating",
						"minecraft:can_ride"
					]
				}
			},
			"minecraft:sink": {
				remove: {
					component_groups: [
						"minecraft:floating",
						"minecraft:can_ride",
						"minecraft:above_bubble_column_down",
						"minecraft:above_bubble_column_up"
					]
				}
			}
		}
	}
},
	"minecraft:cat": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:cat",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:cat_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.4
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"fish",
						"salmon"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				}
			},
			"minecraft:cat_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/cat.json"
				},
				"minecraft:scale": {
					value: 0.8
				},
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: true,
					require_full_health: true,
					allow_sitting: true,
					breeds_with: {
						mate_type: "minecraft:cat",
						baby_type: "minecraft:cat",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					breed_items: [
						"fish",
						"salmon"
					]
				}
			},
			"minecraft:cat_wild": {
				"minecraft:health": {
					value: 10,
					max: 10
				},
				"minecraft:tameable": {
					probability: 0.33,
					tame_items: [
						"fish",
						"salmon"
					],
					tame_event: {
						event: "minecraft:on_tame",
						target: "self"
					}
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							0.35,
							0
						]
					}
				},
				"minecraft:behavior.nearest_attackable_target": {
					priority: 1,
					reselect_targets: true,
					within_radius: 16,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "rabbit"
							},
							max_dist: 8
						},
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "baby_turtle"
									},
									{
										test: "in_water",
										subject: "other",
										operator: "!=",
										value: true
									}
								]
							},
							max_dist: 8
						}
					]
				},
				"minecraft:behavior.tempt": {
					priority: 5,
					speed_multiplier: 0.5,
					within_radius: 16,
					can_get_scared: true,
					items: [
						"fish",
						"salmon"
					]
				},
				"minecraft:behavior.avoid_mob_type": {
					priority: 6,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "player"
							},
							max_dist: 10,
							walk_speed_multiplier: 0.8,
							sprint_speed_multiplier: 1.33
						}
					]
				},
				"minecraft:behavior.move_towards_dwelling_restriction": {
					priority: 7
				}
			},
			"minecraft:cat_tame": {
				"minecraft:is_tamed": {
				},
				"minecraft:health": {
					value: 20,
					max: 20
				},
				"minecraft:color": {
					value: 14
				},
				"minecraft:sittable": {
				},
				"minecraft:behavior.tempt": {
					priority: 5,
					speed_multiplier: 0.5,
					within_radius: 16,
					items: [
						"fish",
						"salmon"
					]
				},
				"minecraft:is_dyeable": {
					interact_text: "action.interact.dye"
				},
				"minecraft:behavior.follow_owner": {
					priority: 4,
					speed_multiplier: 1,
					start_distance: 10,
					stop_distance: 2
				},
				"minecraft:behavior.stay_while_sitting": {
					priority: 3
				},
				"minecraft:behavior.ocelot_sit_on_block": {
					priority: 7,
					speed_multiplier: 1
				},
				"minecraft:behavior.pet_sleep_with_owner": {
					priority: 2,
					speed_multiplier: 1.2,
					search_radius: 10,
					search_height: 10,
					goal_radius: 1
				},
				"minecraft:on_wake_with_owner": {
					event: "minecraft:pet_slept_with_owner",
					target: "self"
				}
			},
			"minecraft:cat_gift_for_owner": {
				"minecraft:behavior.drop_item_for": {
					priority: 1,
					seconds_before_pickup: 0,
					cooldown: 0.25,
					drop_item_chance: 0.7,
					offering_distance: 5,
					minimum_teleport_distance: 2,
					max_head_look_at_height: 10,
					target_range: [
						5,
						5,
						5
					],
					teleport_offset: [
						0,
						1,
						0
					],
					time_of_day_range: [
						0.74999,
						0.8
					],
					speed_multiplier: 1,
					search_range: 5,
					search_height: 2,
					search_count: 0,
					goal_radius: 1,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "player"
							},
							max_dist: 6
						}
					],
					loot_table: "loot_tables/entities/cat_gift.json",
					on_drop_attempt: {
						event: "minecraft:cat_gifted_owner",
						target: "self"
					}
				}
			},
			"minecraft:cat_white": {
				"minecraft:variant": {
					value: 0
				}
			},
			"minecraft:cat_tuxedo": {
				"minecraft:variant": {
					value: 1
				}
			},
			"minecraft:cat_red": {
				"minecraft:variant": {
					value: 2
				}
			},
			"minecraft:cat_siamese": {
				"minecraft:variant": {
					value: 3
				}
			},
			"minecraft:cat_british": {
				"minecraft:variant": {
					value: 4
				}
			},
			"minecraft:cat_calico": {
				"minecraft:variant": {
					value: 5
				}
			},
			"minecraft:cat_persian": {
				"minecraft:variant": {
					value: 6
				}
			},
			"minecraft:cat_ragdoll": {
				"minecraft:variant": {
					value: 7
				}
			},
			"minecraft:cat_tabby": {
				"minecraft:variant": {
					value: 8
				}
			},
			"minecraft:cat_black": {
				"minecraft:variant": {
					value: 9
				}
			},
			"minecraft:cat_jellie": {
				"minecraft:variant": {
					value: 10
				}
			}
		},
		components: {
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 0.6
			},
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:attack_damage": {
				value: 4
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"cat",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 0.7
			},
			"minecraft:healable": {
				items: [
					{
						item: "fish",
						heal_amount: 2
					},
					{
						item: "salmon",
						heal_amount: 2
					}
				]
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:navigation.walk": {
				can_float: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:dweller": {
				dwelling_type: "village",
				dweller_role: "passive",
				update_interval_base: 60,
				update_interval_variant: 40,
				can_find_poi: false,
				can_migrate: true,
				first_founding_reward: 0
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.25
			},
			"minecraft:behavior.mount_pathing": {
				priority: 1,
				speed_multiplier: 1.25,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.leap_at_target": {
				priority: 3,
				target_dist: 0.3
			},
			"minecraft:behavior.ocelotattack": {
				priority: 4,
				cooldown_time: 1,
				x_max_rotation: 30,
				y_max_head_rotation: 30,
				max_distance: 15,
				max_sneak_range: 15,
				max_sprint_range: 4,
				reach_multiplier: 2,
				sneak_speed_multiplier: 0.6,
				sprint_speed_multiplier: 1.33,
				walk_speed_multiplier: 0.8
			},
			"minecraft:behavior.random_stroll": {
				priority: 8,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.look_at_player": {
				priority: 9
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 3,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:cat_adult",
										"minecraft:cat_wild"
									]
								}
							},
							{
								weight: 1,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:cat_baby",
										"minecraft:cat_wild"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_white"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_tuxedo"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_red"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_siamese"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_british"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_calico"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_persian"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_ragdoll"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_tabby"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_black"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_jellie"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:spawn_from_village": {
				sequence: [
					{
						randomize: [
							{
								weight: 3,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:cat_adult",
										"minecraft:cat_wild"
									]
								}
							},
							{
								weight: 1,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:cat_baby",
										"minecraft:cat_wild"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_tuxedo"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_red"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_siamese"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_white"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_british"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_calico"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_persian"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_ragdoll"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_tabby"
									]
								}
							},
							{
								weight: 15,
								add: {
									component_groups: [
										"minecraft:cat_jellie"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:spawn_midnight_cat": {
				sequence: [
					{
						add: {
							component_groups: [
								"minecraft:cat_adult",
								"minecraft:cat_wild",
								"minecraft:cat_black"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:is_baby"
						},
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:cat_baby",
								"minecraft:cat_tame"
							]
						}
					}
				]
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:cat_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:cat_adult"
					]
				}
			},
			"minecraft:on_tame": {
				sequence: [
					{
						remove: {
							component_groups: [
								"minecraft:cat_wild"
							]
						}
					},
					{
						add: {
							component_groups: [
								"minecraft:cat_tame"
							]
						}
					}
				]
			},
			"minecraft:pet_slept_with_owner": {
				add: {
					component_groups: [
						"minecraft:cat_gift_for_owner"
					]
				}
			},
			"minecraft:cat_gifted_owner": {
				remove: {
					component_groups: [
						"minecraft:cat_gift_for_owner"
					]
				}
			}
		}
	}
},
	"minecraft:cave_spider": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:cave_spider",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:spider_jockey": {
				"minecraft:addrider": {
					entity_type: "minecraft:skeleton"
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"skeleton"
					],
					seats: {
						position: [
							0,
							0.3,
							-0.1
						]
					}
				}
			},
			"minecraft:spider_stray_jockey": {
				"minecraft:addrider": {
					entity_type: "minecraft:skeleton.stray"
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"skeleton"
					],
					seats: {
						position: [
							0,
							0.3,
							-0.1
						]
					}
				}
			},
			"minecraft:spider_wither_jockey": {
				"minecraft:addrider": {
					entity_type: "minecraft:skeleton.wither"
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"skeleton"
					],
					seats: {
						position: [
							0,
							0.25,
							-0.1
						]
					}
				}
			},
			"minecraft:spider_neutral": {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "is_brightness",
							operator: "<",
							value: 0.49
						},
						event: "minecraft:become_hostile"
					}
				},
				"minecraft:on_target_acquired": {
					event: "minecraft:become_angry"
				}
			},
			"minecraft:spider_hostile": {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "is_brightness",
							operator: ">",
							value: 0.49
						},
						event: "minecraft:become_neutral"
					}
				},
				"minecraft:behavior.nearest_attackable_target": {
					priority: 2,
					must_see: true,
					attack_interval: 5,
					entity_types: [
						{
							filters: {
								any_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "is_family",
										subject: "other",
										value: "snowgolem"
									},
									{
										test: "is_family",
										subject: "other",
										value: "irongolem"
									}
								]
							},
							max_dist: 16
						}
					]
				},
				"minecraft:behavior.leap_at_target": {
					priority: 4,
					yd: 0.4,
					must_be_on_ground: false
				},
				"minecraft:behavior.melee_attack": {
					priority: 3,
					track_target: true,
					random_stop_interval: 100,
					reach_multiplier: 0.8
				}
			},
			"minecraft:spider_angry": {
				"minecraft:angry": {
					duration: 10,
					duration_delta: 3,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:behavior.nearest_attackable_target": {
					priority: 2,
					must_see: true,
					attack_interval: 10,
					entity_types: [
						{
							filters: {
								any_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "is_family",
										subject: "other",
										value: "snowgolem"
									},
									{
										test: "is_family",
										subject: "other",
										value: "irongolem"
									}
								]
							},
							max_dist: 16
						}
					]
				},
				"minecraft:behavior.leap_at_target": {
					priority: 4,
					yd: 0.4,
					must_be_on_ground: false
				},
				"minecraft:behavior.melee_attack": {
					priority: 3,
					track_target: true,
					reach_multiplier: 1.4
				}
			},
			"minecraft:spider_poison_easy": {
				"minecraft:attack": {
					damage: 2,
					effect_name: "poison",
					effect_duration: 0
				}
			},
			"minecraft:spider_poison_normal": {
				"minecraft:attack": {
					damage: 2,
					effect_name: "poison",
					effect_duration: 7
				}
			},
			"minecraft:spider_poison_hard": {
				"minecraft:attack": {
					damage: 2,
					effect_name: "poison",
					effect_duration: 15
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:type_family": {
				family: [
					"cavespider",
					"monster",
					"arthropod",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/spider.json"
			},
			"minecraft:collision_box": {
				width: 0.7,
				height: 0.5
			},
			"minecraft:health": {
				value: 12,
				max: 12
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:navigation.climb": {
				can_path_over_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 1
			},
			"minecraft:behavior.mount_pathing": {
				priority: 5,
				speed_multiplier: 1.25,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 7
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:rideable": {
				seat_count: 1,
				family_types: [
					"zombie"
				],
				seats: {
					position: [
						0,
						0.3,
						0
					]
				}
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 1,
						randomize: [
							{
								weight: 80,
								filters: {
									all_of: [
										{
											test: "is_daytime",
											value: false
										},
										{
											test: "is_snow_covered",
											value: true
										},
										{
											test: "is_underground",
											value: false
										}
									]
								},
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:spider_stray_jockey",
										"minecraft:spider_neutral"
									]
								}
							},
							{
								weight: 80,
								filters: {
									test: "is_biome",
									value: "the_nether"
								},
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:spider_wither_jockey",
										"minecraft:spider_neutral"
									]
								}
							},
							{
								weight: 20,
								filters: {
									all_of: [
										{
											test: "is_daytime",
											value: false
										},
										{
											test: "is_underground",
											value: true
										}
									]
								},
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:spider_jockey",
										"minecraft:spider_neutral"
									]
								}
							}
						]
					},
					{
						weight: 99,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:spider_neutral"
							]
						}
					}
				]
			},
			"minecraft:become_hostile": {
				sequence: [
					{
						remove: {
							component_groups: [
								"minecraft:spider_neutral"
							]
						},
						add: {
							component_groups: [
								"minecraft:spider_hostile"
							]
						}
					},
					{
						filters: {
							test: "is_difficulty",
							value: "easy"
						},
						remove: {
							component_groups: [
								"minecraft:spider_poison_hard",
								"minecraft:spider_poison_normal"
							]
						},
						add: {
							component_groups: [
								"minecraft:spider_poison_easy"
							]
						}
					},
					{
						filters: {
							test: "is_difficulty",
							value: "normal"
						},
						remove: {
							component_groups: [
								"minecraft:spider_poison_easy",
								"minecraft:spider_poison_hard"
							]
						},
						add: {
							component_groups: [
								"minecraft:spider_poison_normal"
							]
						}
					},
					{
						filters: {
							test: "is_difficulty",
							value: "hard"
						},
						remove: {
							component_groups: [
								"minecraft:spider_poison_easy",
								"minecraft:spider_poison_normal"
							]
						},
						add: {
							component_groups: [
								"minecraft:spider_poison_hard"
							]
						}
					}
				]
			},
			"minecraft:become_neutral": {
				remove: {
					component_groups: [
						"minecraft:spider_hostile"
					]
				},
				add: {
					component_groups: [
						"minecraft:spider_neutral"
					]
				}
			},
			"minecraft:become_angry": {
				sequence: [
					{
						remove: {
							component_groups: [
								"minecraft:spider_neutral"
							]
						},
						add: {
							component_groups: [
								"minecraft:spider_angry"
							]
						}
					},
					{
						filters: {
							test: "is_difficulty",
							value: "easy"
						},
						remove: {
							component_groups: [
								"minecraft:spider_poison_hard",
								"minecraft:spider_poison_normal"
							]
						},
						add: {
							component_groups: [
								"minecraft:spider_poison_easy"
							]
						}
					},
					{
						filters: {
							test: "is_difficulty",
							value: "normal"
						},
						remove: {
							component_groups: [
								"minecraft:spider_poison_easy",
								"minecraft:spider_poison_hard"
							]
						},
						add: {
							component_groups: [
								"minecraft:spider_poison_normal"
							]
						}
					},
					{
						filters: {
							test: "is_difficulty",
							value: "hard"
						},
						remove: {
							component_groups: [
								"minecraft:spider_poison_easy",
								"minecraft:spider_poison_normal"
							]
						},
						add: {
							component_groups: [
								"minecraft:spider_poison_hard"
							]
						}
					}
				]
			},
			"minecraft:on_calm": {
				remove: {
					component_groups: [
						"minecraft:spider_angry"
					]
				},
				add: {
					component_groups: [
						"minecraft:spider_neutral"
					]
				}
			}
		}
	}
},
	"minecraft:chest_boat": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:chest_boat",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:floating": {
				"minecraft:buoyant": {
					base_buoyancy: 1,
					apply_gravity: true,
					simulate_waves: true,
					big_wave_probability: 0.03,
					big_wave_speed: 10,
					liquid_blocks: [
						"minecraft:water",
						"minecraft:flowing_water"
					]
				}
			},
			"minecraft:can_ride": {
				"minecraft:rideable": {
					seat_count: 1,
					interact_text: "action.interact.ride.boat",
					pull_in_entities: true,
					seats: [
						{
							position: [
								0.2,
								-0.2,
								0
							],
							min_rider_count: 0,
							max_rider_count: 1,
							rotate_rider_by: "query.has_any_family('blaze', 'creeper', 'enderman', 'illager', 'magmacube', 'piglin', 'player', 'skeleton', 'slime', 'villager', 'wandering_trader', 'witch', 'zombie', 'zombie_pigman') ? -90 : 0",
							lock_rider_rotation: 90
						}
					]
				}
			},
			"minecraft:above_bubble_column_down": {
				"minecraft:buoyant": {
					base_buoyancy: 1,
					apply_gravity: true,
					simulate_waves: false,
					liquid_blocks: [
						"minecraft:water",
						"minecraft:flowing_water"
					],
					drag_down_on_buoyancy_removed: 0.7
				},
				"minecraft:timer": {
					looping: false,
					time: 3,
					time_down_event: {
						event: "minecraft:sink",
						target: "self"
					}
				},
				"minecraft:out_of_control": {
				}
			},
			"minecraft:above_bubble_column_up": {
				"minecraft:buoyant": {
					base_buoyancy: 1,
					apply_gravity: true,
					simulate_waves: false,
					liquid_blocks: [
						"minecraft:water",
						"minecraft:flowing_water"
					],
					drag_down_on_buoyancy_removed: 0.7
				},
				"minecraft:out_of_control": {
				}
			}
		},
		components: {
			"minecraft:type_family": {
				family: [
					"boat",
					"inanimate"
				]
			},
			"minecraft:collision_box": {
				width: 1.4,
				height: 0.455
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:inventory": {
				container_type: "chest_boat",
				inventory_size: 27,
				can_be_siphoned_from: true
			},
			"minecraft:rideable": {
				seat_count: 1,
				interact_text: "action.interact.ride.boat",
				pull_in_entities: true,
				seats: [
					{
						position: [
							0.2,
							-0.2,
							0
						],
						min_rider_count: 0,
						max_rider_count: 1,
						rotate_rider_by: "query.has_any_family('blaze', 'creeper', 'enderman', 'illager', 'magmacube', 'piglin', 'player', 'skeleton', 'slime', 'villager', 'wandering_trader', 'witch', 'zombie', 'zombie_pigman') ? -90 : 0",
						lock_rider_rotation: 90
					}
				]
			},
			"minecraft:is_stackable": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:buoyant": {
				base_buoyancy: 1,
				apply_gravity: true,
				simulate_waves: true,
				big_wave_probability: 0.03,
				big_wave_speed: 10,
				liquid_blocks: [
					"minecraft:water",
					"minecraft:flowing_water"
				]
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 60,
					max_dropped_ticks: 20,
					use_motion_prediction_hints: true
				},
				conditional_values: [
					{
						max_optimized_distance: 0,
						max_dropped_ticks: 0,
						use_motion_prediction_hints: true,
						conditional_values: [
							{
								test: "is_moving",
								subject: "self",
								operator: "==",
								value: true
							}
						]
					}
				]
			},
			"minecraft:inside_block_notifier": {
				block_list: [
					{
						block: {
							name: "minecraft:bubble_column",
							states: {
								drag_down: true
							}
						},
						entered_block_event: {
							event: "minecraft:entered_bubble_column_down",
							target: "self"
						},
						exited_block_event: {
							event: "minecraft:exited_bubble_column",
							target: "self"
						}
					},
					{
						block: {
							name: "minecraft:bubble_column",
							states: {
								drag_down: false
							}
						},
						entered_block_event: {
							event: "minecraft:entered_bubble_column_up",
							target: "self"
						},
						exited_block_event: {
							event: "minecraft:exited_bubble_column",
							target: "self"
						}
					}
				]
			}
		},
		events: {
			"minecraft:entered_bubble_column_down": {
				remove: {
					component_groups: [
						"minecraft:floating"
					]
				},
				add: {
					component_groups: [
						"minecraft:above_bubble_column_down"
					]
				}
			},
			"minecraft:entered_bubble_column_up": {
				remove: {
					component_groups: [
						"minecraft:floating"
					]
				},
				add: {
					component_groups: [
						"minecraft:above_bubble_column_up"
					]
				}
			},
			"minecraft:exited_bubble_column": {
				remove: {
					component_groups: [
						"minecraft:above_bubble_column_down",
						"minecraft:above_bubble_column_up"
					]
				},
				add: {
					component_groups: [
						"minecraft:floating",
						"minecraft:can_ride"
					]
				}
			},
			"minecraft:sink": {
				remove: {
					component_groups: [
						"minecraft:floating",
						"minecraft:can_ride",
						"minecraft:above_bubble_column_down",
						"minecraft:above_bubble_column_up"
					]
				}
			}
		}
	}
},
	"minecraft:chest_minecart": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:chest_minecart",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:type_family": {
				family: [
					"minecart",
					"inanimate"
				]
			},
			"minecraft:collision_box": {
				width: 0.98,
				height: 0.7
			},
			"minecraft:rail_movement": {
			},
			"minecraft:inventory": {
				container_type: "minecart_chest",
				inventory_size: 27,
				can_be_siphoned_from: true
			},
			"minecraft:is_stackable": {
				value: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 60,
					max_dropped_ticks: 20,
					use_motion_prediction_hints: true
				},
				conditional_values: [
					{
						max_optimized_distance: 0,
						max_dropped_ticks: 0,
						conditional_values: [
							{
								test: "is_moving",
								subject: "self",
								operator: "==",
								value: true
							}
						]
					}
				]
			}
		}
	}
},
	"minecraft:chicken": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:chicken",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:chicken_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"wheat_seeds",
						"beetroot_seeds",
						"melon_seeds",
						"pumpkin_seeds"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 5,
					speed_multiplier: 1.1
				}
			},
			"minecraft:chicken_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/chicken.json"
				},
				"minecraft:breedable": {
					require_tame: false,
					breeds_with: {
						mate_type: "minecraft:chicken",
						baby_type: "minecraft:chicken",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					breed_items: [
						"wheat_seeds",
						"beetroot_seeds",
						"melon_seeds",
						"pumpkin_seeds"
					]
				},
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 1
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							0.4,
							0
						]
					}
				},
				"minecraft:spawn_entity": {
					entities: {
						min_wait_time: 300,
						max_wait_time: 600,
						spawn_sound: "plop",
						spawn_item: "egg",
						filters: {
							test: "rider_count",
							subject: "self",
							operator: "==",
							value: 0
						}
					}
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"chicken",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 0.8
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 4,
				max: 4
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 0.5
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.5
			},
			"minecraft:behavior.mount_pathing": {
				priority: 2,
				speed_multiplier: 1.5,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.tempt": {
				priority: 4,
				speed_multiplier: 1,
				items: [
					"wheat_seeds",
					"beetroot_seeds",
					"melon_seeds",
					"pumpkin_seeds"
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:game_event_movement_tracking": {
				emit_flap: true
			}
		},
		events: {
			from_egg: {
				add: {
					component_groups: [
						"minecraft:chicken_baby"
					]
				}
			},
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						trigger: "minecraft:spawn_adult"
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"minecraft:chicken_baby"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:chicken_baby"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:chicken_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:chicken_adult"
					]
				}
			},
			"minecraft:spawn_adult": {
				add: {
					component_groups: [
						"minecraft:chicken_adult"
					]
				}
			}
		}
	}
},
	"minecraft:command_block_minecart": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:command_block_minecart",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:command_block_active": {
				"minecraft:rail_sensor": {
					check_block_types: true,
					eject_on_activate: false,
					eject_on_deactivate: false,
					tick_command_block_on_activate: true,
					tick_command_block_on_deactivate: false,
					on_deactivate: {
						event: "minecraft:command_block_deactivate"
					}
				}
			},
			"minecraft:command_block_inactive": {
				"minecraft:rail_sensor": {
					check_block_types: false,
					eject_on_activate: false,
					eject_on_deactivate: false,
					tick_command_block_on_activate: true,
					tick_command_block_on_deactivate: false,
					on_activate: {
						event: "minecraft:command_block_activate"
					}
				}
			}
		},
		components: {
			"minecraft:type_family": {
				family: [
					"minecart",
					"inanimate"
				]
			},
			"minecraft:collision_box": {
				width: 0.98,
				height: 0.7
			},
			"minecraft:rail_movement": {
			},
			"minecraft:inventory": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 60,
					max_dropped_ticks: 20,
					use_motion_prediction_hints: true
				},
				conditional_values: [
					{
						max_optimized_distance: 0,
						max_dropped_ticks: 0,
						conditional_values: [
							{
								test: "is_moving",
								subject: "self",
								operator: "==",
								value: true
							}
						]
					}
				]
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:command_block_inactive"
					]
				}
			},
			"minecraft:command_block_activate": {
				remove: {
					component_groups: [
						"minecraft:command_block_inactive"
					]
				},
				add: {
					component_groups: [
						"minecraft:command_block_active"
					]
				}
			},
			"minecraft:command_block_deactivate": {
				remove: {
					component_groups: [
						"minecraft:command_block_active"
					]
				},
				add: {
					component_groups: [
						"minecraft:command_block_inactive"
					]
				}
			}
		}
	}
},
	"minecraft:cow": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:cow",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:cow_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: "wheat",
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 6,
					speed_multiplier: 1.1
				}
			},
			"minecraft:cow_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/cow.json"
				},
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: false,
					breed_items: "wheat",
					breeds_with: {
						mate_type: "minecraft:cow",
						baby_type: "minecraft:cow",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					}
				},
				"minecraft:interact": {
					interactions: [
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "has_equipment",
											domain: "hand",
											subject: "other",
											value: "bucket:0"
										}
									]
								}
							},
							use_item: true,
							transform_to_item: "bucket:1",
							play_sounds: "milk",
							interact_text: "action.interact.milk"
						}
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"cow",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 1.3
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.25
			},
			"minecraft:behavior.mount_pathing": {
				priority: 2,
				speed_multiplier: 1.5,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.breed": {
				priority: 3,
				speed_multiplier: 1
			},
			"minecraft:behavior.tempt": {
				priority: 4,
				speed_multiplier: 1.25,
				items: [
					"wheat"
				]
			},
			"minecraft:behavior.follow_parent": {
				priority: 5,
				speed_multiplier: 1.1
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:rideable": {
				seat_count: 1,
				family_types: [
					"zombie"
				],
				seats: {
					position: [
						0,
						1.105,
						0
					]
				}
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						trigger: "minecraft:spawn_adult"
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"minecraft:cow_baby"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:cow_baby"
					]
				}
			},
			"minecraft:entity_transformed": {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:cow_adult"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:cow_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:cow_adult"
					]
				}
			},
			"minecraft:spawn_adult": {
				add: {
					component_groups: [
						"minecraft:cow_adult"
					]
				}
			}
		}
	}
},
	"minecraft:creeper": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:creeper",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:exploding": {
				"minecraft:explode": {
					fuse_length: 1.5,
					fuse_lit: true,
					power: 3,
					causes_fire: false,
					destroy_affected_by_griefing: true
				}
			},
			"minecraft:charged_creeper": {
				"minecraft:is_charged": {
				}
			},
			"minecraft:charged_exploding": {
				"minecraft:explode": {
					fuse_length: 1.5,
					fuse_lit: true,
					power: 6,
					causes_fire: false,
					destroy_affected_by_griefing: true
				}
			},
			"minecraft:forced_exploding": {
				"minecraft:target_nearby_sensor": {
				},
				"minecraft:explode": {
					fuse_length: 1.5,
					fuse_lit: true,
					power: 3,
					causes_fire: false,
					destroy_affected_by_griefing: true
				},
				"minecraft:on_target_escape": {
				}
			},
			"minecraft:forced_charged_exploding": {
				"minecraft:target_nearby_sensor": {
				},
				"minecraft:explode": {
					fuse_length: 1.5,
					fuse_lit: true,
					power: 6,
					causes_fire: false,
					destroy_affected_by_griefing: true
				},
				"minecraft:on_target_escape": {
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:type_family": {
				family: [
					"creeper",
					"monster",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.8
			},
			"minecraft:movement": {
				value: 0.2
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/creeper.json"
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:attack": {
				damage: 3
			},
			"minecraft:damage_sensor": {
				triggers: {
					on_damage: {
						filters: {
							test: "is_family",
							subject: "other",
							value: "lightning"
						},
						event: "minecraft:become_charged"
					},
					deals_damage: false
				}
			},
			"minecraft:target_nearby_sensor": {
				inside_range: 2.5,
				outside_range: 6,
				must_see: true,
				on_inside_range: {
					event: "minecraft:start_exploding",
					target: "self"
				},
				on_outside_range: {
					event: "minecraft:stop_exploding",
					target: "self"
				},
				on_vision_lost_inside_range: {
					event: "minecraft:stop_exploding",
					target: "self"
				}
			},
			"minecraft:interact": {
				interactions: {
					on_interact: {
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "has_equipment",
									domain: "hand",
									subject: "other",
									value: "flint_and_steel"
								},
								{
									test: "has_component",
									operator: "!=",
									value: "minecraft:explode"
								}
							]
						},
						event: "minecraft:start_exploding_forced",
						target: "self"
					},
					hurt_item: 1,
					swing: true,
					play_sounds: "ignite",
					interact_text: "action.interact.creeper"
				}
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.swell": {
				start_distance: 2.5,
				stop_distance: 6,
				priority: 2
			},
			"minecraft:behavior.melee_attack": {
				priority: 4,
				speed_multiplier: 1.25,
				track_target: false,
				reach_multiplier: 0
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 3,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "ocelot"
								},
								{
									test: "is_family",
									subject: "other",
									value: "cat"
								}
							]
						},
						max_dist: 6,
						sprint_speed_multiplier: 1.2
					}
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 5,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 6,
				look_distance: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 6
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 1,
				must_see: true,
				must_see_forget_duration: 3,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 16
					}
				]
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 2
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:on_target_escape": {
				event: "minecraft:stop_exploding",
				target: "self"
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:start_exploding_forced": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:is_charged"
						},
						add: {
							component_groups: [
								"minecraft:forced_exploding"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							value: "minecraft:is_charged"
						},
						add: {
							component_groups: [
								"minecraft:forced_charged_exploding"
							]
						}
					}
				]
			},
			"minecraft:start_exploding": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:is_charged"
						},
						add: {
							component_groups: [
								"minecraft:exploding"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							value: "minecraft:is_charged"
						},
						add: {
							component_groups: [
								"minecraft:charged_exploding"
							]
						}
					}
				]
			},
			"minecraft:stop_exploding": {
				remove: {
					component_groups: [
						"minecraft:exploding"
					]
				}
			},
			"minecraft:become_charged": {
				remove: {
					component_groups: [
						"minecraft:exploding"
					]
				},
				add: {
					component_groups: [
						"minecraft:charged_creeper"
					]
				}
			}
		}
	}
},
	"minecraft:dolphin": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:dolphin",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			dolphin_adult: {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/dolphin.json"
				},
				"minecraft:bribeable": {
					bribe_items: [
						"fish",
						"salmon"
					]
				},
				"minecraft:behavior.melee_attack": {
					priority: 2,
					track_target: true
				}
			},
			dolphin_baby: {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.65
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"fish",
						"salmon"
					],
					grow_up: {
						event: "ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 4,
					speed_multiplier: 1.1
				},
				"minecraft:behavior.panic": {
					priority: 1,
					speed_multiplier: 1.25
				}
			},
			dolphin_angry: {
				"minecraft:angry": {
					duration: 25,
					broadcast_anger: true,
					broadcast_range: 16,
					calm_event: {
						event: "on_calm",
						target: "self"
					}
				},
				"minecraft:on_target_acquired": {
				}
			},
			dolphin_dried: {
				"minecraft:damage_over_time": {
					damage_per_hurt: 1,
					time_between_hurt: 0
				}
			},
			dolphin_swimming_navigation: {
				"minecraft:behavior.look_at_player": {
					priority: 8,
					look_distance: 6
				},
				"minecraft:navigation.generic": {
					is_amphibious: true,
					can_path_over_water: false,
					can_swim: true,
					can_walk: false,
					can_breach: true,
					can_sink: false
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								all_of: [
									{
										test: "on_ground",
										operator: "==",
										value: true
									},
									{
										test: "in_water",
										operator: "!=",
										value: true
									}
								]
							},
							event: "navigation_on_land"
						}
					]
				}
			},
			dolphin_on_land: {
				"minecraft:navigation.generic": {
					is_amphibious: true,
					can_path_over_water: true,
					can_swim: true,
					can_walk: true,
					can_breach: false,
					can_jump: false
				},
				"minecraft:drying_out_timer": {
					total_time: 120,
					water_bottle_refill_time: 0,
					dried_out_event: {
						event: "dried_out"
					},
					stopped_drying_out_event: {
						event: "stop_dryingout"
					},
					recover_after_dried_out_event: {
						event: "recover_after_dried_out"
					}
				}
			},
			dolphin_on_land_in_rain: {
				"minecraft:navigation.generic": {
					is_amphibious: true,
					can_path_over_water: true,
					can_swim: true,
					can_walk: true,
					can_breach: false,
					can_jump: false
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								test: "in_water",
								operator: "==",
								value: true
							},
							event: "navigation_off_land"
						},
						{
							filters: {
								test: "in_water_or_rain",
								operator: "!=",
								value: true
							},
							event: "start_dryingout"
						}
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"dolphin",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 0.6
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:follow_range": {
				value: 48,
				max: 48
			},
			"minecraft:breathable": {
				total_supply: 240,
				suffocate_time: 0,
				breathes_air: true,
				breathes_water: false,
				generates_bubbles: false
			},
			"minecraft:attack": {
				damage: 3
			},
			"minecraft:movement": {
				value: 0.1
			},
			"minecraft:navigation.generic": {
				is_amphibious: true,
				can_path_over_water: true,
				can_swim: true,
				can_walk: false,
				can_breach: true,
				can_sink: false
			},
			"minecraft:underwater_movement": {
				value: 0.15
			},
			"minecraft:jump.static": {
				jump_power: 0.6
			},
			"minecraft:can_climb": {
			},
			"minecraft:behavior.swim_with_entity": {
				priority: 4,
				success_rate: 0.1,
				chance_to_stop: 0.0333,
				state_check_interval: 0.5,
				catch_up_threshold: 12,
				match_direction_threshold: 2,
				catch_up_multiplier: 2.5,
				speed_multiplier: 1.5,
				search_range: 20,
				stop_distance: 5,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						}
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.random_swim": {
				priority: 5,
				interval: 0,
				xz_dist: 20
			},
			"minecraft:behavior.random_breach": {
				priority: 6,
				interval: 50,
				xz_dist: 6,
				cooldown_time: 2
			},
			"minecraft:behavior.random_look_around": {
				priority: 7
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 2,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "guardian_elder"
								},
								{
									test: "is_family",
									subject: "other",
									value: "guardian"
								}
							]
						},
						max_dist: 8,
						walk_speed_multiplier: 1,
						sprint_speed_multiplier: 1
					}
				],
				probability_per_strength: 0.14
			},
			"minecraft:behavior.find_underwater_treasure": {
				priority: 2,
				speed_multiplier: 2,
				search_range: 30,
				stop_distance: 50
			},
			"minecraft:behavior.move_to_water": {
				priority: 1,
				search_range: 15,
				search_height: 5
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:flocking": {
				in_water: false,
				match_variants: false,
				use_center_of_mass: false,
				low_flock_limit: 4,
				high_flock_limit: 8,
				goal_weight: 2,
				loner_chance: 0.1,
				influence_radius: 6,
				breach_influence: 0,
				separation_weight: 1.75,
				separation_threshold: 3,
				cohesion_weight: 1.85,
				cohesion_threshold: 6.5,
				innner_cohesion_threshold: 3.5,
				min_height: 4,
				max_height: 4,
				block_distance: 1,
				block_weight: 0
			},
			"minecraft:on_target_acquired": {
				event: "become_angry",
				target: "self"
			},
			"minecraft:on_target_escape": {
				target: "self"
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 90,
						add: {
							component_groups: [
								"dolphin_adult",
								"dolphin_swimming_navigation"
							]
						}
					},
					{
						weight: 10,
						add: {
							component_groups: [
								"dolphin_baby",
								"dolphin_swimming_navigation"
							]
						}
					}
				]
			},
			ageable_grow_up: {
				remove: {
					component_groups: [
						"dolphin_baby"
					]
				},
				add: {
					component_groups: [
						"dolphin_adult"
					]
				}
			},
			become_angry: {
				add: {
					component_groups: [
						"dolphin_angry"
					]
				}
			},
			on_calm: {
				remove: {
					component_groups: [
						"dolphin_angry"
					]
				}
			},
			stop_dryingout: {
				remove: {
					component_groups: [
						"dolphin_on_land",
						"dolphin_dried"
					]
				},
				add: {
					component_groups: [
						"dolphin_on_land_in_rain"
					]
				}
			},
			start_dryingout: {
				remove: {
					component_groups: [
						"dolphin_on_land_in_rain"
					]
				},
				add: {
					component_groups: [
						"dolphin_on_land"
					]
				}
			},
			dried_out: {
				add: {
					component_groups: [
						"dolphin_dried"
					]
				}
			},
			recover_after_dried_out: {
				remove: {
					component_groups: [
						"dolphin_dried"
					]
				}
			},
			navigation_on_land: {
				add: {
					component_groups: [
						"dolphin_on_land"
					]
				},
				remove: {
					component_groups: [
						"dolphin_swimming_navigation"
					]
				}
			},
			navigation_off_land: {
				add: {
					component_groups: [
						"dolphin_swimming_navigation"
					]
				},
				remove: {
					component_groups: [
						"dolphin_on_land_in_rain",
						"dolphin_on_land",
						"dolphin_dried"
					]
				}
			}
		}
	}
},
	"minecraft:donkey": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:donkey",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:donkey_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale_by_age": {
					start_scale: 0.5,
					end_scale: 1
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						{
							item: "wheat",
							growth: 0.016667
						},
						{
							item: "sugar",
							growth: 0.025
						},
						{
							item: "hay_block",
							growth: 0.15
						},
						{
							item: "apple",
							growth: 0.05
						},
						{
							item: "golden_carrot",
							growth: 0.05
						},
						{
							item: "golden_apple",
							growth: 0.2
						},
						{
							item: "appleEnchanted",
							growth: 0.2
						}
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 4,
					speed_multiplier: 1
				}
			},
			"minecraft:donkey_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/horse.json"
				},
				"minecraft:behavior.run_around_like_crazy": {
					priority: 1,
					speed_multiplier: 1.2
				},
				"minecraft:behavior.breed": {
					priority: 2,
					speed_multiplier: 1
				}
			},
			"minecraft:donkey_wild": {
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"player",
						"zombie"
					],
					interact_text: "action.interact.mount",
					seats: {
						position: [
							0,
							0.925,
							-0.2
						]
					}
				},
				"minecraft:behavior.mount_pathing": {
					priority: 2,
					speed_multiplier: 1.5,
					target_dist: 0,
					track_target: true
				},
				"minecraft:tamemount": {
					min_temper: 0,
					max_temper: 100,
					feed_text: "action.interact.feed",
					ride_text: "action.interact.mount",
					feed_items: [
						{
							item: "wheat",
							temper_mod: 3
						},
						{
							item: "sugar",
							temper_mod: 3
						},
						{
							item: "apple",
							temper_mod: 3
						},
						{
							item: "golden_carrot",
							temper_mod: 5
						},
						{
							item: "golden_apple",
							temper_mod: 10
						},
						{
							item: "appleEnchanted",
							temper_mod: 10
						}
					],
					auto_reject_items: [
						{
							item: "horsearmorleather"
						},
						{
							item: "horsearmoriron"
						},
						{
							item: "horsearmorgold"
						},
						{
							item: "horsearmordiamond"
						},
						{
							item: "saddle"
						}
					],
					tame_event: {
						event: "minecraft:on_tame",
						target: "self"
					}
				}
			},
			"minecraft:donkey_tamed": {
				"minecraft:is_tamed": {
				},
				"minecraft:equippable": {
					slots: [
						{
							slot: 0,
							item: "saddle",
							accepted_items: [
								"saddle"
							],
							on_equip: {
								event: "minecraft:donkey_saddled"
							},
							on_unequip: {
								event: "minecraft:donkey_unsaddled"
							}
						}
					]
				},
				"minecraft:rideable": {
					seat_count: 1,
					crouching_skip_interact: true,
					family_types: [
						"player"
					],
					interact_text: "action.interact.ride.horse",
					seats: {
						position: [
							0,
							0.925,
							-0.2
						]
					}
				},
				"minecraft:behavior.player_ride_tamed": {
				},
				"minecraft:inventory": {
					inventory_size: 16,
					container_type: "horse"
				},
				"minecraft:breedable": {
					require_tame: true,
					inherit_tamed: false,
					breeds_with: [
						{
							mate_type: "minecraft:donkey",
							baby_type: "minecraft:donkey",
							breed_event: {
								event: "minecraft:entity_born",
								target: "baby"
							}
						},
						{
							mate_type: "minecraft:horse",
							baby_type: "minecraft:mule",
							breed_event: {
								event: "minecraft:entity_born",
								target: "baby"
							}
						}
					],
					breed_items: [
						"golden_carrot",
						"golden_apple",
						"appleEnchanted"
					]
				},
				"minecraft:behavior.tempt": {
					priority: 5,
					speed_multiplier: 1.2,
					items: [
						"apple",
						"carrot",
						"golden_apple",
						"appleEnchanted",
						"golden_carrot",
						"carrotOnAStick",
						"hay_block",
						"sugar",
						"bread",
						"wheat"
					]
				}
			},
			"minecraft:donkey_unchested": {
				"minecraft:interact": {
					interactions: [
						{
							play_sounds: "armor.equip_generic",
							on_interact: {
								filters: {
									all_of: [
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "has_equipment",
											domain: "hand",
											subject: "other",
											value: "chest"
										}
									]
								},
								event: "minecraft:on_chest",
								target: "self"
							},
							use_item: true,
							interact_text: "action.interact.attachchest"
						}
					]
				}
			},
			"minecraft:donkey_chested": {
				"minecraft:is_chested": {
				}
			},
			"minecraft:donkey_saddled": {
				"minecraft:is_saddled": {
				},
				"minecraft:input_ground_controlled": {
				},
				"minecraft:can_power_jump": {
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"donkey",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 1.4,
				height: 1.6
			},
			"minecraft:health": {
				value: {
					range_min: 15,
					range_max: 30
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.175
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:nameable": {
			},
			"minecraft:horse.jump_strength": {
				value: 0.5
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:healable": {
				items: [
					{
						item: "wheat",
						heal_amount: 2
					},
					{
						item: "sugar",
						heal_amount: 1
					},
					{
						item: "hay_block",
						heal_amount: 20
					},
					{
						item: "apple",
						heal_amount: 3
					},
					{
						item: "golden_carrot",
						heal_amount: 4
					},
					{
						item: "golden_apple",
						heal_amount: 10
					},
					{
						item: "appleEnchanted",
						heal_amount: 10
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.7
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 80,
						add: {
							component_groups: [
								"minecraft:donkey_adult",
								"minecraft:donkey_wild"
							]
						}
					},
					{
						weight: 20,
						add: {
							component_groups: [
								"minecraft:donkey_baby"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:donkey_baby"
					]
				}
			},
			"minecraft:on_tame": {
				remove: {
					component_groups: [
						"minecraft:donkey_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:donkey_tamed",
						"minecraft:donkey_unchested"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:donkey_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:donkey_adult",
						"minecraft:donkey_wild"
					]
				}
			},
			"minecraft:on_chest": {
				remove: {
					component_groups: [
						"minecraft:donkey_unchested"
					]
				},
				add: {
					component_groups: [
						"minecraft:donkey_chested"
					]
				}
			},
			"minecraft:donkey_saddled": {
				add: {
					component_groups: [
						"minecraft:donkey_saddled"
					]
				}
			},
			"minecraft:donkey_unsaddled": {
				remove: {
					component_groups: [
						"minecraft:donkey_saddled"
					]
				}
			}
		}
	}
},
	"minecraft:dragon_fireball": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:dragon_fireball",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.31,
				height: 0.31
			},
			"minecraft:projectile": {
				on_hit: {
					spawn_aoe_cloud: {
						radius: 6,
						radius_on_use: 0,
						potion: 23,
						particle: "dragonbreath",
						duration: 120,
						color: [
							220,
							0,
							239
						],
						affect_owner: false,
						reapplication_delay: 20
					},
					remove_on_hit: {
					}
				},
				power: 1.3,
				gravity: 0,
				inertia: 1,
				anchor: 2,
				offset: [
					0,
					0.5,
					0
				],
				semi_random_diff_damage: true,
				uncertainty_base: 10,
				reflect_on_hurt: true,
				hit_sound: "explode"
			}
		},
		"minecraft:physics": {
		},
		"minecraft:pushable": {
			is_pushable: true,
			is_pushable_by_piston: true
		},
		"minecraft:conditional_bandwidth_optimization": {
			default_values: {
				max_optimized_distance: 80,
				max_dropped_ticks: 7,
				use_motion_prediction_hints: true
			}
		}
	}
},
	"minecraft:drowned": {
	format_version: "1.17.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:drowned",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:baby_drowned": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 12 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:movement": {
					value: 0.25
				},
				"minecraft:underwater_movement": {
					value: 0.08
				}
			},
			"minecraft:adult_drowned": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/drowned.json"
				}
			},
			"minecraft:mode_switcher": {
				"minecraft:target_nearby_sensor": {
					inside_range: 3,
					outside_range: 5,
					on_inside_range: {
						event: "minecraft:switch_to_melee",
						target: "self"
					},
					on_outside_range: {
						event: "minecraft:switch_to_ranged",
						target: "self"
					}
				}
			},
			"minecraft:ranged_mode": {
				"minecraft:shooter": {
					def: "minecraft:thrown_trident"
				},
				"minecraft:behavior.ranged_attack": {
					priority: 3,
					attack_interval_min: 1,
					attack_interval_max: 3,
					attack_radius: 10,
					swing: true
				}
			},
			"minecraft:ranged_equipment": {
				"minecraft:equipment": {
					table: "loot_tables/entities/drowned_ranged_equipment.json",
					slot_drop_chance: [
						{
							slot: "slot.weapon.offhand",
							drop_chance: 1
						}
					]
				}
			},
			"minecraft:melee_mode": {
				"minecraft:attack": {
					damage: 3
				},
				"minecraft:behavior.melee_attack": {
					priority: 3,
					speed_multiplier: 1,
					track_target: false,
					require_complete_path: true
				}
			},
			"minecraft:melee_equipment": {
				"minecraft:equipment": {
					table: "loot_tables/entities/drowned_equipment.json",
					slot_drop_chance: [
						{
							slot: "slot.weapon.offhand",
							drop_chance: 1
						}
					]
				}
			},
			"minecraft:hunter_mode": {
				"minecraft:navigation.generic": {
					is_amphibious: true,
					can_path_over_water: false,
					can_break_doors: true,
					can_swim: true,
					can_walk: true,
					avoid_sun: true
				}
			},
			"minecraft:wander_mode": {
				"minecraft:navigation.generic": {
					is_amphibious: true,
					can_path_over_water: false,
					can_break_doors: true,
					can_swim: false,
					can_walk: true,
					avoid_sun: true
				}
			},
			"minecraft:can_break_doors": {
				"minecraft:annotation.break_door": {
				}
			}
		},
		components: {
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"drowned",
					"zombie",
					"undead",
					"monster",
					"mob"
				]
			},
			"minecraft:equip_item": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:underwater_movement": {
				value: 0.06
			},
			"minecraft:movement.generic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.23
			},
			"minecraft:burns_in_daylight": {
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_air: true,
				breathes_water: true
			},
			"minecraft:navigation.generic": {
				is_amphibious: true,
				can_path_over_water: false,
				can_break_doors: true,
				can_swim: false,
				can_walk: true,
				avoid_sun: true
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:nautilus_shell",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:trident",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:netherite_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:diamond_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:iron_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:stone_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:golden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:wooden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.flee_sun": {
				priority: 2,
				speed_multiplier: 1
			},
			"minecraft:behavior.equip_item": {
				priority: 3
			},
			"minecraft:behavior.stomp_turtle_egg": {
				priority: 4,
				speed_multiplier: 1,
				search_range: 10,
				search_height: 2,
				goal_radius: 1.14,
				interval: 20
			},
			"minecraft:behavior.pickup_items": {
				priority: 6,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1,
				pickup_based_on_chance: true,
				can_pickup_any_item: true,
				excluded_items: [
					"minecraft:glow_ink_sac"
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				reselect_targets: true,
				must_see: true,
				within_radius: 12,
				must_see_forget_duration: 17,
				persist_time: 0.5,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									any_of: [
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_family",
											subject: "other",
											value: "snowgolem"
										},
										{
											test: "is_family",
											subject: "other",
											value: "irongolem"
										},
										{
											test: "is_family",
											subject: "other",
											value: "axolotl"
										}
									]
								},
								{
									any_of: [
										{
											test: "in_water",
											subject: "other",
											value: true
										},
										{
											test: "is_daytime",
											value: false
										}
									]
								}
							]
						},
						max_dist: 20
					},
					{
						filters: {
							all_of: [
								{
									any_of: [
										{
											test: "is_family",
											subject: "other",
											value: "villager"
										},
										{
											test: "is_family",
											subject: "other",
											value: "wandering_trader"
										}
									]
								},
								{
									any_of: [
										{
											test: "in_water",
											subject: "other",
											value: true
										},
										{
											test: "is_daytime",
											value: false
										}
									]
								}
							]
						},
						max_dist: 20,
						must_see: false
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "baby_turtle"
								},
								{
									test: "in_water",
									subject: "other",
									operator: "!=",
									value: true
								}
							]
						},
						max_dist: 20
					}
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:on_target_acquired": {
				event: "minecraft:has_target",
				target: "self"
			},
			"minecraft:on_target_escape": {
				event: "minecraft:lost_target",
				target: "self"
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 15,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:mode_switcher",
										"minecraft:ranged_equipment",
										"minecraft:ranged_mode",
										"minecraft:adult_drowned"
									]
								}
							},
							{
								weight: 85,
								randomize: [
									{
										weight: 95,
										remove: {
										},
										add: {
											component_groups: [
												"minecraft:melee_equipment",
												"minecraft:melee_mode",
												"minecraft:adult_drowned"
											]
										}
									},
									{
										weight: 5,
										remove: {
										},
										add: {
											component_groups: [
												"minecraft:melee_equipment",
												"minecraft:melee_mode",
												"minecraft:baby_drowned"
											]
										}
									}
								]
							}
						]
					},
					{
						randomize: [
							{
								weight: 10,
								add: {
									component_groups: [
										"minecraft:can_break_doors"
									]
								}
							},
							{
								weight: 90
							}
						]
					}
				]
			},
			"minecraft:as_baby": {
				add: {
					component_groups: [
						"minecraft:melee_equipment",
						"minecraft:melee_mode",
						"minecraft:baby_drowned"
					]
				}
			},
			"minecraft:as_adult": {
				add: {
					component_groups: [
						"minecraft:melee_equipment",
						"minecraft:melee_mode",
						"minecraft:adult_drowned"
					]
				}
			},
			"minecraft:switch_to_melee": {
				remove: {
					component_groups: [
						"minecraft:ranged_mode"
					]
				},
				add: {
					component_groups: [
						"minecraft:melee_mode"
					]
				}
			},
			"minecraft:switch_to_ranged": {
				remove: {
					component_groups: [
						"minecraft:melee_mode"
					]
				},
				add: {
					component_groups: [
						"minecraft:ranged_mode"
					]
				}
			},
			"minecraft:has_target": {
				remove: {
					component_groups: [
						"minecraft:wander_mode"
					]
				},
				add: {
					component_groups: [
						"minecraft:hunter_mode"
					]
				}
			},
			"minecraft:lost_target": {
				remove: {
					component_groups: [
						"minecraft:hunter_mode"
					]
				},
				add: {
					component_groups: [
						"minecraft:wander_mode"
					]
				}
			}
		}
	}
},
	"minecraft:egg": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:egg",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:projectile": {
				on_hit: {
					impact_damage: {
						damage: 0,
						knockback: true,
						destroy_on_hit: true
					},
					spawn_chance: {
						first_spawn_chance: 8,
						second_spawn_chance: 32,
						first_spawn_count: 1,
						second_spawn_count: 4,
						spawn_definition: "minecraft:chicken",
						spawn_baby: true
					},
					remove_on_hit: {
					},
					particle_on_hit: {
						particle_type: "iconcrack",
						num_particles: 6,
						on_entity_hit: true,
						on_other_hit: true
					}
				},
				power: 1.5,
				gravity: 0.03,
				angle_offset: 0
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:elder_guardian": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:elder_guardian",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 10 : 0"
			},
			"minecraft:collision_box": {
				width: 1.99,
				height: 1.99
			},
			"minecraft:nameable": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/elder_guardian.json"
			},
			"minecraft:navigation.generic": {
				is_amphibious: true,
				can_path_over_water: false,
				can_swim: true,
				can_walk: false,
				can_breach: true
			},
			"minecraft:movement.sway": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:health": {
				value: 80,
				max: 80
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:underwater_movement": {
				value: 0.3
			},
			"minecraft:attack": {
				damage: 5
			},
			"minecraft:follow_range": {
				value: 16,
				max: 16
			},
			"minecraft:breathable": {
				breathes_water: true
			},
			"minecraft:home": {
				restriction_radius: 16
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 1,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "squid"
								},
								{
									test: "is_family",
									subject: "other",
									value: "axolotl"
								}
							]
						},
						max_dist: 16
					}
				],
				attack_interval_min: 1,
				must_see: true
			},
			"minecraft:behavior.guardian_attack": {
				priority: 4
			},
			"minecraft:behavior.move_towards_home_restriction": {
				priority: 5,
				speed_multiplier: 1
			},
			"minecraft:behavior.random_swim": {
				priority: 7,
				speed_multiplier: 0.5,
				avoid_surface: false
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 12,
				probability: 0.01
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:type_family": {
				family: [
					"guardian_elder",
					"monster",
					"mob"
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		}
	}
},
	"minecraft:enderman": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:enderman",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:enderman_calm": {
				"minecraft:on_target_acquired": {
					event: "minecraft:become_angry",
					target: "self"
				},
				"minecraft:movement": {
					value: 0.3
				}
			},
			"minecraft:enderman_angry": {
				"minecraft:angry": {
					duration: 25,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:movement": {
					value: 0.45
				},
				"minecraft:behavior.melee_attack": {
					priority: 2
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:type_family": {
				family: [
					"enderman",
					"monster",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/enderman.json"
			},
			"minecraft:health": {
				value: 40,
				max: 40
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					},
					{
						filters: {
							test: "in_contact_with_water",
							operator: "==",
							value: true
						},
						cause: "drowning",
						damage_per_tick: 1
					}
				]
			},
			"minecraft:attack": {
				damage: 7
			},
			"minecraft:follow_range": {
				value: 32,
				max: 32
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 2.9
			},
			"minecraft:teleport": {
				random_teleports: true,
				max_random_teleport_time: 30,
				random_teleport_cube: [
					32,
					32,
					32
				],
				target_distance: 16,
				target_teleport_chance: 0.05,
				light_teleport_chance: 0.05
			},
			"minecraft:lookat": {
				search_radius: 64,
				set_target: true,
				look_cooldown: 5,
				filters: {
					all_of: [
						{
							subject: "other",
							test: "is_family",
							value: "player"
						},
						{
							test: "has_equipment",
							domain: "head",
							subject: "other",
							operator: "not",
							value: "carved_pumpkin"
						}
					]
				}
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 5,
				must_see: true,
				attack_interval: 10,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "endermite"
						},
						max_dist: 64
					}
				]
			},
			"minecraft:navigation.walk": {
				can_path_over_water: false,
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 8,
				probability: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 3
			},
			"minecraft:behavior.enderman_leave_block": {
				priority: 10
			},
			"minecraft:behavior.enderman_take_block": {
				priority: 11
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 10,
					use_motion_prediction_hints: true
				}
			}
		},
		events: {
			"minecraft:entity_spawned": {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:enderman_calm"
					]
				}
			},
			"minecraft:become_angry": {
				remove: {
					component_groups: [
						"minecraft:enderman_calm"
					]
				},
				add: {
					component_groups: [
						"minecraft:enderman_angry"
					]
				}
			},
			"minecraft:on_calm": {
				remove: {
					component_groups: [
						"minecraft:enderman_angry"
					]
				},
				add: {
					component_groups: [
						"minecraft:enderman_calm"
					]
				}
			}
		}
	}
},
	"minecraft:endermite": {
	format_version: "1.17.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:endermite",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 3 : 0"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"endermite",
					"arthropod",
					"monster",
					"lightweight",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.4,
				height: 0.3
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:health": {
				value: 8,
				max: 8
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:attack": {
				damage: 2
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.melee_attack": {
				priority: 3,
				track_target: true
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 5,
				must_see: true,
				within_radius: 16,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "enderman"
								}
							]
						},
						max_dist: 16
					}
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 1
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:block_climber": {
			}
		}
	}
},
	"minecraft:ender_crystal": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:ender_crystal",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			crystal_exploding: {
				"minecraft:explode": {
					fuse_length: 0,
					fuse_lit: true,
					power: 6,
					causes_fire: false,
					destroy_affected_by_griefing: true
				}
			}
		},
		components: {
			"minecraft:collision_box": {
				width: 0.98,
				height: 0.98
			},
			"minecraft:health": {
				value: 1,
				max: 1
			},
			"minecraft:fire_immune": true,
			"minecraft:on_hurt": {
				event: "minecraft:crystal_explode",
				target: "self"
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:crystal_explode": {
				remove: {
				},
				add: {
					component_groups: [
						"crystal_exploding"
					]
				}
			}
		}
	}
},
	"minecraft:ender_dragon": {
	format_version: "1.13.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:ender_dragon",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			dragon_sitting: {
				"minecraft:behavior.dragonlanding": {
					priority: 0
				},
				"minecraft:behavior.dragonflaming": {
					priority: 1
				},
				"minecraft:behavior.dragonscanning": {
					priority: 2
				}
			},
			dragon_flying: {
				"minecraft:behavior.dragontakeoff": {
					priority: 0
				},
				"minecraft:behavior.dragonchargeplayer": {
					priority: 1
				},
				"minecraft:behavior.dragonstrafeplayer": {
					priority: 2
				},
				"minecraft:behavior.dragonholdingpattern": {
					priority: 3
				},
				"minecraft:shooter": {
					type: "dragonfireball",
					def: "minecraft:dragon_fireball"
				}
			},
			dragon_death: {
				"minecraft:behavior.dragondeath": {
					priority: 0
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"dragon",
					"mob"
				]
			},
			"minecraft:health": {
				value: 200,
				max: 200
			},
			"minecraft:boss": {
				should_darken_sky: false,
				hud_range: 125
			},
			"minecraft:collision_box": {
				width: 13,
				height: 4
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:fire_immune": true,
			"minecraft:knockback_resistance": {
				value: 100,
				max: 100
			},
			"minecraft:flying_speed": {
				value: 0.6
			},
			"minecraft:attack": {
				damage: 3
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:on_start_landing": {
				event: "minecraft:start_land",
				target: "self"
			},
			"minecraft:on_start_takeoff": {
				event: "minecraft:start_fly",
				target: "self"
			},
			"minecraft:on_death": {
				event: "minecraft:start_death",
				target: "self"
			},
			"minecraft:persistent": {
			},
			"minecraft:physics": {
				has_gravity: false,
				has_collision: false
			},
			"minecraft:game_event_movement_tracking": {
				emit_flap: true
			}
		},
		events: {
			"minecraft:entity_spawned": {
				remove: {
				},
				add: {
					component_groups: [
						"dragon_flying"
					]
				}
			},
			"minecraft:start_land": {
				remove: {
					component_groups: [
						"dragon_flying"
					]
				},
				add: {
					component_groups: [
						"dragon_sitting"
					]
				}
			},
			"minecraft:start_fly": {
				remove: {
					component_groups: [
						"dragon_sitting"
					]
				},
				add: {
					component_groups: [
						"dragon_flying"
					]
				}
			},
			"minecraft:start_death": {
				remove: {
					component_groups: [
						"dragon_sitting",
						"dragon_flying"
					]
				},
				add: {
					component_groups: [
						"dragon_death"
					]
				}
			}
		}
	}
},
	"minecraft:ender_pearl": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:ender_pearl",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		component_groups: {
			"minecraft:no_spawn": {
				"minecraft:projectile": {
					on_hit: {
						teleport_owner: {
						},
						remove_on_hit: {
						}
					},
					power: 1.5,
					gravity: 0.025,
					angle_offset: 0,
					inertia: 1,
					liquid_inertia: 1
				}
			}
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:projectile": {
				on_hit: {
					teleport_owner: {
					},
					spawn_chance: {
						first_spawn_percent_chance: 5,
						first_spawn_count: 1,
						spawn_definition: "minecraft:endermite"
					},
					remove_on_hit: {
					}
				},
				power: 1.5,
				gravity: 0.025,
				angle_offset: 0,
				inertia: 1,
				liquid_inertia: 1
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						filters: {
							test: "is_game_rule",
							domain: "domobspawning",
							value: false
						},
						add: {
							component_groups: [
								"minecraft:no_spawn"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:evocation_illager": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:evocation_illager",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:celebrate": {
				"minecraft:behavior.celebrate": {
					priority: 5,
					celebration_sound: "celebrate",
					sound_interval: {
						range_min: 2,
						range_max: 7
					},
					jump_interval: {
						range_min: 1,
						range_max: 3.5
					},
					duration: 30,
					on_celebration_end_event: {
						event: "minecraft:stop_celebrating",
						target: "self"
					}
				}
			},
			"minecraft:raid_configuration": {
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "hostile",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: false,
					can_migrate: true,
					first_founding_reward: 0
				},
				"minecraft:behavior.move_to_village": {
					priority: 6,
					speed_multiplier: 0.7
				},
				"minecraft:ambient_sound_interval": {
					value: 2,
					range: 4,
					event_name: "ambient.in.raid"
				}
			},
			"minecraft:raid_persistence": {
				"minecraft:persistent": {
				}
			},
			"minecraft:raid_despawn": {
				"minecraft:despawn": {
					despawn_from_distance: {
					}
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "10"
			},
			"minecraft:type_family": {
				family: [
					"evocation_illager",
					"monster",
					"illager",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/evocation_illager.json"
			},
			"minecraft:health": {
				value: 24,
				max: 24
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:movement": {
				value: 0.5
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				can_pass_doors: true,
				can_open_doors: true,
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.summon_entity": {
				priority: 2,
				summon_choices: [
					{
						min_activation_range: 0,
						max_activation_range: 3,
						cooldown_time: 5,
						weight: 3,
						cast_duration: 2,
						particle_color: "#FF664D59",
						start_sound_event: "cast.spell",
						sequence: [
							{
								shape: "circle",
								target: "self",
								base_delay: 1,
								delay_per_summon: 0,
								num_entities_spawned: 5,
								entity_type: "minecraft:evocation_fang",
								size: 1.5,
								entity_lifespan: 1.1,
								sound_event: "prepare.attack"
							},
							{
								shape: "circle",
								target: "self",
								base_delay: 0.15,
								delay_per_summon: 0,
								num_entities_spawned: 8,
								entity_type: "minecraft:evocation_fang",
								size: 2.5,
								entity_lifespan: 1.1
							}
						]
					},
					{
						min_activation_range: 3,
						weight: 3,
						cooldown_time: 5,
						cast_duration: 2,
						particle_color: "#FF664D59",
						start_sound_event: "cast.spell",
						sequence: [
							{
								shape: "line",
								target: "self",
								base_delay: 1,
								delay_per_summon: 0.05,
								num_entities_spawned: 16,
								entity_type: "minecraft:evocation_fang",
								size: 20,
								entity_lifespan: 1.1
							}
						]
					},
					{
						weight: 1,
						cooldown_time: 17,
						cast_duration: 5,
						particle_color: "#FFB3B3CC",
						sequence: [
							{
								shape: "circle",
								target: "self",
								base_delay: 5,
								num_entities_spawned: 3,
								entity_type: "minecraft:vex",
								summon_cap: 8,
								summon_cap_radius: 16,
								size: 1,
								sound_event: "prepare.summon"
							}
						]
					}
				]
			},
			"minecraft:behavior.send_event": {
				priority: 3,
				event_choices: [
					{
						min_activation_range: 0,
						max_activation_range: 16,
						cooldown_time: 5,
						cast_duration: 3,
						particle_color: "#FFB38033",
						weight: 3,
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "sheep"
								},
								{
									test: "is_color",
									subject: "other",
									value: "blue"
								}
							]
						},
						start_sound_event: "cast.spell",
						sequence: [
							{
								base_delay: 2,
								event: "wololo",
								sound_event: "prepare.wololo"
							}
						]
					}
				]
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 5,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 8,
						walk_speed_multiplier: 0.6,
						sprint_speed_multiplier: 1
					}
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 8,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "snowgolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "wandering_trader"
								}
							]
						},
						max_dist: 20
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "villager"
								},
								{
									test: "has_component",
									subject: "other",
									operator: "!=",
									value: "minecraft:is_baby"
								}
							]
						},
						max_dist: 20
					}
				],
				must_see: true
			},
			"minecraft:behavior.look_at_player": {
				priority: 9,
				look_distance: 3,
				probability: 1
			},
			"minecraft:behavior.look_at_entity": {
				priority: 10,
				look_distance: 8,
				filters: {
					test: "is_family",
					subject: "other",
					value: "mob"
				}
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:persistent": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:follow_range": {
				value: 64
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:spawn_for_raid": {
				add: {
					component_groups: [
						"minecraft:raid_configuration",
						"minecraft:raid_despawn",
						"minecraft:raid_persistence"
					]
				}
			},
			"minecraft:start_celebrating": {
				sequence: [
					{
						add: {
							component_groups: [
								"minecraft:celebrate"
							]
						}
					},
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			},
			"minecraft:stop_celebrating": {
				remove: {
					component_groups: [
						"minecraft:celebrate"
					]
				}
			},
			"minecraft:raid_expired": {
				sequence: [
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:eye_of_ender_signal": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:eye_of_ender_signal",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 10,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:fireball": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:fireball",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		component_groups: {
			"minecraft:exploding": {
				"minecraft:explode": {
					fuse_length: 0,
					fuse_lit: true,
					power: 1,
					causes_fire: true,
					fire_affected_by_griefing: true,
					destroy_affected_by_griefing: true
				}
			}
		},
		components: {
			"minecraft:collision_box": {
				width: 1,
				height: 1
			},
			"minecraft:projectile": {
				on_hit: {
					impact_damage: {
						damage: 6,
						knockback: false,
						semi_random_diff_damage: false
					},
					definition_event: {
						affect_projectile: true,
						event_trigger: {
							event: "minecraft:explode",
							target: "self"
						}
					}
				},
				power: 1.6,
				gravity: 0,
				inertia: 1,
				liquid_inertia: 1,
				uncertainty_base: 0,
				uncertainty_multiplier: 0,
				anchor: 1,
				offset: [
					0,
					-0.1,
					0
				],
				reflect_on_hurt: true,
				catch_fire: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		},
		events: {
			"minecraft:explode": {
				add: {
					component_groups: [
						"minecraft:exploding"
					]
				}
			}
		}
	}
},
	"minecraft:fireworks_rocket": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:fireworks_rocket",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 10,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:fish": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:cod",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
			},
			"minecraft:type_family": {
				family: [
					"cod",
					"fish"
				]
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 0.3
			},
			"minecraft:health": {
				value: 3,
				max: 3
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/fish.json"
			},
			"minecraft:scale": {
				value: 1
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_air: false,
				breathes_water: true
			},
			"minecraft:movement": {
				value: 0.1
			},
			"minecraft:underwater_movement": {
				value: 0.1
			},
			"minecraft:navigation.generic": {
				is_amphibious: false,
				can_path_over_water: false,
				can_swim: true,
				can_walk: false,
				can_breach: false,
				can_sink: false
			},
			"minecraft:physics": {
				has_gravity: false
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:movement.sway": {
				sway_amplitude: 0
			},
			"minecraft:despawn": {
				despawn_from_distance: {
					min_distance: 32,
					max_distance: 40
				}
			},
			"minecraft:behavior.swim_idle": {
				priority: 5,
				idle_time: 5,
				success_rate: 0.1
			},
			"minecraft:behavior.random_swim": {
				priority: 3,
				speed_multiplier: 1,
				xz_dist: 16,
				y_dist: 4,
				interval: 0
			},
			"minecraft:behavior.swim_wander": {
				priority: 4,
				interval: 0.1,
				look_ahead: 2,
				speed_multiplier: 1,
				wander_time: 5
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 1,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "axolotl"
								}
							]
						},
						max_dist: 6,
						walk_speed_multiplier: 1.5,
						sprint_speed_multiplier: 2
					}
				]
			},
			"minecraft:flocking": {
				in_water: true,
				match_variants: false,
				use_center_of_mass: true,
				low_flock_limit: 4,
				high_flock_limit: 8,
				goal_weight: 2,
				loner_chance: 0.1,
				influence_radius: 3,
				breach_influence: 7,
				separation_weight: 1.75,
				separation_threshold: 0.95,
				cohesion_weight: 2,
				cohesion_threshold: 1.95,
				innner_cohesion_threshold: 1.25,
				min_height: 1.5,
				max_height: 6,
				block_distance: 2,
				block_weight: 0.85
			},
			"minecraft:nameable": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		}
	}
},
	"minecraft:fishing_hook": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:fishing_hook",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		component_groups: {
			loot_jungle: {
				"minecraft:loot": {
					table: "loot_tables/gameplay/jungle_fishing.json"
				}
			}
		},
		components: {
			"minecraft:collision_box": {
				width: 0.15,
				height: 0.15
			},
			"minecraft:projectile": {
				on_hit: {
					stick_in_ground: {
					}
				}
			},
			"minecraft:loot": {
				table: "loot_tables/gameplay/fishing.json"
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: false,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						filters: {
							test: "is_biome",
							value: "jungle"
						},
						add: {
							component_groups: [
								"loot_jungle"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:fox": {
	format_version: "1.17.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:fox",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:fox_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"sweet_berries",
						"glow_berries"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 9,
					speed_multiplier: 1.1
				}
			},
			"minecraft:fox_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/fox.json"
				},
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: false,
					breed_items: [
						"sweet_berries",
						"glow_berries"
					],
					breeds_with: {
						mate_type: "minecraft:fox",
						baby_type: "minecraft:fox",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					}
				}
			},
			"minecraft:fox_with_item": {
				"minecraft:equipment": {
					table: "loot_tables/entities/fox_equipment.json",
					slot_drop_chance: [
						{
							slot: "slot.weapon.mainhand",
							drop_chance: 1
						}
					]
				}
			},
			"minecraft:trusting_fox": {
				"minecraft:trust": {
				},
				"minecraft:behavior.defend_trusted_target": {
					priority: 0,
					within_radius: 25,
					must_see: false,
					aggro_sound: "mad",
					sound_chance: 0.05,
					on_defend_start: {
						event: "minecraft:fox_configure_defending",
						target: "self"
					}
				}
			},
			"minecraft:docile_fox": {
				"minecraft:behavior.panic": {
					priority: 1,
					speed_multiplier: 1.25
				},
				"minecraft:behavior.melee_attack": {
					priority: 10,
					track_target: true,
					require_complete_path: true,
					reach_multiplier: 1.5
				}
			},
			"minecraft:defending_fox": {
				"minecraft:behavior.melee_attack": {
					priority: 1,
					track_target: true,
					require_complete_path: true,
					reach_multiplier: 1.5
				},
				"minecraft:behavior.panic": {
					priority: 2,
					speed_multiplier: 1.25
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								all_of: [
									{
										test: "is_daytime",
										value: true
									},
									{
										test: "has_target",
										operator: "==",
										value: false
									}
								]
							},
							event: "minecraft:fox_configure_docile_day"
						},
						{
							filters: {
								all_of: [
									{
										test: "is_daytime",
										value: false
									},
									{
										test: "has_target",
										operator: "==",
										value: false
									}
								]
							},
							event: "minecraft:fox_configure_docile_night"
						}
					]
				}
			},
			"minecraft:fox_red": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:behavior.nearest_prioritized_attackable_target": {
					priority: 6,
					attack_interval: 2,
					reselect_targets: true,
					target_search_height: 5,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "rabbit"
							},
							max_dist: 12,
							priority: 0
						},
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "chicken"
							},
							max_dist: 12,
							priority: 0
						},
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "cod"
							},
							max_dist: 12,
							priority: 1
						},
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "salmon"
							},
							max_dist: 12,
							priority: 1
						},
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "tropicalfish"
							},
							max_dist: 12,
							priority: 1
						},
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "baby_turtle"
									},
									{
										test: "in_water",
										subject: "other",
										operator: "!=",
										value: true
									}
								]
							},
							max_dist: 12,
							priority: 0
						}
					]
				}
			},
			"minecraft:fox_arctic": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:behavior.nearest_prioritized_attackable_target": {
					priority: 6,
					attack_interval: 2,
					reselect_targets: true,
					target_search_height: 5,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "rabbit"
							},
							max_dist: 12,
							priority: 1
						},
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "chicken"
							},
							max_dist: 12,
							priority: 1
						},
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "cod"
							},
							max_dist: 12,
							priority: 0
						},
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "salmon"
							},
							max_dist: 12,
							priority: 0
						},
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "tropicalfish"
							},
							max_dist: 12,
							priority: 0
						},
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "baby_turtle"
									},
									{
										test: "in_water",
										subject: "other",
										operator: "!=",
										value: true
									}
								]
							},
							max_dist: 12,
							priority: 1
						}
					]
				}
			},
			"minecraft:fox_thunderstorm": {
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								all_of: [
									{
										test: "weather_at_position",
										operator: "!=",
										value: "thunderstorm"
									},
									{
										test: "is_daytime",
										value: true
									}
								]
							},
							event: "minecraft:fox_configure_day"
						},
						{
							filters: {
								all_of: [
									{
										test: "weather_at_position",
										operator: "!=",
										value: "thunderstorm"
									},
									{
										test: "is_daytime",
										value: false
									}
								]
							},
							event: "minecraft:fox_configure_night"
						}
					]
				},
				"minecraft:behavior.find_cover": {
					priority: 0,
					speed_multiplier: 1,
					cooldown_time: 0
				}
			},
			"minecraft:fox_day": {
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								test: "weather_at_position",
								value: "thunderstorm"
							},
							event: "minecraft:fox_configure_thunderstorm"
						},
						{
							filters: {
								test: "is_daytime",
								value: false
							},
							event: "minecraft:fox_configure_night"
						}
					]
				},
				"minecraft:behavior.nap": {
					priority: 8,
					cooldown_min: 2,
					cooldown_max: 7,
					mob_detect_dist: 12,
					mob_detect_height: 6,
					can_nap_filters: {
						all_of: [
							{
								test: "in_water",
								subject: "self",
								operator: "==",
								value: false
							},
							{
								test: "on_ground",
								subject: "self",
								operator: "==",
								value: true
							},
							{
								test: "is_underground",
								subject: "self",
								operator: "==",
								value: true
							},
							{
								test: "weather_at_position",
								subject: "self",
								operator: "!=",
								value: "thunderstorm"
							}
						]
					},
					wake_mob_exceptions: {
						any_of: [
							{
								test: "trusts",
								subject: "other",
								operator: "==",
								value: true
							},
							{
								test: "is_family",
								subject: "other",
								operator: "==",
								value: "fox"
							},
							{
								test: "is_sneaking",
								subject: "other",
								operator: "==",
								value: true
							}
						]
					}
				},
				"minecraft:behavior.find_cover": {
					priority: 9,
					speed_multiplier: 1,
					cooldown_time: 5
				}
			},
			"minecraft:fox_night": {
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								test: "weather_at_position",
								value: "thunderstorm"
							},
							event: "minecraft:fox_configure_thunderstorm"
						},
						{
							filters: {
								test: "is_daytime",
								value: true
							},
							event: "minecraft:fox_configure_day"
						}
					]
				},
				"minecraft:behavior.stroll_towards_village": {
					priority: 11,
					speed_multiplier: 1,
					goal_radius: 3,
					cooldown_time: 10,
					search_range: 32,
					start_chance: 0.005
				}
			},
			"minecraft:fox_ambient_normal": {
				"minecraft:ambient_sound_interval": {
					event_name: "ambient"
				}
			},
			"minecraft:fox_ambient_sleep": {
				"minecraft:ambient_sound_interval": {
					event_name: "sleep"
				}
			},
			"minecraft:fox_ambient_night": {
				"minecraft:ambient_sound_interval": {
					event_name: "screech",
					value: 80,
					range: 160
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"fox",
					"lightweight",
					"mob"
				]
			},
			"minecraft:breathable": {
				totalSupply: 15,
				suffocateTime: 0
			},
			"minecraft:equip_item": {
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 0.7
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:attack": {
				damage: 2
			},
			"minecraft:shareables": {
				all_items: true,
				all_items_max_amount: 1,
				items: [
					{
						item: "minecraft:apple",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:appleEnchanted",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:baked_potato",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:beef",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:beetroot",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:beetroot_soup",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:bread",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:carrot",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:chicken",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:chorus_fruit",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:clownfish",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:cooked_beef",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:cooked_chicken",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:cooked_fish",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:cooked_porkchop",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:cooked_rabbit",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:cooked_salmon",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:cookie",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:dried_kelp",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:fish",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:golden_apple",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:golden_carrot",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:melon",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:mushroom_stew",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:muttonCooked",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:muttonRaw",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:poisonous_potato",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:porkchop",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:potato",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:pufferfish",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:pumpkin_pie",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:rabbit",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:rabbit_stew",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:rotten_flesh",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:salmon",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:spider_eye",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:sweet_berries",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:glow_berries",
						priority: 0,
						max_amount: 1
					},
					{
						item: "minecraft:suspicious_stew",
						priority: 0,
						max_amount: 1
					}
				]
			},
			"minecraft:damage_sensor": {
				triggers: [
					{
						on_damage: {
							filters: {
								test: "is_block",
								subject: "block",
								value: "minecraft:sweet_berry_bush"
							}
						},
						deals_damage: false
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.equip_item": {
				priority: 2
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 5,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									all_of: [
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "trusts",
											subject: "other",
											operator: "!=",
											value: true
										},
										{
											test: "is_sneaking",
											subject: "other",
											operator: "!=",
											value: true
										}
									]
								},
								{
									test: "is_family",
									subject: "other",
									value: "polarbear"
								},
								{
									test: "is_family",
									subject: "other",
									value: "wolf"
								}
							]
						},
						max_dist: 10,
						walk_speed_multiplier: 1,
						sprint_speed_multiplier: 1.5
					}
				]
			},
			"minecraft:behavior.tempt": {
				priority: 3,
				speed_multiplier: 0.5,
				within_radius: 16,
				can_get_scared: true,
				items: [
					"sweet_berries",
					"glow_berries"
				]
			},
			"minecraft:behavior.stalk_and_pounce_on_target": {
				priority: 7,
				stalk_speed: 1.2,
				max_stalk_dist: 12,
				leap_height: 0.9,
				leap_dist: 0.8,
				pounce_max_dist: 5,
				interest_time: 2,
				stuck_time: 2,
				strike_dist: 2,
				stuck_blocks: {
					test: "is_block",
					subject: "block",
					operator: "==",
					value: "snow_layer"
				}
			},
			"minecraft:behavior.pickup_items": {
				priority: 11,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 0.5
			},
			"minecraft:behavior.eat_carried_item": {
				priority: 12,
				delay_before_eating: 28
			},
			"minecraft:behavior.random_look_around_and_sit": {
				priority: 12,
				min_look_count: 2,
				max_look_count: 5,
				min_look_time: 80,
				max_look_time: 100,
				probability: 0.001
			},
			"minecraft:behavior.raid_garden": {
				priority: 12,
				blocks: [
					"minecraft:sweet_berry_bush",
					"minecraft:cave_vines_head_with_berries",
					"minecraft:cave_vines_body_with_berries"
				],
				speed_multiplier: 1.2,
				search_range: 12,
				search_height: 2,
				goal_radius: 0.8,
				max_to_eat: 0,
				initial_eat_delay: 2
			},
			"minecraft:behavior.random_stroll": {
				priority: 13,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.look_at_player": {
				priority: 14,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 15
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 0.6
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:scheduler": {
				min_delay_secs: 0,
				max_delay_secs: 0,
				scheduled_events: [
					{
						filters: [
							{
								test: "is_sleeping",
								value: true
							}
						],
						event: "minecraft:ambient_sleep"
					},
					{
						filters: {
							all_of: [
								{
									test: "is_daytime",
									value: false
								},
								{
									test: "distance_to_nearest_player",
									operator: ">",
									value: 16
								}
							]
						},
						event: "minecraft:ambient_night"
					},
					{
						filters: {
							all_of: [
								{
									test: "is_sleeping",
									value: false
								},
								{
									any_of: [
										{
											test: "is_daytime",
											value: true
										},
										{
											test: "distance_to_nearest_player",
											operator: "<=",
											value: 16
										}
									]
								}
							]
						},
						event: "minecraft:ambient_normal"
					}
				]
			},
			"minecraft:environment_sensor": {
				triggers: [
					{
						filters: {
							test: "is_daytime",
							value: false
						},
						event: "minecraft:fox_configure_night"
					},
					{
						filters: {
							test: "is_daytime",
							value: true
						},
						event: "minecraft:fox_configure_day"
					}
				]
			},
			"minecraft:block_climber": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 95,
								add: {
									component_groups: [
										"minecraft:fox_adult",
										"minecraft:fox_with_item",
										"minecraft:docile_fox"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"minecraft:fox_baby",
										"minecraft:docile_fox"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "is_snow_covered",
							value: true
						},
						add: {
							component_groups: [
								"minecraft:fox_arctic"
							]
						}
					},
					{
						filters: {
							test: "is_snow_covered",
							value: false
						},
						add: {
							component_groups: [
								"minecraft:fox_red"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:fox_baby",
						"minecraft:trusting_fox",
						"minecraft:docile_fox"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:fox_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:fox_adult"
					]
				}
			},
			"minecraft:fox_configure_thunderstorm": {
				remove: {
					component_groups: [
						"minecraft:fox_night",
						"minecraft:fox_day"
					]
				},
				add: {
					component_groups: [
						"minecraft:fox_thunderstorm"
					]
				}
			},
			"minecraft:fox_configure_day": {
				remove: {
					component_groups: [
						"minecraft:fox_night",
						"minecraft:fox_thunderstorm"
					]
				},
				add: {
					component_groups: [
						"minecraft:fox_day"
					]
				}
			},
			"minecraft:fox_configure_night": {
				remove: {
					component_groups: [
						"minecraft:fox_day",
						"minecraft:fox_thunderstorm"
					]
				},
				add: {
					component_groups: [
						"minecraft:fox_night"
					]
				}
			},
			"minecraft:ambient_normal": {
				add: {
					component_groups: [
						"minecraft:fox_ambient_normal"
					]
				}
			},
			"minecraft:ambient_sleep": {
				add: {
					component_groups: [
						"minecraft:fox_ambient_sleep"
					]
				}
			},
			"minecraft:ambient_night": {
				add: {
					component_groups: [
						"minecraft:fox_ambient_night"
					]
				}
			},
			"minecraft:fox_configure_defending": {
				remove: {
					component_groups: [
						"minecraft:docile_fox",
						"minecraft:fox_day",
						"minecraft:fox_night"
					]
				},
				add: {
					component_groups: [
						"minecraft:defending_fox"
					]
				}
			},
			"minecraft:fox_configure_docile_day": {
				remove: {
					component_groups: [
						"minecraft:defending_fox",
						"minecraft:fox_night"
					]
				},
				add: {
					component_groups: [
						"minecraft:docile_fox",
						"minecraft:fox_day"
					]
				}
			},
			"minecraft:fox_configure_docile_night": {
				remove: {
					component_groups: [
						"minecraft:defending_fox",
						"minecraft:fox_day"
					]
				},
				add: {
					component_groups: [
						"minecraft:docile_fox",
						"minecraft:fox_night"
					]
				}
			}
		}
	}
},
	"minecraft:frog": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:frog",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			temperate_frog: {
				"minecraft:variant": {
					value: 0
				}
			},
			cold_frog: {
				"minecraft:variant": {
					value: 1
				}
			},
			warm_frog: {
				"minecraft:variant": {
					value: 2
				}
			},
			pregnant: {
				"minecraft:behavior.lay_egg": {
					priority: 2,
					speed_multiplier: 1,
					search_range: 10,
					search_height: 3,
					goal_radius: 1.7,
					target_blocks: [
						"minecraft:water"
					],
					target_materials_above_block: [
						"Air"
					],
					allow_laying_from_below: true,
					use_default_animation: false,
					lay_seconds: 2,
					egg_type: "minecraft:frog_spawn",
					lay_egg_sound: "lay_spawn",
					on_lay: {
						event: "laid_egg",
						target: "self"
					}
				},
				"minecraft:behavior.move_to_water": {
					priority: 3,
					search_range: 20,
					search_height: 5,
					goal_radius: 1.5
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"frog",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.5,
				height: 0.55
			},
			"minecraft:experience_reward": {
				on_bred: "Math.Random(1,7)",
				on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true,
				breathes_air: true,
				generates_bubbles: false
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 10
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: true,
					damage_modifier: -5
				}
			},
			"minecraft:navigation.generic": {
				is_amphibious: true,
				can_path_over_water: true,
				can_swim: true,
				can_walk: true,
				can_sink: false,
				avoid_damage_blocks: true
			},
			"minecraft:movement.amphibious": {
			},
			"minecraft:movement": {
				value: 0.1
			},
			"minecraft:underwater_movement": {
				value: 0.15
			},
			"minecraft:jump.static": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
			},
			"minecraft:leashable": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:breedable": {
				require_tame: false,
				causes_pregnancy: true,
				breeds_with: {
					mate_type: "minecraft:frog",
					baby_type: "minecraft:tadpole",
					breed_event: {
						event: "become_pregnant"
					}
				},
				breed_items: [
					"slime_ball"
				]
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 2
			},
			"minecraft:behavior.breed": {
				priority: 4
			},
			"minecraft:behavior.tempt": {
				priority: 5,
				speed_multiplier: 1.25,
				can_tempt_vertically: true,
				items: [
					"slime_ball"
				]
			},
			"minecraft:behavior.move_to_land": {
				priority: 6,
				search_range: 30,
				search_height: 8,
				search_count: 80,
				goal_radius: 2
			},
			"minecraft:behavior.eat_mob": {
				priority: 7,
				run_speed: 2,
				eat_animation_time: 0.3,
				pull_in_force: 0.75,
				reach_mob_distance: 1.75,
				eat_mob_sound: "tongue",
				loot_table: "loot_tables/entities/frog.json"
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 8,
				within_radius: 16,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "slime"
								},
								{
									test: "is_variant",
									subject: "other",
									operator: "==",
									value: 1
								}
							]
						},
						max_dist: 16
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "magmacube"
								},
								{
									test: "is_variant",
									subject: "other",
									operator: "==",
									value: 1
								}
							]
						},
						max_dist: 16
					}
				],
				must_see: true
			},
			"minecraft:behavior.croak": {
				priority: 9,
				interval: [
					10,
					20
				],
				duration: 4.5,
				filters: {
					all_of: [
						{
							test: "in_water",
							value: false
						},
						{
							test: "in_lava",
							value: false
						}
					]
				}
			},
			"minecraft:behavior.jump_to_block": {
				priority: 10,
				search_width: 8,
				search_height: 4,
				minimum_path_length: 2,
				minimum_distance: 1,
				scale_factor: 0.6,
				max_velocity: 1,
				cooldown_range: [
					5,
					7
				],
				preferred_blocks: [
					"minecraft:waterlily",
					"minecraft:big_dripleaf"
				],
				preferred_blocks_chance: 0.5,
				forbidden_blocks: [
					"minecraft:water"
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 11
			},
			"minecraft:behavior.look_at_player": {
				priority: 12,
				target_distance: 6,
				probability: 0.02
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						add: {
							component_groups: [
								"temperate_frog"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "desert"
								},
								{
									test: "has_biome_tag",
									value: "jungle"
								},
								{
									test: "has_biome_tag",
									value: "savanna"
								},
								{
									test: "has_biome_tag",
									value: "mesa"
								},
								{
									test: "has_biome_tag",
									value: "nether"
								},
								{
									all_of: [
										{
											test: "has_biome_tag",
											value: "warm"
										},
										{
											test: "has_biome_tag",
											value: "ocean"
										}
									]
								},
								{
									all_of: [
										{
											test: "has_biome_tag",
											value: "lukewarm"
										},
										{
											test: "has_biome_tag",
											value: "ocean"
										}
									]
								},
								{
									test: "has_biome_tag",
									value: "mangrove_swamp"
								}
							]
						},
						add: {
							component_groups: [
								"warm_frog"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "mountain"
								},
								{
									all_of: [
										{
											test: "has_biome_tag",
											value: "mountains"
										},
										{
											test: "has_biome_tag",
											operator: "!=",
											value: "meadow"
										},
										{
											test: "has_biome_tag",
											operator: "!=",
											value: "stony_peaks"
										}
									]
								},
								{
									test: "has_biome_tag",
									value: "ice"
								},
								{
									test: "has_biome_tag",
									value: "cold"
								},
								{
									test: "has_biome_tag",
									value: "frozen"
								},
								{
									test: "has_biome_tag",
									value: "the_end"
								},
								{
									test: "has_biome_tag",
									value: "deep_dark"
								}
							]
						},
						add: {
							component_groups: [
								"cold_frog"
							]
						}
					}
				]
			},
			spawn_temperate: {
				add: {
					component_groups: [
						"temperate_frog"
					]
				}
			},
			spawn_cold: {
				add: {
					component_groups: [
						"cold_frog"
					]
				}
			},
			spawn_warm: {
				add: {
					component_groups: [
						"warm_frog"
					]
				}
			},
			"minecraft:entity_transformed": {
				sequence: [
					{
						add: {
							component_groups: [
								"temperate_frog"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "desert"
								},
								{
									test: "has_biome_tag",
									value: "jungle"
								},
								{
									test: "has_biome_tag",
									value: "savanna"
								},
								{
									test: "has_biome_tag",
									value: "mesa"
								},
								{
									test: "has_biome_tag",
									value: "nether"
								},
								{
									all_of: [
										{
											test: "has_biome_tag",
											value: "warm"
										},
										{
											test: "has_biome_tag",
											value: "ocean"
										}
									]
								},
								{
									all_of: [
										{
											test: "has_biome_tag",
											value: "lukewarm"
										},
										{
											test: "has_biome_tag",
											value: "ocean"
										}
									]
								},
								{
									test: "has_biome_tag",
									value: "mangrove_swamp"
								}
							]
						},
						add: {
							component_groups: [
								"warm_frog"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "mountain"
								},
								{
									all_of: [
										{
											test: "has_biome_tag",
											value: "mountains"
										},
										{
											test: "has_biome_tag",
											operator: "!=",
											value: "meadow"
										},
										{
											test: "has_biome_tag",
											operator: "!=",
											value: "stony_peaks"
										}
									]
								},
								{
									test: "has_biome_tag",
									value: "ice"
								},
								{
									test: "has_biome_tag",
									value: "cold"
								},
								{
									test: "has_biome_tag",
									value: "frozen"
								},
								{
									test: "has_biome_tag",
									value: "the_end"
								},
								{
									test: "has_biome_tag",
									value: "deep_dark"
								}
							]
						},
						add: {
							component_groups: [
								"cold_frog"
							]
						}
					}
				]
			},
			become_pregnant: {
				add: {
					component_groups: [
						"pregnant"
					]
				}
			},
			laid_egg: {
				remove: {
					component_groups: [
						"pregnant"
					]
				}
			}
		}
	}
},
	"minecraft:ghast": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:ghast",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:fire_immune": {
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:collision_box": {
				width: 4.02,
				height: 4
			},
			"minecraft:movement": {
				value: 0.03
			},
			"minecraft:navigation.float": {
				can_path_over_water: true
			},
			"minecraft:behavior.float_wander": {
				priority: 2,
				must_reach: true
			},
			"minecraft:can_fly": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/ghast.json"
			},
			"minecraft:shooter": {
				def: "minecraft:fireball"
			},
			"minecraft:type_family": {
				family: [
					"ghast",
					"monster",
					"mob"
				]
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:jump.static": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.ranged_attack": {
				priority: 1,
				attack_radius: 64,
				charge_shoot_trigger: 2,
				charge_charged_trigger: 1
			},
			"minecraft:follow_range": {
				value: 64,
				max: 64
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 28
					}
				],
				must_see: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		}
	}
},
	"minecraft:glow_squid": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:glow_squid",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:squid_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "!query.is_baby && query.last_hit_by_player ? Math.Random(1,3) : 0"
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"squid",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.95,
				height: 0.95
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/glow_squid.json"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_air: false,
				breathes_water: true
			},
			"minecraft:movement": {
				value: 0.2
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				can_sink: false
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 0.5
			},
			"minecraft:behavior.squid_move_away_from_ground": {
				priority: 1
			},
			"minecraft:behavior.squid_flee": {
				priority: 2
			},
			"minecraft:behavior.squid_idle": {
				priority: 2
			},
			"minecraft:behavior.squid_dive": {
				priority: 2
			},
			"minecraft:behavior.squid_out_of_water": {
				priority: 2
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						remove: {
						},
						add: {
						}
					},
					{
						weight: 5,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:squid_baby"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:goat": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:goat",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			goat_baby: {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:behavior.follow_parent": {
					priority: 6,
					speed_multiplier: 1
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: "wheat",
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:attack": {
					damage: 1
				}
			},
			goat_adult: {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/goat.json"
				},
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 0.6
				},
				"minecraft:breedable": {
					require_tame: false,
					breed_items: "wheat",
					breeds_with: {
						mate_type: "minecraft:goat",
						baby_type: "minecraft:goat",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					mutation_factor: {
						variant: 0
					}
				},
				"minecraft:attack": {
					damage: 2
				}
			},
			goat_default: {
				"minecraft:variant": {
					value: 0
				}
			},
			goat_screamer: {
				"minecraft:variant": {
					value: 1
				}
			},
			interact_default: {
				"minecraft:interact": {
					interactions: [
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_component",
											subject: "self",
											operator: "!=",
											value: "minecraft:is_baby"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "has_equipment",
											domain: "hand",
											subject: "other",
											value: "bucket:0"
										}
									]
								}
							},
							use_item: true,
							transform_to_item: "bucket:1",
							play_sounds: "milk_suspiciously",
							interact_text: "action.interact.milk"
						}
					]
				}
			},
			interact_screamer: {
				"minecraft:interact": {
					interactions: [
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_component",
											subject: "self",
											operator: "!=",
											value: "minecraft:is_baby"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "has_equipment",
											domain: "hand",
											subject: "other",
											value: "bucket:0"
										}
									]
								}
							},
							use_item: true,
							transform_to_item: "bucket:1",
							play_sounds: "milk.screamer",
							interact_text: "action.interact.milk"
						}
					]
				}
			},
			ram_default: {
				"minecraft:behavior.ram_attack": {
					priority: 5,
					run_speed: 0.7,
					ram_speed: 1.8,
					min_ram_distance: 4,
					ram_distance: 7,
					knockback_force: 2.5,
					knockback_height: 0.04,
					pre_ram_sound: "pre_ram",
					ram_impact_sound: "ram_impact",
					cooldown_range: [
						30,
						300
					],
					on_start: [
						{
							event: "start_event",
							target: "self"
						}
					]
				}
			},
			ram_screamer: {
				"minecraft:behavior.ram_attack": {
					priority: 5,
					run_speed: 0.7,
					ram_speed: 1.8,
					min_ram_distance: 4,
					ram_distance: 7,
					knockback_force: 2.5,
					knockback_height: 0.04,
					pre_ram_sound: "pre_ram.screamer",
					ram_impact_sound: "ram_impact.screamer",
					cooldown_range: [
						5,
						15
					],
					on_start: [
						{
							event: "start_event",
							target: "self"
						}
					]
				}
			},
			attack_cooldown: {
				"minecraft:attack_cooldown": {
					attack_cooldown_time: [
						30,
						40
					],
					attack_cooldown_complete_event: {
						event: "attack_cooldown_complete_event",
						target: "self"
					}
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:behavior.jump_to_block": {
				priority: 8,
				search_width: 10,
				search_height: 10,
				minimum_path_length: 8,
				minimum_distance: 1,
				scale_factor: 0.6,
				cooldown_range: [
					30,
					60
				]
			},
			"minecraft:genetics": {
				mutation_rate: 0.02,
				genes: [
					{
						name: "goat_variant",
						use_simplified_breeding: true,
						allele_range: {
							range_min: 1,
							range_max: 100
						},
						genetic_variants: [
							{
								main_allele: {
									range_min: 1,
									range_max: 2
								},
								birth_event: {
									event: "minecraft:born_screamer",
									target: "self"
								}
							},
							{
								main_allele: {
									range_min: 3,
									range_max: 100
								},
								birth_event: {
									event: "minecraft:born_default",
									target: "self"
								}
							}
						]
					}
				]
			},
			"minecraft:type_family": {
				family: [
					"goat",
					"animal"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true,
				blocks_to_avoid: [
					{
						name: "minecraft:powder_snow"
					}
				]
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 1.3
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.4
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1
			},
			"minecraft:behavior.tempt": {
				priority: 4,
				speed_multiplier: 0.75,
				items: [
					"wheat"
				]
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 6,
				within_radius: 16,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "goat"
								},
								{
									test: "has_component",
									subject: "self",
									operator: "!=",
									value: "minecraft:attack_cooldown"
								}
							]
						},
						max_dist: 16
					}
				],
				must_see: true
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: true,
					damage_modifier: -10
				}
			},
			"minecraft:behavior.random_stroll": {
				priority: 9,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.look_at_player": {
				priority: 10,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 11
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						add: {
							component_groups: [
								"goat_adult"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"goat_baby"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"goat_baby"
					]
				}
			},
			"minecraft:born_default": {
				add: {
					component_groups: [
						"goat_default",
						"ram_default",
						"interact_default"
					]
				}
			},
			"minecraft:born_screamer": {
				add: {
					component_groups: [
						"goat_screamer",
						"ram_screamer",
						"interact_screamer"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"goat_baby"
					]
				},
				add: {
					component_groups: [
						"goat_adult"
					]
				}
			},
			start_event: {
				add: {
					component_groups: [
						"attack_cooldown"
					]
				}
			},
			attack_cooldown_complete_event: {
				remove: {
					component_groups: [
						"attack_cooldown"
					]
				}
			}
		}
	}
},
	"minecraft:guardian": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:guardian",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:guardian_aggressive": {
				"minecraft:behavior.nearest_attackable_target": {
					priority: 1,
					entity_types: [
						{
							filters: {
								any_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "is_family",
										subject: "other",
										value: "squid"
									},
									{
										test: "is_family",
										subject: "other",
										value: "axolotl"
									}
								]
							},
							max_dist: 16
						}
					],
					attack_interval_min: 1,
					must_see: true
				},
				"minecraft:target_nearby_sensor": {
					inside_range: 3,
					outside_range: 4,
					on_inside_range: {
						event: "minecraft:target_too_close",
						target: "self"
					}
				},
				"minecraft:behavior.guardian_attack": {
					priority: 4
				}
			},
			"minecraft:guardian_passive": {
				"minecraft:timer": {
					time: [
						1,
						3
					],
					looping: false,
					time_down_event: {
						event: "minecraft:target_far_enough",
						target: "self"
					}
				},
				"minecraft:behavior.avoid_mob_type": {
					priority: 1,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "player"
							},
							max_dist: 8,
							walk_speed_multiplier: 1,
							sprint_speed_multiplier: 1
						}
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 10 : 0"
			},
			"minecraft:nameable": {
			},
			"minecraft:collision_box": {
				width: 0.85,
				height: 0.85
			},
			"minecraft:health": {
				value: 30,
				max: 30
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.12
			},
			"minecraft:underwater_movement": {
				value: 0.12
			},
			"minecraft:attack": {
				damage: 5
			},
			"minecraft:follow_range": {
				value: 16,
				max: 16
			},
			"minecraft:navigation.generic": {
				is_amphibious: true,
				can_path_over_water: false,
				can_swim: true,
				can_walk: false,
				can_breach: true
			},
			"minecraft:movement.sway": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:breathable": {
				breathes_water: true
			},
			"minecraft:loot": {
				table: "loot_tables/entities/guardian.json"
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:home": {
				restriction_radius: 16
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 1,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "squid"
								},
								{
									test: "is_family",
									subject: "other",
									value: "axolotl"
								}
							]
						},
						max_dist: 16
					}
				],
				attack_interval_min: 1,
				must_see: true
			},
			"minecraft:target_nearby_sensor": {
				inside_range: 3,
				outside_range: 4,
				on_inside_range: {
					event: "minecraft:target_too_close",
					target: "self"
				}
			},
			"minecraft:behavior.guardian_attack": {
				priority: 4
			},
			"minecraft:behavior.move_towards_home_restriction": {
				priority: 5,
				speed_multiplier: 1
			},
			"minecraft:behavior.random_swim": {
				priority: 7,
				speed_multiplier: 1,
				interval: 80,
				avoid_surface: false
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 12,
				probability: 0.01
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:type_family": {
				family: [
					"guardian",
					"monster",
					"mob"
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:target_too_close": {
				remove: {
					component_groups: [
						"minecraft:guardian_aggressive"
					]
				},
				add: {
					component_groups: [
						"minecraft:guardian_passive"
					]
				}
			},
			"minecraft:target_far_enough": {
				remove: {
					component_groups: [
						"minecraft:guardian_passive"
					]
				},
				add: {
					component_groups: [
						"minecraft:guardian_aggressive"
					]
				}
			}
		}
	}
},
	"minecraft:hoglin": {
	format_version: "1.18.30",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:hoglin",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			zombification_sensor: {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "in_nether",
							subject: "self",
							operator: "==",
							value: false
						},
						event: "start_zombification_event"
					}
				}
			},
			start_zombification: {
				"minecraft:is_shaking": {
				},
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "in_nether",
							subject: "self",
							operator: "==",
							value: true
						},
						event: "stop_zombification_event"
					}
				},
				"minecraft:timer": {
					looping: false,
					time: 15,
					time_down_event: {
						event: "become_zombie_event"
					}
				}
			},
			become_zombie: {
				"minecraft:transformation": {
					into: "minecraft:zoglin",
					transformation_sound: "converted_to_zombified",
					keep_level: true
				}
			},
			angry_hoglin: {
				"minecraft:angry": {
					duration: 10,
					broadcast_anger: true,
					broadcast_range: 16,
					calm_event: {
						event: "become_calm_event",
						target: "self"
					},
					angry_sound: "angry",
					sound_interval: {
						range_min: 2,
						range_max: 5
					}
				}
			},
			attack_cooldown: {
				"minecraft:attack_cooldown": {
					attack_cooldown_time: [
						10,
						15
					],
					attack_cooldown_complete_event: {
						event: "attack_cooldown_complete_event",
						target: "self"
					}
				}
			},
			"minecraft:hoglin_baby": {
				"minecraft:type_family": {
					family: [
						"hoglin",
						"hoglin_baby",
						"mob"
					]
				},
				"minecraft:is_baby": {
				},
				"minecraft:movement": {
					value: 0.36
				},
				"minecraft:behavior.melee_attack": {
					priority: 4,
					speed_multiplier: 1,
					track_target: true,
					reach_multiplier: 1,
					cooldown_time: 0.75
				},
				"minecraft:attack": {
					damage: 1
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:collision_box": {
					width: 0.85,
					height: 0.85
				},
				"minecraft:custom_hit_test": {
					hitboxes: [
						{
							width: 1,
							height: 0.85,
							pivot: [
								0,
								0.5,
								0
							]
						}
					]
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"crimson_fungus"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 6,
					speed_multiplier: 1
				},
				"minecraft:rideable": {
					seat_count: 3,
					family_types: [
						"piglin"
					],
					seats: [
						{
							position: [
								0,
								0.9,
								-0.3
							],
							lock_rider_rotation: 0
						},
						{
							position: [
								0,
								2.4,
								-0.3
							],
							lock_rider_rotation: 0
						},
						{
							position: [
								0,
								3.9,
								-0.3
							],
							lock_rider_rotation: 0
						}
					]
				},
				"minecraft:behavior.panic": {
					priority: 1,
					speed_multiplier: 1
				}
			},
			"minecraft:hoglin_adult": {
				"minecraft:collision_box": {
					width: 1.4,
					height: 1.4
				},
				"minecraft:movement": {
					value: 0.3
				},
				"minecraft:custom_hit_test": {
					hitboxes: [
						{
							width: 2,
							height: 1.75,
							pivot: [
								0,
								1,
								0
							]
						}
					]
				},
				"minecraft:group_size": {
					radius: 32,
					filters: {
						all_of: [
							{
								test: "has_component",
								operator: "!=",
								value: "minecraft:is_baby"
							},
							{
								test: "is_family",
								value: "hoglin"
							}
						]
					}
				},
				"minecraft:behavior.hurt_by_target": {
					priority: 2
				},
				"minecraft:on_target_acquired": {
					event: "become_angry_event",
					target: "self"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/hoglin.json"
				},
				"minecraft:behavior.melee_attack": {
					priority: 4,
					speed_multiplier: 1,
					track_target: true,
					reach_multiplier: 2.15,
					cooldown_time: 2
				},
				"minecraft:attack": {
					damage: [
						3,
						9
					]
				},
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 0.6
				},
				"minecraft:breedable": {
					require_tame: false,
					love_filters: {
						test: "has_component",
						subject: "self",
						operator: "!=",
						value: "minecraft:attack_cooldown"
					},
					breeds_with: {
						mate_type: "minecraft:hoglin",
						baby_type: "minecraft:hoglin",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					breed_items: [
						"crimson_fungus"
					]
				}
			},
			unhuntable_adult: {
				"minecraft:type_family": {
					family: [
						"hoglin",
						"hoglin_adult",
						"mob"
					]
				}
			},
			huntable_adult: {
				"minecraft:type_family": {
					family: [
						"hoglin",
						"hoglin_adult",
						"hoglin_huntable",
						"mob"
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 40,
				max: 40
			},
			"minecraft:experience_reward": {
				on_bred: "Math.Random(1,7)",
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:knockback_resistance": {
				value: 0.6
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 4,
				within_radius: 16,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "has_component",
									subject: "self",
									operator: "!=",
									value: "minecraft:attack_cooldown"
								}
							]
						},
						max_dist: 16
					}
				],
				must_see: true
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 0,
				remove_target: true,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "has_target",
									subject: "other",
									value: true
								},
								{
									test: "is_family",
									subject: "other",
									value: "piglin"
								}
							]
						},
						check_if_outnumbered: true,
						max_dist: 10,
						sprint_speed_multiplier: 1.2
					}
				],
				avoid_mob_sound: "retreat",
				sound_interval: {
					range_min: 2,
					range_max: 5
				}
			},
			"minecraft:behavior.avoid_block": {
				priority: 1,
				tick_interval: 5,
				search_range: 8,
				search_height: 4,
				walk_speed_modifier: 1,
				sprint_speed_modifier: 1,
				avoid_block_sound: "retreat",
				sound_interval: {
					range_min: 2,
					range_max: 5
				},
				target_selection_method: "nearest",
				target_blocks: [
					"minecraft:warped_fungus",
					"minecraft:portal",
					"minecraft:respawn_anchor"
				],
				on_escape: [
					{
						event: "escaped_event",
						target: "self"
					}
				]
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 0.4
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:balloonable": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						trigger: "spawn_adult"
					},
					{
						weight: 5,
						trigger: "spawn_baby"
					}
				]
			},
			"minecraft:entity_born": {
				trigger: "spawn_baby"
			},
			spawn_adult: {
				add: {
					component_groups: [
						"minecraft:hoglin_adult",
						"huntable_adult",
						"zombification_sensor"
					]
				}
			},
			spawn_baby: {
				add: {
					component_groups: [
						"minecraft:hoglin_baby",
						"zombification_sensor"
					]
				}
			},
			stop_zombification_event: {
				add: {
					component_groups: [
						"zombification_sensor"
					]
				},
				remove: {
					component_groups: [
						"start_zombification"
					]
				}
			},
			become_zombie_event: {
				add: {
					component_groups: [
						"become_zombie"
					]
				}
			},
			start_zombification_event: {
				add: {
					component_groups: [
						"start_zombification"
					]
				},
				remove: {
					component_groups: [
						"zombification_sensor"
					]
				}
			},
			spawn_adult_unhuntable: {
				add: {
					component_groups: [
						"minecraft:hoglin_adult",
						"unhuntable_adult",
						"zombification_sensor"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:hoglin_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:hoglin_adult",
						"huntable_adult"
					]
				}
			},
			become_angry_event: {
				add: {
					component_groups: [
						"angry_hoglin"
					]
				}
			},
			become_calm_event: {
				remove: {
					component_groups: [
						"angry_hoglin"
					]
				}
			},
			escaped_event: {
				add: {
					component_groups: [
						"attack_cooldown"
					]
				},
				remove: {
					component_groups: [
						"angry_hoglin"
					]
				}
			},
			attack_cooldown_complete_event: {
				remove: {
					component_groups: [
						"attack_cooldown"
					]
				}
			}
		}
	}
},
	"minecraft:hopper_minecart": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:hopper_minecart",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:hopper_active": {
				"minecraft:item_hopper": {
				},
				"minecraft:rail_sensor": {
					on_activate: {
						event: "minecraft:hopper_deactivate"
					}
				}
			},
			"minecraft:hopper_inactive": {
				"minecraft:rail_sensor": {
					on_deactivate: {
						event: "minecraft:hopper_activate"
					}
				}
			}
		},
		components: {
			"minecraft:type_family": {
				family: [
					"minecart",
					"inanimate"
				]
			},
			"minecraft:collision_box": {
				width: 0.98,
				height: 0.7
			},
			"minecraft:rail_movement": {
			},
			"minecraft:inventory": {
				container_type: "minecart_hopper",
				inventory_size: 5,
				can_be_siphoned_from: true
			},
			"minecraft:is_stackable": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 60,
					max_dropped_ticks: 20,
					use_motion_prediction_hints: true
				},
				conditional_values: [
					{
						max_optimized_distance: 0,
						max_dropped_ticks: 0,
						conditional_values: [
							{
								test: "is_moving",
								subject: "self",
								operator: "==",
								value: true
							}
						]
					}
				]
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:hopper_active"
					]
				}
			},
			"minecraft:hopper_activate": {
				remove: {
					component_groups: [
						"minecraft:hopper_inactive"
					]
				},
				add: {
					component_groups: [
						"minecraft:hopper_active"
					]
				}
			},
			"minecraft:hopper_deactivate": {
				remove: {
					component_groups: [
						"minecraft:hopper_active"
					]
				},
				add: {
					component_groups: [
						"minecraft:hopper_inactive"
					]
				}
			}
		}
	}
},
	"minecraft:horse": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:horse",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:horse_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale_by_age": {
					start_scale: 0.5,
					end_scale: 1
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						{
							item: "wheat",
							growth: 0.016667
						},
						{
							item: "sugar",
							growth: 0.025
						},
						{
							item: "hay_block",
							growth: 0.15
						},
						{
							item: "apple",
							growth: 0.05
						},
						{
							item: "golden_carrot",
							growth: 0.05
						},
						{
							item: "golden_apple",
							growth: 0.2
						},
						{
							item: "appleEnchanted",
							growth: 0.2
						}
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 4,
					speed_multiplier: 1
				}
			},
			"minecraft:horse_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/horse.json"
				},
				"minecraft:behavior.run_around_like_crazy": {
					priority: 1,
					speed_multiplier: 1.2
				},
				"minecraft:behavior.breed": {
					priority: 2,
					speed_multiplier: 1
				}
			},
			"minecraft:horse_wild": {
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"player",
						"zombie"
					],
					interact_text: "action.interact.mount",
					seats: {
						position: [
							0,
							1.1,
							-0.2
						]
					}
				},
				"minecraft:behavior.mount_pathing": {
					priority: 2,
					speed_multiplier: 1.5,
					target_dist: 0,
					track_target: true
				},
				"minecraft:tamemount": {
					min_temper: 0,
					max_temper: 100,
					feed_text: "action.interact.feed",
					ride_text: "action.interact.mount",
					feed_items: [
						{
							item: "wheat",
							temper_mod: 3
						},
						{
							item: "sugar",
							temper_mod: 3
						},
						{
							item: "apple",
							temper_mod: 3
						},
						{
							item: "golden_carrot",
							temper_mod: 5
						},
						{
							item: "golden_apple",
							temper_mod: 10
						},
						{
							item: "appleEnchanted",
							temper_mod: 10
						}
					],
					auto_reject_items: [
						{
							item: "horsearmorleather"
						},
						{
							item: "horsearmoriron"
						},
						{
							item: "horsearmorgold"
						},
						{
							item: "horsearmordiamond"
						},
						{
							item: "saddle"
						}
					],
					tame_event: {
						event: "minecraft:on_tame",
						target: "self"
					}
				}
			},
			"minecraft:horse_tamed": {
				"minecraft:is_tamed": {
				},
				"minecraft:rideable": {
					seat_count: 1,
					crouching_skip_interact: true,
					family_types: [
						"player"
					],
					interact_text: "action.interact.ride.horse",
					seats: {
						position: [
							0,
							1.1,
							-0.2
						]
					}
				},
				"minecraft:inventory": {
					inventory_size: 2,
					container_type: "horse"
				},
				"minecraft:breedable": {
					require_tame: true,
					inherit_tamed: false,
					breeds_with: [
						{
							mate_type: "minecraft:horse",
							baby_type: "minecraft:horse",
							breed_event: {
								event: "minecraft:entity_born",
								target: "baby"
							}
						},
						{
							mate_type: "minecraft:donkey",
							baby_type: "minecraft:mule",
							breed_event: {
								event: "minecraft:entity_born",
								target: "baby"
							}
						}
					],
					breed_items: [
						"golden_carrot",
						"golden_apple",
						"appleEnchanted"
					]
				},
				"minecraft:behavior.tempt": {
					priority: 5,
					speed_multiplier: 1.2,
					items: [
						"golden_apple",
						"appleEnchanted",
						"golden_carrot"
					]
				}
			},
			"minecraft:horse_saddled": {
				"minecraft:is_saddled": {
				},
				"minecraft:input_ground_controlled": {
				},
				"minecraft:can_power_jump": {
				},
				"minecraft:behavior.player_ride_tamed": {
				}
			},
			"minecraft:base_white": {
				"minecraft:variant": {
					value: 0
				}
			},
			"minecraft:base_creamy": {
				"minecraft:variant": {
					value: 1
				}
			},
			"minecraft:base_chestnut": {
				"minecraft:variant": {
					value: 2
				}
			},
			"minecraft:base_brown": {
				"minecraft:variant": {
					value: 3
				}
			},
			"minecraft:base_black": {
				"minecraft:variant": {
					value: 4
				}
			},
			"minecraft:base_gray": {
				"minecraft:variant": {
					value: 5
				}
			},
			"minecraft:base_darkbrown": {
				"minecraft:variant": {
					value: 6
				}
			},
			"minecraft:markings_none": {
				"minecraft:mark_variant": {
					value: 0
				}
			},
			"minecraft:markings_white_details": {
				"minecraft:mark_variant": {
					value: 1
				}
			},
			"minecraft:markings_white_fields": {
				"minecraft:mark_variant": {
					value: 2
				}
			},
			"minecraft:markings_white_dots": {
				"minecraft:mark_variant": {
					value: 3
				}
			},
			"minecraft:markings_black_dots": {
				"minecraft:mark_variant": {
					value: 4
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:equippable": {
				slots: [
					{
						slot: 0,
						item: "saddle",
						accepted_items: [
							"saddle"
						],
						on_equip: {
							event: "minecraft:horse_saddled"
						},
						on_unequip: {
							event: "minecraft:horse_unsaddled"
						}
					},
					{
						slot: 1,
						item: "horsearmoriron",
						accepted_items: [
							"horsearmorleather",
							"horsearmoriron",
							"horsearmorgold",
							"horsearmordiamond"
						]
					}
				]
			},
			"minecraft:type_family": {
				family: [
					"horse",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 1.4,
				height: 1.6
			},
			"minecraft:health": {
				value: {
					range_min: 15,
					range_max: 30
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: {
					range_min: 0.1125,
					range_max: 0.3375
				}
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:nameable": {
			},
			"minecraft:horse.jump_strength": {
				value: {
					range_min: 0.4,
					range_max: 1
				}
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:healable": {
				items: [
					{
						item: "wheat",
						heal_amount: 2
					},
					{
						item: "sugar",
						heal_amount: 1
					},
					{
						item: "hay_block",
						heal_amount: 20
					},
					{
						item: "apple",
						heal_amount: 3
					},
					{
						item: "golden_carrot",
						heal_amount: 4
					},
					{
						item: "golden_apple",
						heal_amount: 10
					},
					{
						item: "appleEnchanted",
						heal_amount: 10
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 3,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.7
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 36,
								add: {
									component_groups: [
										"minecraft:horse_adult",
										"minecraft:horse_wild"
									]
								}
							},
							{
								weight: 9,
								add: {
									component_groups: [
										"minecraft:horse_baby"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:base_white"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:base_creamy"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:base_chestnut"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:base_brown"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:base_black"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:base_gray"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:base_darkbrown"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:markings_none"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:markings_white_details"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:markings_white_fields"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:markings_white_dots"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:markings_black_dots"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:horse_baby"
					]
				}
			},
			"minecraft:on_tame": {
				remove: {
					component_groups: [
						"minecraft:horse_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:horse_tamed"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:horse_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:horse_adult",
						"minecraft:horse_wild"
					]
				}
			},
			"minecraft:horse_saddled": {
				add: {
					component_groups: [
						"minecraft:horse_saddled"
					]
				}
			},
			"minecraft:horse_unsaddled": {
				remove: {
					component_groups: [
						"minecraft:horse_saddled"
					]
				}
			},
			"minecraft:make_white": {
				add: {
					component_groups: [
						"minecraft:base_white"
					]
				}
			},
			"minecraft:make_creamy": {
				add: {
					component_groups: [
						"minecraft:base_creamy"
					]
				}
			},
			"minecraft:make_chestnut": {
				add: {
					component_groups: [
						"minecraft:base_chestnut"
					]
				}
			},
			"minecraft:make_brown": {
				add: {
					component_groups: [
						"minecraft:base_brown"
					]
				}
			},
			"minecraft:make_black": {
				add: {
					component_groups: [
						"minecraft:base_black"
					]
				}
			},
			"minecraft:make_gray": {
				add: {
					component_groups: [
						"minecraft:base_gray"
					]
				}
			},
			"minecraft:make_darkbrown": {
				add: {
					component_groups: [
						"minecraft:base_darkbrown"
					]
				}
			}
		}
	}
},
	"minecraft:husk": {
	format_version: "1.17.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:husk",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:look_to_start_zombie_transformation": {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "is_underwater",
							subject: "self",
							operator: "==",
							value: true
						},
						event: "minecraft:start_transforming"
					}
				}
			},
			"minecraft:start_zombie_transformation": {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "is_underwater",
							subject: "self",
							operator: "==",
							value: false
						},
						event: "minecraft:stop_transforming"
					}
				},
				"minecraft:timer": {
					looping: false,
					time: 30,
					time_down_event: {
						event: "minecraft:convert_to_zombie"
					}
				}
			},
			"minecraft:convert_to_zombie": {
				"minecraft:transformation": {
					into: "minecraft:zombie<minecraft:as_adult>",
					transformation_sound: "convert_to_drowned",
					drop_equipment: true,
					delay: {
						value: 15
					}
				},
				"minecraft:is_shaking": {
				}
			},
			"minecraft:convert_to_baby_zombie": {
				"minecraft:transformation": {
					into: "minecraft:zombie<minecraft:as_baby>",
					transformation_sound: "convert_to_drowned",
					drop_equipment: true,
					delay: {
						value: 15
					}
				},
				"minecraft:is_shaking": {
				}
			},
			"minecraft:zombie_husk_baby": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 12 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.53125
				},
				"minecraft:movement": {
					value: 0.35
				}
			},
			"minecraft:zombie_husk_adult": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:movement": {
					value: 0.23
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							1.1,
							-0.35
						],
						lock_rider_rotation: 0
					}
				},
				"minecraft:behavior.mount_pathing": {
					priority: 2,
					speed_multiplier: 1.25,
					target_dist: 0,
					track_target: true
				},
				"minecraft:scale": {
					value: 1.0625
				}
			},
			"minecraft:zombie_husk_jockey": {
				"minecraft:behavior.find_mount": {
					priority: 1,
					within_radius: 16
				}
			},
			"minecraft:can_break_doors": {
				"minecraft:annotation.break_door": {
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:equip_item": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"husk",
					"zombie",
					"undead",
					"monster",
					"mob"
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/zombie.json"
			},
			"minecraft:equipment": {
				table: "loot_tables/entities/zombie_equipment.json"
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:attack": {
				damage: 3,
				effect_name: "hunger",
				effect_duration: 30
			},
			"minecraft:variant": {
				value: 2
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				can_pass_doors: true,
				can_break_doors: true,
				avoid_portals: false
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:netherite_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:golden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:stone_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:wooden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					}
				]
			},
			"minecraft:environment_sensor": {
				triggers: [
					{
						filters: {
							test: "is_underwater",
							subject: "self",
							operator: "==",
							value: true
						},
						event: "minecraft:start_transforming"
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.equip_item": {
				priority: 2
			},
			"minecraft:behavior.melee_attack": {
				priority: 3
			},
			"minecraft:behavior.stomp_turtle_egg": {
				priority: 4,
				speed_multiplier: 1,
				search_range: 10,
				search_height: 2,
				goal_radius: 1.14,
				interval: 20
			},
			"minecraft:behavior.pickup_items": {
				priority: 6,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1,
				pickup_based_on_chance: true,
				can_pickup_any_item: true,
				excluded_items: [
					"minecraft:glow_ink_sac"
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				must_see: true,
				reselect_targets: true,
				within_radius: 25,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "snowgolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								}
							]
						},
						max_dist: 35
					},
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "villager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "wandering_trader"
								}
							]
						},
						max_dist: 35,
						must_see: false
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "baby_turtle"
								},
								{
									test: "in_water",
									subject: "other",
									operator: "!=",
									value: true
								}
							]
						},
						max_dist: 35
					}
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 9500,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:zombie_husk_adult"
									]
								}
							},
							{
								weight: 425,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:zombie_husk_baby"
									]
								}
							},
							{
								weight: 75,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:zombie_husk_baby",
										"minecraft:zombie_husk_jockey"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 10,
								add: {
									component_groups: [
										"minecraft:can_break_doors"
									]
								}
							},
							{
								weight: 90
							}
						]
					}
				]
			},
			"minecraft:start_transforming": {
				add: {
					component_groups: [
						"minecraft:start_zombie_transformation"
					]
				},
				remove: {
					component_groups: [
						"minecraft:look_to_start_zombie_transformation"
					]
				}
			},
			"minecraft:stop_transforming": {
				add: {
					component_groups: [
						"minecraft:look_to_start_zombie_transformation"
					]
				},
				remove: {
					component_groups: [
						"minecraft:start_zombie_transformation"
					]
				}
			},
			"minecraft:convert_to_zombie": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"minecraft:convert_to_zombie"
							]
						},
						remove: {
							component_groups: [
								"minecraft:start_zombie_transformation"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"minecraft:convert_to_baby_zombie"
							]
						},
						remove: {
							component_groups: [
								"minecraft:start_zombie_transformation"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:iron_golem": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:iron_golem",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:player_created": {
				"minecraft:behavior.hurt_by_target": {
					priority: 2,
					entity_types: {
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "creeper"
								}
							]
						}
					}
				}
			},
			"minecraft:village_created": {
				"minecraft:behavior.defend_village_target": {
					priority: 1,
					must_reach: true,
					attack_chance: 0.05,
					entity_types: {
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "mob"
								},
								{
									test: "is_family",
									subject: "other",
									value: "player"
								}
							]
						}
					}
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "defender",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: false,
					can_migrate: true,
					first_founding_reward: 0
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"irongolem",
					"mob"
				]
			},
			"minecraft:nameable": {
			},
			"minecraft:collision_box": {
				width: 1.4,
				height: 2.9
			},
			"minecraft:loot": {
				table: "loot_tables/entities/iron_golem.json"
			},
			"minecraft:health": {
				value: 100,
				max: 100
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: false,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:interact": {
				interactions: [
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_equipment",
										domain: "hand",
										subject: "other",
										value: "iron_ingot"
									},
									{
										test: "is_missing_health",
										value: true
									}
								]
							}
						},
						use_item: true,
						health_amount: 25,
						play_sounds: "irongolem.repair",
						interact_text: "action.interact.repair"
					}
				]
			},
			"minecraft:attack": {
				damage: {
					range_min: 7,
					range_max: 21
				}
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:knockback_resistance": {
				value: 1
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 2
			},
			"minecraft:preferred_path": {
				max_fall_blocks: 1,
				jump_cost: 5,
				default_block_cost: 1.5,
				preferred_path_blocks: [
					{
						cost: 0,
						blocks: [
							"grass_path"
						]
					},
					{
						cost: 1,
						blocks: [
							"cobblestone",
							"stone",
							"stonebrick",
							"sandstone",
							"mossy_cobblestone",
							"stone_slab",
							"stone_slab2",
							"stone_slab3",
							"stone_slab4",
							"double_stone_slab",
							"double_stone_slab2",
							"double_stone_slab3",
							"double_stone_slab4",
							"wooden_slab",
							"double_wooden_slab",
							"planks",
							"brick_block",
							"nether_brick",
							"red_nether_brick",
							"end_bricks",
							"red_sandstone",
							"stained_glass",
							"glass",
							"glowstone",
							"prismarine",
							"emerald_block",
							"diamond_block",
							"lapis_block",
							"gold_block",
							"redstone_block",
							"purple_glazed_terracotta",
							"white_glazed_terracotta",
							"orange_glazed_terracotta",
							"magenta_glazed_terracotta",
							"light_blue_glazed_terracotta",
							"yellow_glazed_terracotta",
							"lime_glazed_terracotta",
							"pink_glazed_terracotta",
							"gray_glazed_terracotta",
							"silver_glazed_terracotta",
							"cyan_glazed_terracotta",
							"blue_glazed_terracotta",
							"brown_glazed_terracotta",
							"green_glazed_terracotta",
							"red_glazed_terracotta",
							"black_glazed_terracotta"
						]
					},
					{
						cost: 50,
						blocks: [
							"bed",
							"lectern",
							"composter",
							"grindstone",
							"blast_furnace",
							"smoker",
							"fletching_table",
							"cartography_table",
							"brewing_stand",
							"smithing_table",
							"cauldron",
							"barrel",
							"loom",
							"stonecutter"
						]
					}
				]
			},
			"minecraft:behavior.target_when_pushed": {
				priority: 1,
				percent_chance: 5,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "monster"
								},
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "creeper"
								}
							]
						}
					}
				]
			},
			"minecraft:behavior.melee_attack": {
				priority: 1,
				track_target: true
			},
			"minecraft:behavior.move_towards_target": {
				priority: 2,
				speed_multiplier: 0.9,
				within_radius: 32
			},
			"minecraft:behavior.move_through_village": {
				priority: 3,
				speed_multiplier: 0.6,
				only_at_night: true
			},
			"minecraft:behavior.move_towards_dwelling_restriction": {
				priority: 4,
				speed_multiplier: 1
			},
			"minecraft:behavior.offer_flower": {
				priority: 5
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.6,
				xz_dist: 16
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 3,
				must_reach: true,
				must_see: true,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "monster"
								},
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "creeper"
								}
							]
						},
						within_default: 10
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "hoglin"
								},
								{
									test: "is_difficulty",
									operator: "!=",
									value: "peaceful"
								}
							]
						},
						max_dist: 16
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "zoglin"
								},
								{
									test: "is_difficulty",
									operator: "!=",
									value: "peaceful"
								}
							]
						},
						max_dist: 16
					}
				]
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 2,
				entity_types: {
					filters: {
						test: "is_family",
						subject: "other",
						operator: "!=",
						value: "creeper"
					}
				}
			},
			"minecraft:persistent": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:follow_range": {
				value: 64
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:from_player": {
				add: {
					component_groups: [
						"minecraft:player_created"
					]
				}
			},
			"minecraft:from_village": {
				add: {
					component_groups: [
						"minecraft:village_created"
					]
				}
			}
		}
	}
},
	"minecraft:lightning_bolt": {
	format_version: "1.8.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:lightning_bolt",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
		},
		components: {
			"minecraft:type_family": {
				family: [
					"lightning"
				]
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 10,
					use_motion_prediction_hints: true
				}
			}
		},
		events: {
		}
	}
},
	"minecraft:lingering_potion": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:lingering_potion",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:projectile": {
				on_hit: {
					douse_fire: {
					},
					spawn_aoe_cloud: {
						radius: 3,
						radius_on_use: -0.5,
						duration: 30,
						reapplication_delay: 40
					},
					remove_on_hit: {
					}
				},
				power: 0.5,
				gravity: 0.05,
				angle_offset: -20,
				hit_sound: "glass"
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 5,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:llama": {
	format_version: "1.19.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:llama",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:llama_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						{
							item: "wheat",
							growth: 0.1
						},
						{
							item: "hay_block",
							growth: 0.9
						}
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 5,
					speed_multiplier: 1
				}
			},
			"minecraft:llama_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/llama.json"
				},
				"minecraft:behavior.breed": {
					priority: 4,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: true,
					inherit_tamed: false,
					breeds_with: {
						mate_type: "minecraft:llama",
						baby_type: "minecraft:llama",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					breed_items: [
						"hay_block"
					]
				}
			},
			"minecraft:strength_1": {
				"minecraft:strength": {
					value: 1,
					max: 5
				}
			},
			"minecraft:strength_2": {
				"minecraft:strength": {
					value: 2,
					max: 5
				}
			},
			"minecraft:strength_3": {
				"minecraft:strength": {
					value: 3,
					max: 5
				}
			},
			"minecraft:strength_4": {
				"minecraft:strength": {
					value: 4,
					max: 5
				}
			},
			"minecraft:strength_5": {
				"minecraft:strength": {
					value: 5,
					max: 5
				}
			},
			"minecraft:llama_creamy": {
				"minecraft:variant": {
					value: 0
				}
			},
			"minecraft:llama_white": {
				"minecraft:variant": {
					value: 1
				}
			},
			"minecraft:llama_brown": {
				"minecraft:variant": {
					value: 2
				}
			},
			"minecraft:llama_gray": {
				"minecraft:variant": {
					value: 3
				}
			},
			"minecraft:llama_wild": {
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"player"
					],
					interact_text: "action.interact.mount",
					seats: {
						position: [
							0,
							1.17,
							-0.3
						]
					}
				},
				"minecraft:tamemount": {
					min_temper: 0,
					max_temper: 30,
					feed_text: "action.interact.feed",
					ride_text: "action.interact.mount",
					feed_items: [
						{
							item: "wheat",
							temper_mod: 3
						},
						{
							item: "hay_block",
							temper_mod: 6
						}
					],
					auto_reject_items: [
						{
							item: "horsearmorleather"
						},
						{
							item: "horsearmoriron"
						},
						{
							item: "horsearmorgold"
						},
						{
							item: "horsearmordiamond"
						},
						{
							item: "saddle"
						}
					],
					tame_event: {
						event: "minecraft:on_tame",
						target: "self"
					}
				}
			},
			"minecraft:llama_tamed": {
				"minecraft:is_tamed": {
				},
				"minecraft:rideable": {
					seat_count: 1,
					crouching_skip_interact: true,
					family_types: [
						"player"
					],
					interact_text: "action.interact.ride.horse",
					seats: {
						position: [
							0,
							1.17,
							-0.3
						]
					}
				},
				"minecraft:inventory": {
					inventory_size: 16,
					container_type: "horse",
					additional_slots_per_strength: 3
				},
				"minecraft:equippable": {
					slots: [
						{
							slot: 1,
							item: "carpet",
							accepted_items: [
								"carpet"
							]
						}
					]
				}
			},
			"minecraft:llama_unchested": {
				"minecraft:interact": {
					interactions: [
						{
							play_sounds: "armor.equip_generic",
							on_interact: {
								filters: {
									all_of: [
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "has_equipment",
											domain: "hand",
											subject: "other",
											value: "chest"
										}
									]
								},
								event: "minecraft:on_chest",
								target: "self"
							},
							use_item: true,
							interact_text: "action.interact.attachchest"
						}
					]
				}
			},
			"minecraft:llama_chested": {
				"minecraft:is_chested": {
				}
			},
			"minecraft:llama_angry": {
				"minecraft:angry": {
					duration: 4,
					broadcast_anger: false,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:behavior.ranged_attack": {
					priority: 2,
					attack_radius: 64,
					charge_shoot_trigger: 2,
					charge_charged_trigger: 1
				}
			},
			"minecraft:llama_angry_wolf": {
				"minecraft:angry": {
					duration: -1,
					broadcast_anger: false,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:behavior.ranged_attack": {
					priority: 2,
					attack_radius: 64,
					charge_shoot_trigger: 2,
					charge_charged_trigger: 1
				}
			},
			"minecraft:in_caravan": {
				"minecraft:damage_sensor": {
					triggers: {
						cause: "all",
						deals_damage: true
					}
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"llama",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:mark_variant": {
				value: 0
			},
			"minecraft:health": {
				value: {
					range_min: 15,
					range_max: 30
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:follow_range": {
				value: 40,
				max: 40
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10,
				can_be_stolen: true
			},
			"minecraft:balloonable": {
			},
			"minecraft:healable": {
				items: [
					{
						item: "wheat",
						heal_amount: 2
					},
					{
						item: "hay_block",
						heal_amount: 10
					}
				]
			},
			"minecraft:shooter": {
				def: "minecraft:llama_spit"
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.run_around_like_crazy": {
				priority: 1,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.follow_caravan": {
				priority: 3,
				speed_multiplier: 2.1,
				entity_count: 10,
				entity_types: {
					filters: {
						test: "is_family",
						subject: "other",
						value: "llama"
					}
				}
			},
			"minecraft:behavior.panic": {
				priority: 4,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.7
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:behavior.mount_pathing": {
				priority: 1,
				speed_multiplier: 1.25,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1,
				hurt_owner: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "all",
					deals_damage: true,
					on_damage: {
						filters: {
							test: "in_caravan",
							value: false
						},
						event: "minecraft:become_angry"
					}
				}
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				attack_interval: 16,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "wolf"
								},
								{
									test: "has_component",
									subject: "other",
									operator: "!=",
									value: "minecraft:is_tamed"
								}
							]
						},
						max_dist: 10
					}
				],
				must_see: false,
				must_reach: true
			},
			"minecraft:on_target_acquired": {
				filters: {
					all_of: [
						{
							test: "is_family",
							subject: "target",
							value: "wolf"
						},
						{
							test: "has_component",
							subject: "target",
							operator: "!=",
							value: "minecraft:is_tamed"
						}
					]
				},
				event: "minecraft:mad_at_wolf",
				target: "self"
			},
			"minecraft:on_target_escape": {
				filters: {
					all_of: [
						{
							test: "is_family",
							subject: "target",
							value: "wolf"
						},
						{
							test: "has_component",
							subject: "target",
							operator: "!=",
							value: "minecraft:is_tamed"
						}
					]
				},
				event: "minecraft:on_calm",
				target: "self"
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 1.87
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 90,
								trigger: "minecraft:spawn_adult"
							},
							{
								weight: 10,
								trigger: "minecraft:spawn_baby"
							}
						]
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:llama_baby"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:llama_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:llama_adult",
						"minecraft:llama_wild"
					]
				}
			},
			"minecraft:on_tame": {
				remove: {
					component_groups: [
						"minecraft:llama_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:llama_tamed",
						"minecraft:llama_unchested"
					]
				}
			},
			"minecraft:join_caravan": {
				add: {
					component_groups: [
						"minecraft:in_caravan"
					]
				}
			},
			"minecraft:leave_caravan": {
				remove: {
					component_groups: [
						"minecraft:in_caravan"
					]
				}
			},
			"minecraft:mad_at_wolf": {
				add: {
					component_groups: [
						"minecraft:llama_angry_wolf"
					]
				}
			},
			"minecraft:become_angry": {
				add: {
					component_groups: [
						"minecraft:llama_angry"
					]
				}
			},
			"minecraft:on_calm": {
				remove: {
					component_groups: [
						"minecraft:llama_angry",
						"minecraft:llama_angry_wolf"
					]
				}
			},
			"minecraft:on_chest": {
				remove: {
					component_groups: [
						"minecraft:llama_unchested"
					]
				},
				add: {
					component_groups: [
						"minecraft:llama_chested"
					]
				}
			},
			"minecraft:add_attributes": {
				sequence: [
					{
						randomize: [
							{
								weight: 32,
								add: {
									component_groups: [
										"minecraft:strength_1"
									]
								}
							},
							{
								weight: 32,
								add: {
									component_groups: [
										"minecraft:strength_2"
									]
								}
							},
							{
								weight: 32,
								add: {
									component_groups: [
										"minecraft:strength_3"
									]
								}
							},
							{
								weight: 2,
								add: {
									component_groups: [
										"minecraft:strength_4"
									]
								}
							},
							{
								weight: 2,
								add: {
									component_groups: [
										"minecraft:strength_5"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 25,
								add: {
									component_groups: [
										"minecraft:llama_creamy"
									]
								}
							},
							{
								weight: 25,
								add: {
									component_groups: [
										"minecraft:llama_white"
									]
								}
							},
							{
								weight: 25,
								add: {
									component_groups: [
										"minecraft:llama_brown"
									]
								}
							},
							{
								weight: 25,
								add: {
									component_groups: [
										"minecraft:llama_gray"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:spawn_baby": {
				add: {
					component_groups: [
						"minecraft:llama_baby"
					]
				},
				trigger: "minecraft:add_attributes"
			},
			"minecraft:spawn_adult": {
				add: {
					component_groups: [
						"minecraft:llama_adult",
						"minecraft:llama_wild"
					]
				},
				trigger: "minecraft:add_attributes"
			}
		}
	}
},
	"minecraft:llama_spit": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:llama_spit",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.31,
				height: 0.31
			},
			"minecraft:projectile": {
				on_hit: {
					impact_damage: {
						damage: 1,
						knockback: false
					},
					remove_on_hit: {
					}
				},
				power: 1.5,
				gravity: 0.06,
				inertia: 1,
				uncertainty_base: 10,
				uncertainty_multiplier: 4,
				anchor: 1,
				offset: [
					0,
					-0.1,
					0
				],
				reflect_on_hurt: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:magma_cube": {
	format_version: "1.18.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:magma_cube",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:slime_large": {
				"minecraft:variant": {
					value: 4
				},
				"minecraft:collision_box": {
					width: 2.08,
					height: 2.08
				},
				"minecraft:health": {
					value: 16,
					max: 16
				},
				"minecraft:movement": {
					value: 0.75
				},
				"minecraft:attack": {
					damage: 6
				},
				"minecraft:loot": {
					table: "loot_tables/entities/magma_cube.json"
				}
			},
			"minecraft:slime_medium": {
				"minecraft:variant": {
					value: 2
				},
				"minecraft:collision_box": {
					width: 1.04,
					height: 1.02
				},
				"minecraft:health": {
					value: 4,
					max: 4
				},
				"minecraft:movement": {
					value: 0.66
				},
				"minecraft:attack": {
					damage: 4
				},
				"minecraft:loot": {
					table: "loot_tables/entities/magma_cube.json"
				}
			},
			"minecraft:slime_small": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:collision_box": {
					width: 0.52,
					height: 0.52
				},
				"minecraft:health": {
					value: 1,
					max: 1
				},
				"minecraft:movement": {
					value: 0.6
				},
				"minecraft:attack": {
					damage: 3
				}
			},
			"minecraft:slime_calm": {
				"minecraft:movement.jump": {
					jump_delay: [
						2,
						6
					]
				}
			},
			"minecraft:slime_aggressive": {
				"minecraft:movement.jump": {
					jump_delay: [
						0.667,
						2
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? query.variant : 0"
			},
			"minecraft:type_family": {
				family: [
					"magmacube",
					"monster",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_lava: true
			},
			"minecraft:nameable": {
			},
			"minecraft:fire_immune": {
			},
			"minecraft:burns_in_daylight": false,
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true
			},
			"minecraft:jump.static": {
			},
			"minecraft:movement.jump": {
				jump_delay: [
					2,
					6
				]
			},
			"minecraft:can_climb": {
			},
			"minecraft:on_target_acquired": {
				event: "minecraft:become_aggressive",
				target: "self"
			},
			"minecraft:on_target_escape": {
				event: "minecraft:become_calm",
				target: "self"
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.slime_float": {
				priority: 1,
				jump_chance_percentage: 0.8,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.slime_attack": {
				priority: 3
			},
			"minecraft:behavior.slime_random_direction": {
				priority: 4,
				add_random_time_range: 3,
				turn_range: 360,
				min_change_direction_time: 2
			},
			"minecraft:behavior.slime_keep_on_jumping": {
				priority: 5,
				speed_multiplier: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								}
							]
						},
						max_dist: 16
					}
				],
				must_see: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 1,
						trigger: "spawn_small"
					},
					{
						weight: 1,
						trigger: "spawn_medium"
					},
					{
						weight: 1,
						trigger: "spawn_large"
					}
				]
			},
			spawn_small: {
				add: {
					component_groups: [
						"minecraft:slime_small",
						"minecraft:slime_calm"
					]
				}
			},
			spawn_medium: {
				add: {
					component_groups: [
						"minecraft:slime_medium",
						"minecraft:slime_calm"
					]
				}
			},
			spawn_large: {
				add: {
					component_groups: [
						"minecraft:slime_large",
						"minecraft:slime_calm"
					]
				}
			},
			"minecraft:become_calm": {
				add: {
					component_groups: [
						"minecraft:slime_calm"
					]
				}
			},
			"minecraft:become_aggressive": {
				add: {
					component_groups: [
						"minecraft:slime_aggressive"
					]
				}
			}
		}
	}
},
	"minecraft:minecart": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:minecart",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:is_stackable": {
			},
			"minecraft:type_family": {
				family: [
					"minecart",
					"inanimate"
				]
			},
			"minecraft:collision_box": {
				width: 0.98,
				height: 0.7
			},
			"minecraft:rail_movement": {
			},
			"minecraft:rideable": {
				seat_count: 1,
				interact_text: "action.interact.ride.minecart",
				pull_in_entities: true,
				seats: {
					position: [
						0,
						-0.2,
						0
					]
				}
			},
			"minecraft:rail_sensor": {
				eject_on_activate: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 60,
					max_dropped_ticks: 20,
					use_motion_prediction_hints: true
				},
				conditional_values: [
					{
						max_optimized_distance: 0,
						max_dropped_ticks: 0,
						conditional_values: [
							{
								test: "is_moving",
								subject: "self",
								operator: "==",
								value: true
							}
						]
					}
				]
			}
		}
	}
},
	"minecraft:mooshroom": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:mooshroom",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:mooshroom_become_cow": {
				"minecraft:transformation": {
					into: "minecraft:cow"
				}
			},
			"minecraft:cow_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: "wheat",
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 6,
					speed_multiplier: 1.1
				}
			},
			"minecraft:cow_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/mooshroom.json"
				},
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: false,
					breed_items: "wheat",
					breeds_with: {
						mate_type: "minecraft:mooshroom",
						baby_type: "minecraft:mooshroom",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					deny_parents_variant: {
						chance: 0.00098,
						min_variant: 0,
						max_variant: 1
					}
				},
				"minecraft:interact": {
					interactions: [
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "bowl"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "has_component",
											operator: "!=",
											value: "minecraft:transformation"
										}
									]
								},
								event: "minecraft:flowerless",
								target: "self"
							},
							add_items: {
								table: "loot_tables/gameplay/entities/mooshroom_milking.json"
							},
							use_item: true,
							play_sounds: "milk_suspiciously",
							interact_text: "action.interact.moostew"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:2"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 7
										}
									]
								},
								event: "minecraft:ate_allium",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:3"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 3
										}
									]
								},
								event: "minecraft:ate_bluet",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:1"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 6
										}
									]
								},
								event: "minecraft:ate_orchid",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:9"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 1
										}
									]
								},
								event: "minecraft:ate_cornflower",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "yellow_flower"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 5
										}
									]
								},
								event: "minecraft:ate_dandelion",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:10"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 4
										}
									]
								},
								event: "minecraft:ate_lily",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:8"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 8
										}
									]
								},
								event: "minecraft:ate_daisy",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:0"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 0
										}
									]
								},
								event: "minecraft:ate_poppy",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									any_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:4"
										},
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:5"
										},
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:6"
										},
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "red_flower:7"
										}
									],
									all_of: [
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 2
										}
									]
								},
								event: "minecraft:ate_tulip",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "wither_rose"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										},
										{
											test: "is_mark_variant",
											subject: "self",
											operator: "!=",
											value: 9
										}
									]
								},
								event: "minecraft:ate_rose",
								target: "self"
							},
							use_item: true,
							play_sounds: "eat",
							particle_on_start: {
								particle_type: "smoke",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.feed"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "shears"
										},
										{
											test: "has_component",
											operator: "!=",
											value: "minecraft:transformation"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 0
										}
									]
								},
								event: "become_cow",
								target: "self"
							},
							use_item: false,
							hurt_item: 1,
							play_sounds: "shear",
							spawn_items: {
								table: "loot_tables/entities/mooshroom_shear.json"
							},
							particle_on_start: {
								particle_type: "largeexplode",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.mooshear",
							vibration: "shear"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "shears"
										},
										{
											test: "has_component",
											operator: "!=",
											value: "minecraft:transformation"
										},
										{
											test: "is_variant",
											subject: "self",
											operator: "==",
											value: 1
										}
									]
								},
								event: "become_cow",
								target: "self"
							},
							use_item: false,
							hurt_item: 1,
							play_sounds: "shear",
							spawn_items: {
								table: "loot_tables/entities/brown_mooshroom_shear.json"
							},
							particle_on_start: {
								particle_type: "largeexplode",
								particle_y_offset: 0.25,
								particle_offset_towards_interactor: true
							},
							interact_text: "action.interact.mooshear",
							vibration: "shear"
						},
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "bucket:0"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										}
									]
								}
							},
							use_item: true,
							transform_to_item: "bucket:1",
							play_sounds: "milk",
							interact_text: "action.interact.milk"
						}
					]
				}
			},
			"minecraft:mooshroom_fed_nothing": {
				"minecraft:mark_variant": {
					value: -1
				}
			},
			"minecraft:mooshroom_brown_fed_poppy": {
				"minecraft:mark_variant": {
					value: 0
				}
			},
			"minecraft:mooshroom_brown_fed_cornflower": {
				"minecraft:mark_variant": {
					value: 1
				}
			},
			"minecraft:mooshroom_brown_fed_tulips": {
				"minecraft:mark_variant": {
					value: 2
				}
			},
			"minecraft:mooshroom_brown_fed_azure_bluet": {
				"minecraft:mark_variant": {
					value: 3
				}
			},
			"minecraft:mooshroom_brown_fed_lily_of_the_valley": {
				"minecraft:mark_variant": {
					value: 4
				}
			},
			"minecraft:mooshroom_brown_fed_dandelion": {
				"minecraft:mark_variant": {
					value: 5
				}
			},
			"minecraft:mooshroom_brown_fed_blue_orchid": {
				"minecraft:mark_variant": {
					value: 6
				}
			},
			"minecraft:mooshroom_brown_fed_allium": {
				"minecraft:mark_variant": {
					value: 7
				}
			},
			"minecraft:mooshroom_brown_fed_oxeye_daisy": {
				"minecraft:mark_variant": {
					value: 8
				}
			},
			"minecraft:mooshroom_brown_fed_wither_rose": {
				"minecraft:mark_variant": {
					value: 9
				}
			},
			"minecraft:mooshroom_red": {
				"minecraft:variant": {
					value: 0
				}
			},
			"minecraft:mooshroom_brown": {
				"minecraft:variant": {
					value: 1
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"mushroomcow",
					"mob"
				]
			},
			"minecraft:mark_variant": {
				value: -1
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 1.3
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:rideable": {
				seat_count: 1,
				family_types: [
					"zombie"
				],
				seats: {
					position: [
						0,
						1.105,
						0
					]
				}
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.25
			},
			"minecraft:behavior.mount_pathing": {
				priority: 2,
				speed_multiplier: 1.5,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.breed": {
				priority: 3,
				speed_multiplier: 1
			},
			"minecraft:behavior.tempt": {
				priority: 4,
				speed_multiplier: 1.25,
				items: [
					"wheat"
				]
			},
			"minecraft:behavior.follow_parent": {
				priority: 5,
				speed_multiplier: 1.1
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:damage_sensor": {
				triggers: [
					{
						on_damage: {
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "lightning"
									},
									{
										test: "is_variant",
										subject: "self",
										operator: "==",
										value: 0
									}
								]
							},
							event: "minecraft:become_brown"
						},
						deals_damage: false,
						on_damage_sound_event: "convert_mooshroom"
					},
					{
						on_damage: {
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "lightning"
									},
									{
										test: "is_variant",
										subject: "self",
										operator: "==",
										value: 1
									}
								]
							},
							event: "minecraft:become_red"
						},
						deals_damage: false,
						on_damage_sound_event: "convert_mooshroom"
					}
				]
			}
		},
		events: {
			become_cow: {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:mooshroom_become_cow"
					]
				}
			},
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:cow_adult",
								"minecraft:mooshroom_red"
							]
						}
					},
					{
						weight: 5,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:cow_baby",
								"minecraft:mooshroom_red"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:cow_baby"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:cow_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:cow_adult"
					]
				}
			},
			"minecraft:flowerless": {
				add: {
					component_groups: [
						"minecraft:mooshroom_fed_nothing"
					]
				}
			},
			"minecraft:ate_allium": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_allium"
					]
				}
			},
			"minecraft:ate_cornflower": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_cornflower"
					]
				}
			},
			"minecraft:ate_lily": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_lily_of_the_valley"
					]
				}
			},
			"minecraft:ate_rose": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_wither_rose"
					]
				}
			},
			"minecraft:ate_orchid": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_blue_orchid"
					]
				}
			},
			"minecraft:ate_daisy": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_oxeye_daisy"
					]
				}
			},
			"minecraft:ate_tulip": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_tulips"
					]
				}
			},
			"minecraft:ate_bluet": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_azure_bluet"
					]
				}
			},
			"minecraft:ate_poppy": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_poppy"
					]
				}
			},
			"minecraft:ate_dandelion": {
				add: {
					component_groups: [
						"minecraft:mooshroom_brown_fed_dandelion"
					]
				}
			},
			"minecraft:become_red": {
				remove: {
					component_groups: [
						"minecraft:mooshroom_brown"
					]
				},
				add: {
					component_groups: [
						"minecraft:mooshroom_red",
						"minecraft:mooshroom_fed_nothing"
					]
				}
			},
			"minecraft:become_brown": {
				remove: {
					component_groups: [
						"minecraft:mooshroom_red"
					]
				},
				add: {
					component_groups: [
						"minecraft:mooshroom_brown",
						"minecraft:mooshroom_fed_nothing"
					]
				}
			},
			"minecraft:become_brown_adult": {
				remove: {
					component_groups: [
						"minecraft:mooshroom_red"
					]
				},
				add: {
					component_groups: [
						"minecraft:mooshroom_brown",
						"minecraft:cow_adult",
						"minecraft:mooshroom_fed_nothing"
					]
				}
			},
			"minecraft:become_red_adult": {
				remove: {
					component_groups: [
						"minecraft:mooshroom_brown",
						"minecraft:cow_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:mooshroom_red",
						"minecraft:cow_adult"
					]
				}
			}
		}
	}
},
	"minecraft:mule": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:mule",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:mule_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale_by_age": {
					start_scale: 0.5,
					end_scale: 1
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						{
							item: "wheat",
							growth: 0.016667
						},
						{
							item: "sugar",
							growth: 0.025
						},
						{
							item: "hay_block",
							growth: 0.15
						},
						{
							item: "apple",
							growth: 0.05
						},
						{
							item: "golden_carrot",
							growth: 0.05
						},
						{
							item: "golden_apple",
							growth: 0.2
						},
						{
							item: "appleEnchanted",
							growth: 0.2
						}
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 4,
					speed_multiplier: 1
				}
			},
			"minecraft:mule_adult": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/horse.json"
				},
				"minecraft:behavior.run_around_like_crazy": {
					priority: 1,
					speed_multiplier: 1.2
				}
			},
			"minecraft:mule_wild": {
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"player",
						"zombie"
					],
					interact_text: "action.interact.mount",
					seats: {
						position: [
							0,
							0.975,
							-0.2
						]
					}
				},
				"minecraft:behavior.mount_pathing": {
					priority: 2,
					speed_multiplier: 1.5,
					target_dist: 0,
					track_target: true
				},
				"minecraft:tamemount": {
					min_temper: 0,
					max_temper: 100,
					feed_text: "action.interact.feed",
					ride_text: "action.interact.mount",
					feed_items: [
						{
							item: "wheat",
							temper_mod: 3
						},
						{
							item: "sugar",
							temper_mod: 3
						},
						{
							item: "apple",
							temper_mod: 3
						},
						{
							item: "golden_carrot",
							temper_mod: 5
						},
						{
							item: "golden_apple",
							temper_mod: 10
						},
						{
							item: "appleEnchanted",
							temper_mod: 10
						}
					],
					auto_reject_items: [
						{
							item: "horsearmorleather"
						},
						{
							item: "horsearmoriron"
						},
						{
							item: "horsearmorgold"
						},
						{
							item: "horsearmordiamond"
						},
						{
							item: "saddle"
						}
					],
					tame_event: {
						event: "minecraft:on_tame",
						target: "self"
					}
				}
			},
			"minecraft:mule_tamed": {
				"minecraft:is_tamed": {
				},
				"minecraft:equippable": {
					slots: [
						{
							slot: 0,
							item: "saddle",
							accepted_items: [
								"saddle"
							],
							on_equip: {
								event: "minecraft:mule_saddled"
							},
							on_unequip: {
								event: "minecraft:mule_unsaddled"
							}
						}
					]
				},
				"minecraft:rideable": {
					seat_count: 1,
					crouching_skip_interact: true,
					family_types: [
						"player"
					],
					interact_text: "action.interact.ride.horse",
					seats: {
						position: [
							0,
							0.975,
							-0.2
						]
					}
				},
				"minecraft:inventory": {
					inventory_size: 16,
					container_type: "horse"
				},
				"minecraft:behavior.tempt": {
					priority: 5,
					speed_multiplier: 1.2,
					items: [
						"apple",
						"carrot",
						"golden_apple",
						"appleEnchanted",
						"golden_carrot",
						"carrotOnAStick",
						"hay_block",
						"sugar",
						"bread",
						"wheat"
					]
				}
			},
			"minecraft:mule_unchested": {
				"minecraft:interact": {
					interactions: [
						{
							play_sounds: "armor.equip_generic",
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "chest"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										}
									]
								},
								event: "minecraft:on_chest",
								target: "self"
							},
							use_item: true,
							interact_text: "action.interact.attachchest"
						}
					]
				}
			},
			"minecraft:mule_chested": {
				"minecraft:is_chested": {
				}
			},
			"minecraft:mule_saddled": {
				"minecraft:is_saddled": {
				},
				"minecraft:input_ground_controlled": {
				},
				"minecraft:can_power_jump": {
				},
				"minecraft:behavior.player_ride_tamed": {
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"mule",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 1.4,
				height: 1.6
			},
			"minecraft:health": {
				value: {
					range_min: 15,
					range_max: 30
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.175
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:nameable": {
			},
			"minecraft:horse.jump_strength": {
				value: 0.5
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:healable": {
				items: [
					{
						item: "wheat",
						heal_amount: 2
					},
					{
						item: "sugar",
						heal_amount: 1
					},
					{
						item: "hay_block",
						heal_amount: 20
					},
					{
						item: "apple",
						heal_amount: 3
					},
					{
						item: "golden_carrot",
						heal_amount: 4
					},
					{
						item: "golden_apple",
						heal_amount: 10
					},
					{
						item: "appleEnchanted",
						heal_amount: 10
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.7
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 80,
						add: {
							component_groups: [
								"minecraft:mule_adult",
								"minecraft:mule_wild"
							]
						}
					},
					{
						weight: 20,
						add: {
							component_groups: [
								"minecraft:mule_baby"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:mule_baby"
					]
				}
			},
			"minecraft:on_tame": {
				remove: {
					component_groups: [
						"minecraft:mule_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:mule_tamed",
						"minecraft:mule_unchested"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:mule_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:mule_adult",
						"minecraft:mule_wild"
					]
				}
			},
			"minecraft:on_chest": {
				remove: {
					component_groups: [
						"minecraft:mule_unchested"
					]
				},
				add: {
					component_groups: [
						"minecraft:mule_chested"
					]
				}
			},
			"minecraft:mule_saddled": {
				add: {
					component_groups: [
						"minecraft:mule_saddled"
					]
				}
			},
			"minecraft:mule_unsaddled": {
				remove: {
					component_groups: [
						"minecraft:mule_saddled"
					]
				}
			}
		}
	}
},
	"minecraft:npc": {
	format_version: "1.19.30",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:npc",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:damage_sensor": {
				triggers: {
					cause: "all",
					deals_damage: false
				}
			},
			"minecraft:type_family": {
				family: [
					"npc",
					"mob"
				]
			},
			"minecraft:fire_immune": true,
			"minecraft:movement": {
				value: 0.5
			},
			"minecraft:loot": {
				table: "loot_tables/empty.json"
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 2.1
			},
			"minecraft:behavior.look_at_player": {
				priority: 0,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:persistent": {
			},
			"minecraft:npc": {
				npc_data: {
					portrait_offsets: {
						translate: [
							-7,
							50,
							0
						],
						scale: [
							1.75,
							1.75,
							1.75
						]
					},
					picker_offsets: {
						translate: [
							0,
							20,
							0
						],
						scale: [
							1.7,
							1.7,
							1.7
						]
					},
					skin_list: [
						{
							variant: 0
						},
						{
							variant: 1
						},
						{
							variant: 2
						},
						{
							variant: 3
						},
						{
							variant: 4
						},
						{
							variant: 5
						},
						{
							variant: 6
						},
						{
							variant: 7
						},
						{
							variant: 8
						},
						{
							variant: 9
						},
						{
							variant: 10
						},
						{
							variant: 11
						},
						{
							variant: 12
						},
						{
							variant: 13
						},
						{
							variant: 14
						},
						{
							variant: 15
						},
						{
							variant: 16
						},
						{
							variant: 17
						},
						{
							variant: 18
						},
						{
							variant: 19
						},
						{
							variant: 25
						},
						{
							variant: 26
						},
						{
							variant: 27
						},
						{
							variant: 28
						},
						{
							variant: 29
						},
						{
							variant: 30
						},
						{
							variant: 31
						},
						{
							variant: 32
						},
						{
							variant: 33
						},
						{
							variant: 34
						},
						{
							variant: 20
						},
						{
							variant: 21
						},
						{
							variant: 22
						},
						{
							variant: 23
						},
						{
							variant: 24
						},
						{
							variant: 35
						},
						{
							variant: 36
						},
						{
							variant: 37
						},
						{
							variant: 38
						},
						{
							variant: 39
						},
						{
							variant: 40
						},
						{
							variant: 41
						},
						{
							variant: 42
						},
						{
							variant: 43
						},
						{
							variant: 44
						},
						{
							variant: 50
						},
						{
							variant: 51
						},
						{
							variant: 52
						},
						{
							variant: 53
						},
						{
							variant: 54
						},
						{
							variant: 45
						},
						{
							variant: 46
						},
						{
							variant: 47
						},
						{
							variant: 48
						},
						{
							variant: 49
						},
						{
							variant: 55
						},
						{
							variant: 56
						},
						{
							variant: 57
						},
						{
							variant: 58
						},
						{
							variant: 59
						}
					]
				}
			},
			"minecraft:nameable": {
				always_show: false,
				allow_name_tag_renaming: false
			},
			"minecraft:physics": {
			}
		}
	}
},
	"minecraft:ocelot": {
	format_version: "1.18.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:ocelot",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:ocelot_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"fish",
						"salmon"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				}
			},
			"minecraft:ocelot_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/ocelot.json"
				},
				"minecraft:scale": {
					value: 1
				}
			},
			"minecraft:wild_child_ocelot_spawn": {
				"minecraft:spawn_entity": {
					entities: {
						filters: [
							{
								test: "random_chance",
								value: 7
							}
						],
						min_wait_time: 0,
						max_wait_time: 0,
						num_to_spawn: 2,
						single_use: true,
						spawn_entity: "minecraft:ocelot",
						spawn_event: "minecraft:entity_born",
						spawn_method: "born",
						spawn_sound: ""
					}
				}
			},
			"minecraft:ocelot_wild": {
				"minecraft:trusting": {
					probability: 0.33,
					trust_items: [
						"fish",
						"salmon"
					],
					trust_event: {
						event: "minecraft:on_trust",
						target: "self"
					}
				},
				"minecraft:behavior.tempt": {
					priority: 4,
					speed_multiplier: 0.5,
					within_radius: 16,
					can_get_scared: true,
					items: [
						"fish",
						"salmon"
					]
				},
				"minecraft:behavior.avoid_mob_type": {
					priority: 5,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "player"
							},
							max_dist: 10,
							walk_speed_multiplier: 0.8,
							sprint_speed_multiplier: 1.33
						}
					]
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							0.35,
							0
						]
					}
				}
			},
			"minecraft:ocelot_trusting": {
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 1
				},
				"minecraft:behavior.tempt": {
					priority: 4,
					speed_multiplier: 0.5,
					within_radius: 16,
					items: [
						"fish",
						"salmon"
					]
				},
				"minecraft:breedable": {
					require_tame: false,
					breeds_with: {
						mate_type: "minecraft:ocelot",
						baby_type: "minecraft:ocelot",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					breed_items: [
						"fish",
						"salmon"
					]
				}
			},
			"minecraft:ocelot_tame": {
				"minecraft:is_tamed": {
				},
				"minecraft:health": {
					value: 20,
					max: 20
				},
				"minecraft:sittable": {
				},
				"minecraft:behavior.follow_owner": {
					priority: 4,
					speed_multiplier: 1,
					start_distance: 10,
					stop_distance: 2
				},
				"minecraft:behavior.stay_while_sitting": {
					priority: 3
				},
				"minecraft:behavior.ocelot_sit_on_block": {
					priority: 6,
					speed_multiplier: 1
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:attack_damage": {
				value: 3
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"ocelot",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 0.7
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.25
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 1,
				reselect_targets: true,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "chicken"
						},
						max_dist: 8
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "baby_turtle"
								},
								{
									test: "in_water",
									subject: "other",
									operator: "!=",
									value: true
								}
							]
						},
						max_dist: 8
					}
				]
			},
			"minecraft:behavior.mount_pathing": {
				priority: 1,
				speed_multiplier: 1.25,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.leap_at_target": {
				priority: 3,
				target_dist: 0.3
			},
			"minecraft:behavior.ocelotattack": {
				priority: 4,
				cooldown_time: 1,
				x_max_rotation: 30,
				y_max_head_rotation: 30,
				max_distance: 15,
				max_sneak_range: 15,
				max_sprint_range: 4,
				reach_multiplier: 2,
				sneak_speed_multiplier: 0.6,
				sprint_speed_multiplier: 1.33,
				walk_speed_multiplier: 0.8
			},
			"minecraft:behavior.random_stroll": {
				priority: 8,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.look_at_player": {
				priority: 9
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10,
				on_leash: {
					event: "minecraft:on_leash",
					target: "self"
				},
				on_unleash: {
					event: "minecraft:on_unleash",
					target: "self"
				}
			},
			"minecraft:balloonable": {
				mass: 0.7
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 3,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:ocelot_adult",
										"minecraft:ocelot_wild",
										"minecraft:wild_child_ocelot_spawn"
									]
								}
							},
							{
								weight: 1,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:ocelot_baby",
										"minecraft:ocelot_wild"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:entity_born": {
				sequence: [
					{
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:ocelot_baby",
								"minecraft:ocelot_trusting"
							]
						}
					}
				]
			},
			"minecraft:entity_born_wild": {
				remove: {
					component_groups: [
						"minecraft:ocelot_trusting"
					]
				},
				add: {
					component_groups: [
						"minecraft:ocelot_baby",
						"minecraft:ocelot_wild"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:ocelot_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:ocelot_adult"
					]
				}
			},
			"minecraft:on_trust": {
				sequence: [
					{
						remove: {
							component_groups: [
								"minecraft:ocelot_wild"
							]
						}
					},
					{
						add: {
							component_groups: [
								"minecraft:ocelot_trusting"
							]
						}
					}
				]
			},
			"minecraft:on_leash": {
				add: {
					component_groups: [
						"minecraft:ocelot_leashed"
					]
				}
			},
			"minecraft:on_unleash": {
				remove: {
					component_groups: [
						"minecraft:ocelot_leashed"
					]
				}
			}
		}
	}
},
	"minecraft:panda": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:panda",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:panda_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.4
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: "bamboo",
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.roll": {
					priority: 12,
					probability: 0.0016
				},
				"minecraft:behavior.follow_parent": {
					priority: 13,
					speed_multiplier: 1.1
				},
				"minecraft:on_target_acquired": {
					event: "minecraft:on_scared",
					target: "self"
				},
				"minecraft:behavior.sneeze": {
					priority: 7,
					probability: 0.0001666,
					cooldown_time: 1,
					within_radius: 10,
					entity_types: [
						{
							filters: {
								all_of: [
									{
										test: "has_component",
										subject: "other",
										operator: "!=",
										value: "minecraft:is_baby"
									},
									{
										test: "is_family",
										subject: "other",
										value: "panda"
									},
									{
										test: "in_water",
										subject: "other",
										operator: "!=",
										value: true
									},
									{
										test: "on_ground",
										operator: "==",
										value: true
									}
								]
							},
							max_dist: 10
						}
					],
					drop_item_chance: 0.001,
					loot_table: "loot_tables/entities/panda_sneeze.json",
					prepare_sound: "presneeze",
					prepare_time: 1,
					sound: "sneeze"
				}
			},
			"minecraft:panda_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/panda.json"
				},
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: false,
					blend_attributes: false,
					environment_requirements: {
						blocks: "bamboo",
						count: 8,
						radius: 5
					},
					breed_items: "bamboo",
					breeds_with: {
						mate_type: "minecraft:panda",
						baby_type: "minecraft:panda",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					mutation_factor: {
						variant: 1
					}
				},
				"minecraft:on_target_acquired": {
					event: "minecraft:become_angry",
					target: "self"
				},
				"minecraft:on_target_escape": {
					event: "minecraft:on_calm",
					target: "self"
				},
				"minecraft:attack": {
					damage: 2
				},
				"minecraft:behavior.melee_attack": {
					priority: 2,
					attack_once: true,
					track_target: true,
					reach_multiplier: 1
				}
			},
			"minecraft:panda_lazy": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:behavior.lay_down": {
					priority: 5,
					interval: 400,
					random_stop_interval: 2000
				},
				"minecraft:behavior.random_sitting": {
					priority: 6,
					start_chance: 0.02,
					stop_chance: 0.2,
					cooldown: 25,
					min_sit_time: 15
				},
				"minecraft:behavior.snacking": {
					priority: 3,
					snacking_cooldown: 17.5,
					snacking_cooldown_min: 10,
					snacking_stop_chance: 0.0011,
					items: [
						"bamboo",
						"cake"
					]
				},
				"minecraft:behavior.panic": {
					priority: 1,
					speed_multiplier: 2.5
				},
				"minecraft:movement": {
					value: 0.07
				}
			},
			"minecraft:panda_worried": {
				"minecraft:variant": {
					value: 2
				},
				"minecraft:behavior.scared": {
					priority: 1,
					sound_interval: 20
				},
				"minecraft:behavior.avoid_mob_type": {
					priority: 5,
					max_dist: 16,
					max_flee: 20,
					entity_types: [
						{
							filters: {
								test: "is_family",
								operator: "!=",
								subject: "other",
								value: "panda"
							},
							max_dist: 16,
							sprint_speed_multiplier: 1.5
						}
					]
				}
			},
			"minecraft:panda_playful": {
				"minecraft:variant": {
					value: 3
				},
				"minecraft:behavior.roll": {
					priority: 12,
					probability: 0.013
				}
			},
			"minecraft:panda_brown": {
				"minecraft:variant": {
					value: 4
				}
			},
			"minecraft:panda_weak": {
				"minecraft:variant": {
					value: 5
				},
				"minecraft:health": {
					value: 10,
					max: 10
				}
			},
			"minecraft:panda_sneezing": {
				"minecraft:behavior.sneeze": {
					priority: 7,
					probability: 0.002,
					cooldown_time: 1,
					within_radius: 10,
					entity_types: [
						{
							filters: {
								all_of: [
									{
										test: "has_component",
										subject: "other",
										operator: "!=",
										value: "minecraft:is_baby"
									},
									{
										test: "is_family",
										subject: "other",
										value: "panda"
									},
									{
										test: "in_water",
										subject: "other",
										operator: "!=",
										value: true
									},
									{
										test: "on_ground",
										operator: "==",
										value: true
									}
								]
							},
							max_dist: 10
						}
					],
					drop_item_chance: 0.001,
					loot_table: "loot_tables/entities/panda_sneeze.json",
					prepare_sound: "presneeze",
					prepare_time: 1,
					sound: "sneeze"
				}
			},
			"minecraft:panda_aggressive": {
				"minecraft:type_family": {
					family: [
						"panda",
						"panda_aggressive",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 6
				},
				"minecraft:attack": {
					damage: 6
				},
				"minecraft:behavior.melee_attack": {
					priority: 2,
					track_target: true,
					reach_multiplier: 1
				},
				"minecraft:on_friendly_anger": {
					event: "minecraft:on_anger",
					target: "self"
				},
				"minecraft:behavior.panic": {
					priority: 1,
					speed_multiplier: 1.25,
					ignore_mob_damage: true
				}
			},
			"minecraft:panda_angry": {
				"minecraft:angry": {
					duration: 500,
					broadcast_anger: true,
					broadcast_range: 41,
					broadcast_filters: {
						test: "is_family",
						operator: "==",
						value: "panda_aggressive"
					},
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:on_target_acquired": {
				}
			},
			"minecraft:baby_scared": {
				"minecraft:angry": {
					duration: 1,
					broadcast_anger: true,
					broadcast_range: 41,
					broadcast_filters: {
						test: "is_family",
						operator: "==",
						value: "panda_aggressive"
					},
					calm_event: {
						event: "minecraft:baby_on_calm",
						target: "self"
					}
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"panda"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:navigation.walk": {
				can_float: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:scale": {
				value: 1
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:giveable": {
				triggers: {
					cooldown: 3,
					items: [
						"bamboo",
						"cake"
					],
					on_give: {
						event: "minecraft:on_calm",
						target: "self"
					}
				}
			},
			"minecraft:inventory": {
				inventory_size: 1,
				"private": true
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:collision_box": {
				width: 1.7,
				height: 1.5
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.15
			},
			"minecraft:water_movement": {
				drag_factor: 0.98
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.random_sitting": {
				priority: 5,
				start_chance: 0.01,
				stop_chance: 0.3,
				cooldown: 30,
				min_sit_time: 10
			},
			"minecraft:behavior.snacking": {
				priority: 2,
				snacking_cooldown: 22.5,
				snacking_cooldown_min: 20,
				snacking_stop_chance: 0.001334,
				items: [
					"bamboo",
					"cake"
				]
			},
			"minecraft:behavior.mount_pathing": {
				priority: 5,
				speed_multiplier: 1.5,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.breed": {
				priority: 3,
				speed_multiplier: 1
			},
			"minecraft:behavior.tempt": {
				priority: 4,
				speed_multiplier: 1.25,
				items: [
					"bamboo"
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 14,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.25
			},
			"minecraft:balloonable": {
			},
			"minecraft:rideable": {
				seat_count: 1,
				family_types: [
					"zombie"
				],
				seats: {
					position: [
						0,
						1.105,
						0
					]
				}
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:variant": {
				value: 0
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:genetics": {
				mutation_rate: 0.03125,
				genes: [
					{
						name: "panda_variant",
						allele_range: {
							range_min: 0,
							range_max: 15
						},
						genetic_variants: [
							{
								main_allele: 0,
								birth_event: {
									event: "minecraft:panda_lazy",
									target: "self"
								}
							},
							{
								main_allele: 1,
								birth_event: {
									event: "minecraft:panda_worried",
									target: "self"
								}
							},
							{
								main_allele: 2,
								birth_event: {
									event: "minecraft:panda_playful",
									target: "self"
								}
							},
							{
								main_allele: 3,
								birth_event: {
									event: "minecraft:panda_aggressive",
									target: "self"
								}
							},
							{
								both_allele: {
									range_min: 4,
									range_max: 7
								},
								birth_event: {
									event: "minecraft:panda_weak",
									target: "self"
								}
							},
							{
								both_allele: {
									range_min: 8,
									range_max: 9
								},
								birth_event: {
									event: "minecraft:panda_brown",
									target: "self"
								}
							}
						]
					}
				]
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						add: {
							component_groups: [
								"minecraft:panda_adult"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"minecraft:panda_baby"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:panda_baby"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				sequence: [
					{
						remove: {
							component_groups: [
								"minecraft:panda_baby"
							]
						}
					},
					{
						add: {
							component_groups: [
								"minecraft:panda_adult"
							]
						}
					},
					{
						filters: {
							test: "is_variant",
							subject: "self",
							operator: "==",
							value: 3
						},
						add: {
							component_groups: [
								"minecraft:panda_playful"
							]
						}
					},
					{
						filters: {
							test: "is_variant",
							subject: "self",
							operator: "==",
							value: 6
						},
						add: {
							component_groups: [
								"minecraft:panda_aggressive"
							]
						}
					}
				]
			},
			"minecraft:panda_lazy": {
				add: {
					component_groups: [
						"minecraft:panda_lazy"
					]
				}
			},
			"minecraft:panda_worried": {
				add: {
					component_groups: [
						"minecraft:panda_worried"
					]
				}
			},
			"minecraft:panda_playful": {
				add: {
					component_groups: [
						"minecraft:panda_playful"
					]
				}
			},
			"minecraft:panda_brown": {
				add: {
					component_groups: [
						"minecraft:panda_brown"
					]
				}
			},
			"minecraft:panda_weak": {
				sequence: [
					{
						add: {
							component_groups: [
								"minecraft:panda_weak"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							operator: "==",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"minecraft:panda_sneezing"
							]
						}
					}
				]
			},
			"minecraft:panda_aggressive": {
				add: {
					component_groups: [
						"minecraft:panda_aggressive"
					]
				}
			},
			"minecraft:on_scared": {
				add: {
					component_groups: [
						"minecraft:baby_scared"
					]
				}
			},
			"minecraft:baby_on_calm": {
				remove: {
					component_groups: [
						"minecraft:baby_scared"
					]
				}
			},
			"minecraft:become_angry": {
				add: {
					component_groups: [
						"minecraft:panda_angry"
					]
				}
			},
			"minecraft:on_calm": {
				remove: {
					component_groups: [
						"minecraft:panda_angry"
					]
				}
			}
		}
	}
},
	"minecraft:parrot": {
	format_version: "1.19.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:parrot",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:parrot_red": {
				"minecraft:variant": {
					value: 0
				}
			},
			"minecraft:parrot_blue": {
				"minecraft:variant": {
					value: 1
				}
			},
			"minecraft:parrot_green": {
				"minecraft:variant": {
					value: 2
				}
			},
			"minecraft:parrot_cyan": {
				"minecraft:variant": {
					value: 3
				}
			},
			"minecraft:parrot_silver": {
				"minecraft:variant": {
					value: 4
				}
			},
			"minecraft:parrot_adult": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/parrot.json"
				}
			},
			"minecraft:parrot_wild": {
				"minecraft:type_family": {
					family: [
						"parrot_wild",
						"mob"
					]
				},
				"minecraft:tameable": {
					probability: 0.33,
					tame_items: [
						"wheat_seeds",
						"pumpkin_seeds",
						"melon_seeds",
						"beetroot_seeds"
					],
					tame_event: {
						event: "minecraft:on_tame",
						target: "self"
					}
				},
				"minecraft:behavior.random_fly": {
					priority: 2,
					xz_dist: 15,
					y_dist: 1,
					y_offset: 0,
					speed_multiplier: 1,
					can_land_on_trees: true,
					avoid_damage_blocks: true
				},
				"minecraft:behavior.follow_mob": {
					priority: 3,
					speed_multiplier: 1,
					stop_distance: 3,
					search_range: 20
				}
			},
			"minecraft:parrot_tame": {
				"minecraft:type_family": {
					family: [
						"parrot_tame",
						"mob"
					]
				},
				"minecraft:is_tamed": {
				},
				"minecraft:behavior.follow_owner": {
					priority: 2,
					speed_multiplier: 1,
					start_distance: 5,
					stop_distance: 1
				},
				"minecraft:sittable": {
				},
				"minecraft:behavior.stay_while_sitting": {
					priority: 1
				},
				"minecraft:behavior.find_mount": {
					priority: 3,
					within_radius: 16,
					avoid_water: true,
					start_delay: 100,
					target_needed: false,
					mount_distance: 2
				}
			},
			"minecraft:parrot_not_riding_player": {
				"minecraft:entity_sensor": {
					sensor_range: 2,
					relative_range: false,
					event_filters: {
						all_of: [
							{
								test: "is_riding",
								subject: "self",
								operator: "equals",
								value: true
							},
							{
								test: "has_component",
								subject: "self",
								operator: "equals",
								value: "minecraft:behavior.look_at_player"
							}
						]
					},
					event: "minecraft:on_riding_player"
				},
				"minecraft:behavior.look_at_player": {
					priority: 1,
					look_distance: 8
				}
			},
			"minecraft:parrot_riding_player": {
				"minecraft:entity_sensor": {
					sensor_range: 2,
					relative_range: false,
					event_filters: {
						all_of: [
							{
								test: "is_riding",
								subject: "self",
								operator: "equals",
								value: false
							},
							{
								test: "has_component",
								subject: "self",
								operator: "not",
								value: "minecraft:behavior.look_at_player"
							}
						]
					},
					event: "minecraft:on_not_riding_player"
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 0.5,
				height: 1
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 6,
				max: 6
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.4
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_fly": {
			},
			"minecraft:navigation.fly": {
				can_path_over_water: true,
				can_path_from_air: true
			},
			"minecraft:movement.fly": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 0,
				speed_multiplier: 1.25
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:game_event_movement_tracking": {
				emit_flap: true
			},
			"minecraft:healable": {
				force_use: true,
				filters: {
					test: "is_riding",
					operator: "!=",
					value: true
				},
				items: [
					{
						item: "cookie",
						heal_amount: 0,
						effects: [
							{
								name: "fatal_poison",
								chance: 1,
								duration: 1000,
								amplifier: 0
							}
						]
					}
				]
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 20,
						add: {
							component_groups: [
								"minecraft:parrot_red",
								"minecraft:parrot_adult",
								"minecraft:parrot_wild",
								"minecraft:parrot_not_riding_player"
							]
						}
					},
					{
						weight: 20,
						add: {
							component_groups: [
								"minecraft:parrot_blue",
								"minecraft:parrot_adult",
								"minecraft:parrot_wild",
								"minecraft:parrot_not_riding_player"
							]
						}
					},
					{
						weight: 20,
						add: {
							component_groups: [
								"minecraft:parrot_green",
								"minecraft:parrot_adult",
								"minecraft:parrot_wild",
								"minecraft:parrot_not_riding_player"
							]
						}
					},
					{
						weight: 20,
						add: {
							component_groups: [
								"minecraft:parrot_cyan",
								"minecraft:parrot_adult",
								"minecraft:parrot_wild",
								"minecraft:parrot_not_riding_player"
							]
						}
					},
					{
						weight: 20,
						add: {
							component_groups: [
								"minecraft:parrot_silver",
								"minecraft:parrot_adult",
								"minecraft:parrot_wild",
								"minecraft:parrot_not_riding_player"
							]
						}
					}
				]
			},
			"minecraft:on_tame": {
				remove: {
					component_groups: [
						"minecraft:parrot_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:parrot_tame"
					]
				}
			},
			"minecraft:on_riding_player": {
				remove: {
					component_groups: [
						"minecraft:parrot_not_riding_player"
					]
				},
				add: {
					component_groups: [
						"minecraft:parrot_riding_player"
					]
				}
			},
			"minecraft:on_not_riding_player": {
				remove: {
					component_groups: [
						"minecraft:parrot_riding_player"
					]
				},
				add: {
					component_groups: [
						"minecraft:parrot_not_riding_player"
					]
				}
			}
		}
	}
},
	"minecraft:phantom": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:phantom",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:type_family": {
				family: [
					"phantom",
					"undead",
					"monster",
					"mob"
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/phantom.json"
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:physics": {
				has_gravity: false
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:game_event_movement_tracking": {
				emit_flap: true
			},
			"minecraft:attack": {
				damage: 6
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_air: true,
				breathes_water: false
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 0.5
			},
			"minecraft:movement": {
				value: 1.8
			},
			"minecraft:movement.glide": {
				start_speed: 0.1,
				speed_when_turning: 0.2
			},
			"minecraft:burns_in_daylight": {
			},
			"minecraft:follow_range": {
				value: 64,
				max: 64
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 0,
				max_dist: 16,
				ignore_visibility: true,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "ocelot"
								},
								{
									test: "is_family",
									subject: "other",
									value: "cat"
								}
							]
						},
						max_dist: 16
					}
				]
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 1,
				reselect_targets: true,
				scan_interval: 20,
				within_radius: 64,
				must_see_forget_duration: 0.5,
				target_search_height: 80,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 64
					}
				]
			},
			"minecraft:behavior.swoop_attack": {
				priority: 2,
				damage_reach: 0.2,
				speed_multiplier: 1,
				delay_range: [
					10,
					20
				]
			},
			"minecraft:behavior.circle_around_anchor": {
				priority: 3,
				radius_change: 1,
				radius_adjustment_chance: 0.004,
				height_adjustment_chance: 0.002857,
				goal_radius: 1,
				angle_change: 15,
				radius_range: [
					5,
					15
				],
				height_offset_range: [
					-4,
					5
				],
				height_above_target_range: [
					20,
					40
				]
			}
		}
	}
},
	"minecraft:pig": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:pig",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:pig_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"carrot",
						"beetroot",
						"potato"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 6,
					speed_multiplier: 1.1
				}
			},
			"minecraft:pig_transform": {
				"minecraft:transformation": {
					into: "minecraft:pig_zombie",
					delay: 0.5
				}
			},
			"minecraft:pig_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/pig.json"
				},
				"minecraft:behavior.breed": {
					priority: 4,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: false,
					breeds_with: {
						mate_type: "minecraft:pig",
						baby_type: "minecraft:pig",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					breed_items: [
						"carrot",
						"beetroot",
						"potato"
					]
				}
			},
			"minecraft:pig_unsaddled": {
				"minecraft:interact": {
					interactions: [
						{
							on_interact: {
								filters: {
									test: "has_equipment",
									subject: "other",
									domain: "hand",
									value: "saddle"
								},
								event: "minecraft:on_saddled"
							},
							use_item: true,
							play_sounds: "saddle",
							interact_text: "action.interact.saddle"
						}
					]
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							0.63,
							0
						]
					}
				}
			},
			"minecraft:pig_saddled": {
				"minecraft:is_saddled": {
				},
				"minecraft:loot": {
					table: "loot_tables/entities/pig_saddled.json"
				},
				"minecraft:boostable": {
					speed_multiplier: 2,
					duration: 3,
					boost_items: [
						{
							item: "carrotOnAStick",
							damage: 2,
							replace_item: "fishing_rod"
						}
					]
				},
				"minecraft:rideable": {
					seat_count: 1,
					interact_text: "action.interact.ride.horse",
					family_types: [
						"player"
					],
					seats: {
						position: [
							0,
							0.63,
							0
						]
					}
				},
				"minecraft:item_controllable": {
					control_items: "carrotOnAStick"
				},
				"minecraft:behavior.controlled_by_player": {
					priority: 0
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:damage_sensor": {
				triggers: {
					on_damage: {
						filters: [
							{
								test: "is_family",
								subject: "other",
								value: "lightning"
							},
							{
								test: "is_difficulty",
								operator: "!=",
								value: "peaceful"
							}
						],
						event: "become_zombie"
					},
					deals_damage: false
				}
			},
			"minecraft:type_family": {
				family: [
					"pig",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 0.9
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 0.9
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.mount_pathing": {
				priority: 1,
				speed_multiplier: 1.25,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.float": {
				priority: 2
			},
			"minecraft:behavior.panic": {
				priority: 3,
				speed_multiplier: 1.25
			},
			"minecraft:behavior.tempt": {
				priority: 5,
				speed_multiplier: 1.2,
				items: [
					"potato",
					"carrot",
					"beetroot",
					"carrotOnAStick"
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			become_zombie: {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:pig_transform"
					]
				}
			},
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						trigger: "minecraft:spawn_adult"
					},
					{
						weight: 5,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:pig_baby"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:pig_baby"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:pig_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:pig_adult",
						"minecraft:pig_unsaddled"
					]
				}
			},
			"minecraft:on_saddled": {
				remove: {
					component_groups: [
						"minecraft:pig_unsaddled"
					]
				},
				add: {
					component_groups: [
						"minecraft:pig_saddled"
					]
				}
			},
			"minecraft:spawn_adult": {
				add: {
					component_groups: [
						"minecraft:pig_adult",
						"minecraft:pig_unsaddled"
					]
				}
			}
		}
	}
},
	"minecraft:piglin": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:piglin",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			zombification_sensor: {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "in_nether",
							subject: "self",
							operator: "==",
							value: false
						},
						event: "start_zombification_event"
					}
				}
			},
			start_zombification: {
				"minecraft:is_shaking": {
				},
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "in_nether",
							subject: "self",
							operator: "==",
							value: true
						},
						event: "stop_zombification_event"
					}
				},
				"minecraft:timer": {
					looping: false,
					time: 15,
					time_down_event: {
						event: "become_zombie_event"
					}
				}
			},
			become_zombie: {
				"minecraft:transformation": {
					into: "minecraft:zombie_pigman",
					transformation_sound: "converted_to_zombified",
					keep_level: true,
					drop_inventory: true,
					preserve_equipment: true
				}
			},
			ranged_unit: {
				"minecraft:behavior.ranged_attack": {
					priority: 8,
					attack_interval_min: 1,
					attack_interval_max: 1,
					attack_radius: 8,
					attack_radius_min: 4,
					speed_multiplier: 1,
					target_in_sight_time: 0.1
				},
				"minecraft:shooter": {
					def: "minecraft:arrow"
				},
				"minecraft:behavior.charge_held_item": {
					priority: 3,
					items: [
						"minecraft:arrow"
					]
				},
				"minecraft:equipment": {
					table: "loot_tables/entities/piglin_gear_ranged.json"
				},
				"minecraft:variant": {
					value: 0
				}
			},
			melee_unit: {
				"minecraft:behavior.melee_attack": {
					priority: 8,
					speed_multiplier: 1,
					track_target: true
				},
				"minecraft:attack": {
					damage: 5
				},
				"minecraft:equipment": {
					table: "loot_tables/entities/piglin_gear_melee.json"
				},
				"minecraft:variant": {
					value: 1
				}
			},
			angry: {
				"minecraft:angry": {
					duration: 30,
					broadcast_anger: true,
					broadcast_anger_on_attack: true,
					broadcast_anger_on_being_attacked: true,
					broadcast_range: 16,
					broadcast_targets: [
						"piglin"
					],
					calm_event: {
						event: "become_calm_event",
						target: "self"
					},
					filters: {
						all_of: [
							{
								test: "is_family",
								subject: "other",
								operator: "!=",
								value: "piglin"
							},
							{
								test: "has_component",
								subject: "self",
								operator: "!=",
								value: "minecraft:attack_cooldown"
							}
						]
					},
					angry_sound: "angry",
					sound_interval: {
						range_min: 2,
						range_max: 5
					}
				}
			},
			attack_cooldown: {
				"minecraft:attack_cooldown": {
					attack_cooldown_time: [
						30,
						120
					],
					attack_cooldown_complete_event: {
						event: "attack_cooldown_complete_event",
						target: "self"
					}
				}
			},
			piglin_baby: {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:movement": {
					value: 0.42
				},
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 1 + (query.equipment_count * Math.Random(1,2)) : 0"
				},
				"minecraft:behavior.panic": {
					priority: 1,
					speed_multiplier: 1.1
				}
			},
			piglin_adult: {
				"minecraft:group_size": {
					radius: 32,
					filters: {
						all_of: [
							{
								test: "has_component",
								operator: "!=",
								value: "minecraft:is_baby"
							},
							{
								test: "is_family",
								value: "piglin"
							}
						]
					}
				},
				"minecraft:movement": {
					value: 0.35
				},
				"minecraft:barter": {
					barter_table: "loot_tables/entities/piglin_barter.json",
					cooldown_after_being_attacked: 20
				},
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:celebrate_hunt": {
					celebration_targets: {
						all_of: [
							{
								test: "is_family",
								value: "hoglin"
							}
						]
					},
					broadcast: true,
					duration: 10,
					celebrate_sound: "celebrate",
					sound_interval: {
						range_min: 2,
						range_max: 5
					},
					radius: 16
				},
				"minecraft:block_sensor": {
					sensor_radius: 16,
					on_break: [
						{
							block_list: [
								"minecraft:gold_block",
								"minecraft:gilded_blackstone",
								"minecraft:nether_gold_ore",
								"minecraft:deepslate_gold_ore",
								"minecraft:raw_gold_block",
								"minecraft:gold_ore",
								"minecraft:chest",
								"minecraft:trapped_chest",
								"minecraft:ender_chest",
								"minecraft:barrel",
								"minecraft:shulker_box",
								"minecraft:undyed_shulker_box"
							],
							on_block_broken: "important_block_destroyed_event"
						}
					]
				}
			},
			interactable_piglin: {
				"minecraft:interact": {
					interactions: [
						{
							on_interact: {
								filters: {
									all_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "gold_ingot"
										},
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "has_component",
											subject: "self",
											operator: "!=",
											value: "minecraft:is_baby"
										}
									]
								}
							},
							barter: true,
							admire: true,
							use_item: true,
							cooldown_after_being_attacked: 20,
							interact_text: "action.interact.barter"
						}
					]
				}
			},
			hunter: {
				"minecraft:type_family": {
					family: [
						"piglin",
						"piglin_hunter",
						"monster"
					]
				}
			},
			not_hunter: {
				"minecraft:type_family": {
					family: [
						"piglin",
						"monster"
					]
				}
			},
			alert_for_attack_targets: {
				"minecraft:behavior.nearest_attackable_target": {
					priority: 7,
					within_radius: 16,
					persist_time: 0,
					entity_types: [
						{
							filters: {
								any_of: [
									{
										test: "is_family",
										subject: "other",
										value: "wither"
									}
								]
							},
							max_dist: 16
						},
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "self",
										value: "piglin_hunter"
									},
									{
										test: "is_family",
										subject: "other",
										value: "hoglin_huntable"
									},
									{
										test: "has_component",
										subject: "other",
										operator: "!=",
										value: "minecraft:is_baby"
									},
									{
										test: "has_component",
										subject: "self",
										operator: "!=",
										value: "minecraft:attack_cooldown"
									}
								]
							},
							max_dist: 16
						},
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_equipment",
										subject: "other",
										domain: "head",
										operator: "!=",
										value: "golden_helmet"
									},
									{
										test: "has_equipment",
										subject: "other",
										domain: "torso",
										operator: "!=",
										value: "golden_chestplate"
									},
									{
										test: "has_equipment",
										subject: "other",
										domain: "leg",
										operator: "!=",
										value: "golden_leggings"
									},
									{
										test: "has_equipment",
										subject: "other",
										domain: "feet",
										operator: "!=",
										value: "golden_boots"
									}
								]
							},
							max_dist: 16,
							reevaluate_description: true
						},
						{
							filters: {
								any_of: [
									{
										test: "has_container_open",
										subject: "other",
										operator: "==",
										value: true
									}
								]
							},
							max_dist: 16
						}
					],
					must_see: true
				}
			},
			take_target_as_response_to_block_break: {
				"minecraft:behavior.nearest_attackable_target": {
					priority: 7,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "player"
							},
							max_dist: 16
						}
					]
				}
			},
			piglin_jockey: {
				"minecraft:behavior.find_mount": {
					priority: 1,
					within_radius: 16,
					start_delay: 15,
					max_failed_attempts: 20
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:equip_item": {
			},
			"minecraft:admire_item": {
				duration: 8,
				cooldown_after_being_attacked: 20
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:on_target_acquired": {
				event: "become_angry_event",
				target: "self"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:health": {
				value: 16,
				max: 16
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/piglin.json"
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				can_open_doors: true
			},
			"minecraft:annotation.open_door": {
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:nameable": {
			},
			"minecraft:inventory": {
				inventory_size: 8
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.admire_item": {
				priority: 2,
				admire_item_sound: "admire",
				sound_interval: {
					range_min: 2,
					range_max: 5
				},
				on_admire_item_start: {
					event: "admire_item_started_event",
					target: "self"
				},
				on_admire_item_stop: {
					event: "admire_item_stopped_event",
					target: "self"
				}
			},
			"minecraft:behavior.barter": {
				priority: 3
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 4,
				remove_target: true,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "zombie_pigman"
								}
							]
						},
						max_dist: 6
					},
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "zoglin"
								}
							]
						},
						max_dist: 6
					},
					{
						filters: {
							all_of: [
								{
									test: "has_target",
									subject: "other",
									value: true
								},
								{
									test: "is_family",
									subject: "other",
									value: "hoglin"
								}
							]
						},
						sprint_speed_multiplier: 1.2,
						check_if_outnumbered: true
					}
				],
				on_escape_event: {
					event: "become_calm_event",
					target: "self"
				},
				avoid_mob_sound: "retreat",
				sound_interval: {
					range_min: 2,
					range_max: 5
				}
			},
			"minecraft:behavior.equip_item": {
				priority: 5
			},
			"minecraft:behavior.pickup_items": {
				priority: 6,
				max_dist: 10,
				goal_radius: 2,
				speed_multiplier: 0.8,
				pickup_based_on_chance: false,
				can_pickup_any_item: false,
				cooldown_after_being_attacked: 20
			},
			"minecraft:behavior.avoid_block": {
				priority: 9,
				tick_interval: 5,
				search_range: 8,
				search_height: 4,
				sprint_speed_modifier: 1.1,
				target_selection_method: "nearest",
				target_blocks: [
					"minecraft:soul_fire",
					"minecraft:soul_lantern",
					"minecraft:soul_torch",
					"minecraft:item.soul_campfire"
				],
				avoid_block_sound: "retreat",
				sound_interval: {
					range_min: 2,
					range_max: 5
				}
			},
			"minecraft:behavior.random_stroll": {
				priority: 10,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.look_at_player": {
				priority: 11,
				look_distance: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 12
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:follow_range": {
				value: 64
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:golden_sword",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_axe",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_hoe",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_pickaxe",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_shovel",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_rail",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_helmet",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_chestplate",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_leggings",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_boots",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_apple",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:appleEnchanted",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:golden_carrot",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:gold_block",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:gold_nugget",
						priority: 2,
						stored_in_inventory: true
					},
					{
						item: "minecraft:raw_gold",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:gold_ore",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:nether_gold_ore",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:deepslate_gold_ore",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:raw_gold_block",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:gilded_blackstone",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:horsearmorgold",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:crossbow",
						priority: 2
					},
					{
						item: "minecraft:porkchop",
						consume_item: true,
						priority: 3,
						max_amount: 64
					},
					{
						item: "minecraft:cooked_porkchop",
						consume_item: true,
						priority: 3,
						max_amount: 64
					},
					{
						item: "minecraft:netherite_helmet",
						priority: 3
					},
					{
						item: "minecraft:diamond_helmet",
						priority: 4
					},
					{
						item: "minecraft:iron_helmet",
						priority: 5
					},
					{
						item: "minecraft:chainmail_helmet",
						priority: 6
					},
					{
						item: "minecraft:leather_helmet",
						priority: 7
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 8
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 8
					},
					{
						item: "minecraft:skull:2",
						want_amount: 1,
						surplus_amount: 1,
						priority: 8
					},
					{
						item: "minecraft:skull:3",
						want_amount: 1,
						surplus_amount: 1,
						priority: 8
					},
					{
						item: "minecraft:skull:4",
						want_amount: 1,
						surplus_amount: 1,
						priority: 8
					},
					{
						item: "minecraft:skull:5",
						want_amount: 1,
						surplus_amount: 1,
						priority: 8
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 8
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 8
					},
					{
						item: "minecraft:netherite_chestplate",
						priority: 3
					},
					{
						item: "minecraft:diamond_chestplate",
						priority: 4
					},
					{
						item: "minecraft:iron_chestplate",
						priority: 5
					},
					{
						item: "minecraft:chainmail_chestplate",
						priority: 6
					},
					{
						item: "minecraft:leather_chestplate",
						priority: 7
					},
					{
						item: "minecraft:elytra",
						priority: 7
					},
					{
						item: "minecraft:netherite_leggings",
						priority: 3
					},
					{
						item: "minecraft:diamond_leggings",
						priority: 4
					},
					{
						item: "minecraft:iron_leggings",
						priority: 5
					},
					{
						item: "minecraft:chainmail_leggings",
						priority: 6
					},
					{
						item: "minecraft:leather_leggings",
						priority: 7
					},
					{
						item: "minecraft:netherite_boots",
						priority: 3
					},
					{
						item: "minecraft:diamond_boots",
						priority: 4
					},
					{
						item: "minecraft:iron_boots",
						priority: 5
					},
					{
						item: "minecraft:chainmail_boots",
						priority: 6
					},
					{
						item: "minecraft:bell",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:clock",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:speckled_melon",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:light_weighted_pressure_plate",
						priority: 2,
						admire: true,
						pickup_limit: 1,
						stored_in_inventory: true
					},
					{
						item: "minecraft:leather_boots",
						priority: 7
					},
					{
						item: "minecraft:netherite_sword",
						priority: 3
					},
					{
						item: "minecraft:diamond_sword",
						priority: 4
					},
					{
						item: "minecraft:iron_sword",
						priority: 5
					},
					{
						item: "minecraft:stone_sword",
						priority: 6
					},
					{
						item: "minecraft:wooden_sword",
						priority: 7
					},
					{
						item: "minecraft:shield",
						priority: 7
					},
					{
						item: "minecraft:gold_ingot",
						priority: 1,
						pickup_limit: 1,
						admire: true,
						barter: true
					}
				]
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 5,
						trigger: "spawn_baby"
					},
					{
						weight: 95,
						trigger: "spawn_adult"
					}
				]
			},
			"minecraft:entity_born": {
				trigger: "spawn_baby"
			},
			spawn_adult_no_hunting: {
				randomize: [
					{
						weight: 1,
						trigger: "spawn_adult_ranged_no_hunting"
					},
					{
						weight: 1,
						trigger: "spawn_adult_melee_no_hunting"
					}
				]
			},
			spawn_adult: {
				randomize: [
					{
						weight: 1,
						trigger: "spawn_adult_ranged"
					},
					{
						weight: 1,
						trigger: "spawn_adult_melee"
					}
				]
			},
			spawn_adult_ranged: {
				add: {
					component_groups: [
						"piglin_adult",
						"zombification_sensor",
						"alert_for_attack_targets",
						"ranged_unit",
						"attack_cooldown",
						"hunter",
						"interactable_piglin"
					]
				}
			},
			spawn_adult_ranged_no_hunting: {
				add: {
					component_groups: [
						"piglin_adult",
						"zombification_sensor",
						"alert_for_attack_targets",
						"ranged_unit",
						"attack_cooldown",
						"not_hunter",
						"interactable_piglin"
					]
				}
			},
			spawn_adult_melee: {
				add: {
					component_groups: [
						"piglin_adult",
						"zombification_sensor",
						"alert_for_attack_targets",
						"melee_unit",
						"attack_cooldown",
						"hunter",
						"interactable_piglin"
					]
				}
			},
			spawn_adult_melee_no_hunting: {
				add: {
					component_groups: [
						"piglin_adult",
						"zombification_sensor",
						"alert_for_attack_targets",
						"melee_unit",
						"attack_cooldown",
						"not_hunter",
						"interactable_piglin"
					]
				}
			},
			spawn_baby: {
				randomize: [
					{
						weight: 9,
						add: {
							component_groups: [
								"piglin_baby",
								"zombification_sensor",
								"not_hunter"
							]
						}
					},
					{
						weight: 1,
						add: {
							component_groups: [
								"piglin_baby",
								"zombification_sensor",
								"piglin_jockey",
								"not_hunter"
							]
						}
					}
				]
			},
			stop_zombification_event: {
				add: {
					component_groups: [
						"zombification_sensor"
					]
				},
				remove: {
					component_groups: [
						"start_zombification"
					]
				}
			},
			start_zombification_event: {
				add: {
					component_groups: [
						"start_zombification"
					]
				},
				remove: {
					component_groups: [
						"zombification_sensor"
					]
				}
			},
			become_angry_event: {
				add: {
					component_groups: [
						"angry"
					]
				}
			},
			become_calm_event: {
				remove: {
					component_groups: [
						"angry",
						"take_target_as_response_to_block_break"
					]
				},
				add: {
					component_groups: [
						"alert_for_attack_targets",
						"attack_cooldown"
					]
				}
			},
			attack_cooldown_complete_event: {
				remove: {
					component_groups: [
						"attack_cooldown"
					]
				}
			},
			become_zombie_event: {
				add: {
					component_groups: [
						"become_zombie"
					]
				}
			},
			important_block_destroyed_event: {
				remove: {
					component_groups: [
						"alert_for_attack_targets"
					]
				},
				add: {
					component_groups: [
						"take_target_as_response_to_block_break"
					]
				}
			},
			admire_item_started_event: {
				remove: {
					component_groups: [
						"interactable_piglin"
					]
				}
			},
			admire_item_stopped_event: {
				add: {
					component_groups: [
						"interactable_piglin"
					]
				}
			}
		}
	}
},
	"minecraft:piglin_brute": {
	format_version: "1.18.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:piglin_brute",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			zombification_sensor: {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "in_nether",
							subject: "self",
							operator: "==",
							value: false
						},
						event: "start_zombification_event"
					}
				}
			},
			start_zombification: {
				"minecraft:is_shaking": {
				},
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "in_nether",
							subject: "self",
							operator: "==",
							value: true
						},
						event: "stop_zombification_event"
					}
				},
				"minecraft:timer": {
					looping: false,
					time: 15,
					time_down_event: {
						event: "become_zombie_event"
					}
				}
			},
			become_zombie: {
				"minecraft:transformation": {
					into: "minecraft:zombie_pigman",
					transformation_sound: "converted_to_zombified",
					keep_level: true,
					preserve_equipment: true
				}
			},
			melee_unit: {
				"minecraft:behavior.melee_attack": {
					priority: 4,
					speed_multiplier: 1,
					track_target: true
				},
				"minecraft:attack": {
					damage: 7
				},
				"minecraft:equipment": {
					table: "loot_tables/entities/piglin_brute_gear.json"
				},
				"minecraft:variant": {
					value: 1
				}
			},
			angry: {
				"minecraft:angry": {
					duration: 30,
					broadcast_anger: false,
					broadcast_anger_on_attack: false,
					broadcast_anger_on_being_attacked: true,
					broadcast_range: 16,
					broadcast_targets: [
						"piglin"
					],
					calm_event: {
						event: "become_calm_event",
						target: "self"
					},
					filters: {
						all_of: [
							{
								test: "is_family",
								subject: "other",
								operator: "!=",
								value: "piglin"
							}
						]
					},
					angry_sound: "angry",
					sound_interval: {
						range_min: 2,
						range_max: 5
					}
				}
			},
			alert_for_attack_targets: {
				"minecraft:behavior.nearest_prioritized_attackable_target": {
					priority: 3,
					within_radius: 12,
					persist_time: 2,
					must_see: true,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "player"
							},
							max_dist: 12,
							priority: 0
						},
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "wither"
							},
							max_dist: 12,
							priority: 1
						}
					]
				}
			},
			take_target_as_response_to_block_break: {
				"minecraft:behavior.nearest_attackable_target": {
					priority: 3,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "player"
							},
							max_dist: 16
						}
					]
				}
			},
			go_back_to_spawn: {
				"minecraft:behavior.go_home": {
					priority: 6,
					interval: 200,
					speed_multiplier: 0.6,
					goal_radius: 4,
					on_failed: [
						{
							event: "go_back_to_spawn_failed",
							target: "self"
						}
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:type_family": {
				family: [
					"piglin",
					"adult_piglin",
					"piglin_brute",
					"monster"
				]
			},
			"minecraft:home": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 20 : 0"
			},
			"minecraft:on_target_acquired": {
				event: "become_angry_event",
				target: "self"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:health": {
				value: 50,
				max: 50
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/piglin.json"
			},
			"minecraft:movement": {
				value: 0.35
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				can_open_doors: true
			},
			"minecraft:annotation.open_door": {
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:nameable": {
			},
			"minecraft:despawn": {
				filters: {
					any_of: [
						{
							all_of: [
								{
									test: "is_persistent",
									value: false
								},
								{
									test: "distance_to_nearest_player",
									operator: ">",
									value: 54
								}
							]
						},
						{
							all_of: [
								{
									test: "is_persistent",
									value: false
								},
								{
									test: "inactivity_timer",
									subject: "self",
									value: 30
								},
								{
									test: "random_chance",
									value: 800
								},
								{
									test: "distance_to_nearest_player",
									operator: ">",
									value: 32
								}
							]
						}
					]
				}
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:follow_range": {
				value: 64
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"zombification_sensor",
						"alert_for_attack_targets",
						"melee_unit",
						"go_back_to_spawn"
					]
				}
			},
			stop_zombification_event: {
				add: {
					component_groups: [
						"zombification_sensor"
					]
				},
				remove: {
					component_groups: [
						"start_zombification"
					]
				}
			},
			start_zombification_event: {
				add: {
					component_groups: [
						"start_zombification"
					]
				},
				remove: {
					component_groups: [
						"zombification_sensor"
					]
				}
			},
			become_angry_event: {
				add: {
					component_groups: [
						"angry"
					]
				}
			},
			become_calm_event: {
				remove: {
					component_groups: [
						"angry"
					]
				},
				add: {
					component_groups: [
						"alert_for_attack_targets"
					]
				}
			},
			become_zombie_event: {
				add: {
					component_groups: [
						"become_zombie"
					]
				}
			},
			important_block_destroyed_event: {
				remove: {
					component_groups: [
						"alert_for_attack_targets"
					]
				},
				add: {
					component_groups: [
						"take_target_as_response_to_block_break"
					]
				}
			},
			go_back_to_spawn_failed: {
				remove: {
					component_groups: [
						"go_back_to_spawn"
					]
				}
			}
		}
	}
},
	"minecraft:pillager": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:pillager",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:celebrate": {
				"minecraft:behavior.celebrate": {
					priority: 5,
					celebration_sound: "celebrate",
					sound_interval: {
						range_min: 2,
						range_max: 7
					},
					jump_interval: {
						range_min: 1,
						range_max: 3.5
					},
					duration: 30,
					on_celebration_end_event: {
						event: "minecraft:stop_celebrating",
						target: "self"
					}
				}
			},
			"minecraft:ranged_attack": {
				"minecraft:behavior.ranged_attack": {
					priority: 4,
					attack_interval_min: 1,
					attack_interval_max: 1,
					attack_radius: 8
				},
				"minecraft:shooter": {
					def: "minecraft:arrow"
				},
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "is_underwater",
							subject: "self",
							operator: "==",
							value: true
						},
						event: "minecraft:melee_mode"
					}
				}
			},
			"minecraft:melee_attack": {
				"minecraft:behavior.melee_attack": {
					priority: 4,
					track_target: true
				},
				"minecraft:attack": {
					damage: 3
				},
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "in_water",
							subject: "self",
							operator: "==",
							value: false
						},
						event: "minecraft:ranged_mode"
					}
				}
			},
			"minecraft:raid_configuration": {
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "hostile",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: false,
					can_migrate: true,
					first_founding_reward: 0
				},
				"minecraft:behavior.move_to_village": {
					priority: 5,
					speed_multiplier: 1,
					goal_radius: 2
				},
				"minecraft:loot": {
					table: "loot_tables/entities/pillager_raid.json"
				},
				"minecraft:ambient_sound_interval": {
					value: 2,
					range: 4,
					event_name: "ambient.in.raid"
				}
			},
			"minecraft:raid_persistence": {
				"minecraft:persistent": {
				}
			},
			"minecraft:illager_squad_captain": {
				"minecraft:is_illager_captain": {
				},
				"minecraft:variant": {
					value: 1
				},
				"minecraft:equipment": {
					table: "loot_tables/entities/pillager_captain_equipment.json",
					slot_drop_chance: [
						{
							slot: "slot.armor.chest",
							drop_chance: 1
						}
					]
				},
				"minecraft:damage_sensor": {
					triggers: {
						on_damage: {
							filters: {
								all_of: [
									{
										test: "has_damage",
										value: "fatal"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									}
								]
							},
							event: "minecraft:gain_bad_omen",
							target: "other"
						}
					}
				},
				"minecraft:on_hurt": {
					event: "minecraft:ranged_mode",
					target: "self"
				},
				"minecraft:on_hurt_by_player": {
					event: "minecraft:ranged_mode",
					target: "self"
				}
			},
			"minecraft:patrol_captain": {
				"minecraft:is_illager_captain": {
				},
				"minecraft:variant": {
					value: 1
				},
				"minecraft:equipment": {
					table: "loot_tables/entities/pillager_captain_equipment.json",
					slot_drop_chance: [
						{
							slot: "slot.armor.chest",
							drop_chance: 1
						}
					]
				},
				"minecraft:damage_sensor": {
					triggers: {
						on_damage: {
							filters: {
								all_of: [
									{
										test: "has_damage",
										value: "fatal"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									}
								]
							},
							event: "minecraft:gain_bad_omen",
							target: "other"
						}
					}
				},
				"minecraft:on_hurt": {
					event: "minecraft:ranged_mode",
					target: "self"
				},
				"minecraft:on_hurt_by_player": {
					event: "minecraft:ranged_mode",
					target: "self"
				},
				"minecraft:on_target_escape": {
					event: "minecraft:calm",
					target: "self"
				},
				"minecraft:behavior.hold_ground": {
					priority: 5,
					min_radius: 10,
					broadcast: true,
					broadcast_range: 8,
					within_radius_event: {
						event: "minecraft:ranged_mode",
						target: "self"
					}
				},
				"minecraft:behavior.move_to_random_block": {
					priority: 6,
					speed_multiplier: 0.55,
					within_radius: 8,
					block_distance: 512
				}
			},
			"minecraft:patrol_follower": {
				"minecraft:behavior.follow_target_captain": {
					priority: 5,
					speed_multiplier: 0.8,
					within_radius: 64,
					follow_distance: 5
				},
				"minecraft:behavior.hold_ground": {
					priority: 6,
					min_radius: 10,
					broadcast: true,
					broadcast_range: 8,
					within_radius_event: {
						event: "minecraft:ranged_mode",
						target: "self"
					}
				},
				"minecraft:on_hurt": {
					event: "minecraft:ranged_mode",
					target: "self"
				},
				"minecraft:on_hurt_by_player": {
					event: "minecraft:ranged_mode",
					target: "self"
				},
				"minecraft:on_target_escape": {
					event: "minecraft:calm",
					target: "self"
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? (query.is_baby ? 12 : 5) + (Math.die_roll(query.equipment_count,1,3)) : 0"
			},
			"minecraft:equip_item": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:type_family": {
				family: [
					"pillager",
					"monster",
					"illager",
					"mob"
				]
			},
			"minecraft:variant": {
				value: 0
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:health": {
				value: 24,
				max: 24
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/pillager.json"
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:banner:15",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					}
				]
			},
			"minecraft:movement": {
				value: 0.35
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:nameable": {
			},
			"minecraft:equipment": {
				table: "loot_tables/entities/pillager_gear.json"
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1,
				entity_types: {
					filters: {
						test: "is_family",
						subject: "other",
						operator: "!=",
						value: "illager"
					},
					max_dist: 64
				}
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				must_see: true,
				reselect_targets: true,
				within_radius: 16,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "wandering_trader"
								}
							]
						},
						max_dist: 16
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "villager"
								},
								{
									test: "has_component",
									subject: "other",
									operator: "!=",
									value: "minecraft:is_baby"
								}
							]
						},
						max_dist: 16
					}
				]
			},
			"minecraft:behavior.equip_item": {
				priority: 3
			},
			"minecraft:behavior.pickup_items": {
				priority: 7,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1
			},
			"minecraft:behavior.random_stroll": {
				priority: 8,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 9,
				look_distance: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 10
			},
			"minecraft:behavior.charge_held_item": {
				priority: 3,
				items: [
					"minecraft:arrow"
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:follow_range": {
				value: 64
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:ranged_attack"
					]
				}
			},
			"minecraft:spawn_for_raid": {
				add: {
					component_groups: [
						"minecraft:ranged_attack",
						"minecraft:raid_configuration",
						"minecraft:raid_persistence"
					]
				}
			},
			"minecraft:spawn_as_patrol_follower": {
				add: {
					component_groups: [
						"minecraft:ranged_attack",
						"minecraft:patrol_follower"
					]
				}
			},
			"minecraft:spawn_as_illager_captain": {
				add: {
					component_groups: [
						"minecraft:ranged_attack",
						"minecraft:illager_squad_captain"
					]
				}
			},
			"minecraft:promote_to_illager_captain": {
				add: {
					component_groups: [
						"minecraft:ranged_attack",
						"minecraft:illager_squad_captain"
					]
				},
				remove: {
					component_groups: [
						"minecraft:patrol_follower"
					]
				}
			},
			"minecraft:promote_to_patrol_captain": {
				add: {
					component_groups: [
						"minecraft:ranged_attack",
						"minecraft:patrol_captain"
					]
				},
				remove: {
					component_groups: [
						"minecraft:patrol_follower"
					]
				}
			},
			"minecraft:melee_mode": {
				remove: {
					component_groups: [
						"minecraft:ranged_attack"
					]
				},
				add: {
					component_groups: [
						"minecraft:melee_attack"
					]
				}
			},
			"minecraft:ranged_mode": {
				remove: {
					component_groups: [
						"minecraft:melee_attack"
					]
				},
				add: {
					component_groups: [
						"minecraft:ranged_attack"
					]
				}
			},
			"minecraft:start_celebrating": {
				sequence: [
					{
						add: {
							component_groups: [
								"minecraft:celebrate"
							]
						}
					},
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			},
			"minecraft:stop_celebrating": {
				remove: {
					component_groups: [
						"minecraft:celebrate"
					]
				}
			},
			"minecraft:raid_expired": {
				sequence: [
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			},
			"minecraft:calm": {
				remove: {
					component_groups: [
						"minecraft:melee_attack",
						"minecraft:ranged_attack"
					]
				}
			}
		}
	}
},
	"minecraft:player": {
	format_version: "1.18.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:player",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		component_groups: {
			"minecraft:add_bad_omen": {
				"minecraft:spell_effects": {
					add_effects: [
						{
							effect: "bad_omen",
							duration: 6000,
							visible: false,
							display_on_screen_animation: true
						}
					]
				},
				"minecraft:timer": {
					time: [
						0,
						0
					],
					looping: false,
					time_down_event: {
						event: "minecraft:clear_add_bad_omen",
						target: "self"
					}
				}
			},
			"minecraft:clear_bad_omen_spell_effect": {
				"minecraft:spell_effects": {
				}
			},
			"minecraft:raid_trigger": {
				"minecraft:raid_trigger": {
					triggered_event: {
						event: "minecraft:remove_raid_trigger",
						target: "self"
					}
				},
				"minecraft:spell_effects": {
					remove_effects: "bad_omen"
				}
			}
		},
		components: {
			"minecraft:experience_reward": {
				on_death: "Math.Min(query.player_level * 7, 100)"
			},
			"minecraft:type_family": {
				family: [
					"player"
				]
			},
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:loot": {
				table: "loot_tables/empty.json"
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.8
			},
			"minecraft:can_climb": {
			},
			"minecraft:movement": {
				value: 0.1
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:attack": {
				damage: 1
			},
			"minecraft:exhaustion_values": {
				heal: 6,
				jump: 0.05,
				sprint_jump: 0.2,
				mine: 0.005,
				attack: 0.1,
				damage: 0.1,
				walk: 0,
				sprint: 0.1,
				swim: 0.01
			},
			"minecraft:player.saturation": {
				value: 5,
				max: 20
			},
			"minecraft:player.exhaustion": {
				value: 0,
				max: 20
			},
			"minecraft:player.level": {
				value: 0,
				max: 24791
			},
			"minecraft:player.experience": {
				value: 0,
				max: 1
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: -1,
				inhale_time: 3.75,
				generates_bubbles: false
			},
			"minecraft:nameable": {
				always_show: true,
				allow_name_tag_renaming: false
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: false,
				is_pushable_by_piston: true
			},
			"minecraft:insomnia": {
				days_until_insomnia: 3
			},
			"minecraft:rideable": {
				seat_count: 2,
				family_types: [
					"parrot_tame"
				],
				pull_in_entities: true,
				seats: [
					{
						position: [
							0.4,
							-0.2,
							-0.1
						],
						min_rider_count: 0,
						max_rider_count: 0,
						lock_rider_rotation: 0
					},
					{
						position: [
							-0.4,
							-0.2,
							-0.1
						],
						min_rider_count: 1,
						max_rider_count: 2,
						lock_rider_rotation: 0
					}
				]
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:block_climber": {
			},
			"minecraft:environment_sensor": {
				triggers: {
					filters: {
						all_of: [
							{
								test: "has_mob_effect",
								subject: "self",
								value: "bad_omen"
							},
							{
								test: "is_in_village",
								subject: "self",
								value: true
							}
						]
					},
					event: "minecraft:trigger_raid"
				}
			}
		},
		events: {
			"minecraft:gain_bad_omen": {
				add: {
					component_groups: [
						"minecraft:add_bad_omen"
					]
				}
			},
			"minecraft:clear_add_bad_omen": {
				remove: {
					component_groups: [
						"minecraft:add_bad_omen"
					]
				},
				add: {
					component_groups: [
						"minecraft:clear_bad_omen_spell_effect"
					]
				}
			},
			"minecraft:trigger_raid": {
				add: {
					component_groups: [
						"minecraft:raid_trigger"
					]
				}
			},
			"minecraft:remove_raid_trigger": {
				remove: {
					component_groups: [
						"minecraft:raid_trigger"
					]
				}
			}
		}
	}
},
	"minecraft:polar_bear": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:polar_bear",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 4,
					speed_multiplier: 1.25
				}
			},
			"minecraft:baby_wild": {
				"minecraft:on_target_acquired": {
					event: "minecraft:on_scared",
					target: "self"
				},
				"minecraft:behavior.nearest_attackable_target": {
					priority: 4,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "player"
							},
							max_dist: 16
						}
					]
				}
			},
			"minecraft:baby_scared": {
				"minecraft:angry": {
					duration: 1,
					broadcast_anger: true,
					broadcast_range: 41,
					calm_event: {
						event: "minecraft:baby_on_calm",
						target: "self"
					}
				}
			},
			"minecraft:adult": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/polar_bear.json"
				}
			},
			"minecraft:adult_wild": {
				"minecraft:on_target_acquired": {
					event: "minecraft:on_anger",
					target: "self"
				},
				"minecraft:on_friendly_anger": {
					event: "minecraft:on_anger",
					target: "self"
				},
				"minecraft:behavior.nearest_attackable_target": {
					priority: 4,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "fox"
							},
							max_dist: 16
						}
					],
					must_see: false
				}
			},
			"minecraft:adult_hostile": {
				"minecraft:attack": {
					damage: 6
				},
				"minecraft:angry": {
					duration: 500,
					broadcast_anger: false,
					broadcast_range: 20,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:behavior.stomp_attack": {
					priority: 1,
					track_target: true,
					require_complete_path: true,
					stomp_range_multiplier: 2,
					no_damage_range_multiplier: 2
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"polarbear",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 30
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:collision_box": {
				width: 1.3,
				height: 1.4
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:water_movement": {
				drag_factor: 0.98
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:follow_range": {
				value: 48
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.random_stroll": {
				priority: 5
			},
			"minecraft:behavior.look_at_player": {
				priority: 6,
				target_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 7
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 9,
						add: {
							component_groups: [
								"minecraft:adult",
								"minecraft:adult_wild"
							]
						}
					},
					{
						weight: 1,
						add: {
							component_groups: [
								"minecraft:baby",
								"minecraft:baby_wild"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:baby",
						"minecraft:baby_wild"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:baby",
						"minecraft:baby_wild",
						"minecraft:baby_scared"
					]
				},
				add: {
					component_groups: [
						"minecraft:adult",
						"minecraft:adult_wild"
					]
				}
			},
			"minecraft:on_calm": {
				remove: {
					component_groups: [
						"minecraft:adult_hostile"
					]
				},
				add: {
					component_groups: [
						"minecraft:adult_wild"
					]
				}
			},
			"minecraft:on_anger": {
				remove: {
					component_groups: [
						"minecraft:adult_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:adult_hostile"
					]
				}
			},
			"minecraft:baby_on_calm": {
				remove: {
					component_groups: [
						"minecraft:baby_scared"
					]
				},
				add: {
					component_groups: [
						"minecraft:baby_wild"
					]
				}
			},
			"minecraft:on_scared": {
				remove: {
					component_groups: [
						"minecraft:baby_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:baby_scared"
					]
				}
			}
		}
	}
},
	"minecraft:pufferfish": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:pufferfish",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:normal_puff": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:entity_sensor": {
					sensor_range: 2.5,
					relative_range: false,
					minimum_count: 1,
					event_filters: {
						any_of: [
							{
								test: "is_family",
								subject: "other",
								value: "mob"
							},
							{
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										none_of: {
											test: "has_ability",
											subject: "other",
											value: "instabuild"
										}
									}
								]
							}
						]
					},
					event: "minecraft:start_half_puff"
				}
			},
			"minecraft:half_puff_primary": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:timer": {
					looping: false,
					time: 2,
					randomInterval: false,
					time_down_event: {
						event: "minecraft:on_half_puff"
					}
				}
			},
			"minecraft:half_puff_secondary": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:entity_sensor": {
					sensor_range: 2.5,
					relative_range: false,
					minimum_count: 1,
					event_filters: {
						any_of: [
							{
								test: "is_family",
								subject: "other",
								value: "mob"
							},
							{
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										none_of: {
											test: "has_ability",
											subject: "other",
											value: "instabuild"
										}
									}
								]
							}
						]
					},
					event: "minecraft:start_full_puff"
				},
				"minecraft:timer": {
					looping: false,
					time: 2,
					randomInterval: false,
					time_down_event: {
						event: "minecraft:on_normal_puff"
					}
				}
			},
			"minecraft:full_puff": {
				"minecraft:variant": {
					value: 2
				},
				"minecraft:area_attack": {
					damage_range: 0.2,
					damage_per_tick: 2,
					cause: "contact",
					entity_filter: {
						any_of: [
							{
								test: "is_family",
								subject: "other",
								value: "player"
							},
							{
								test: "is_family",
								subject: "other",
								value: "monster"
							}
						]
					}
				},
				"minecraft:mob_effect": {
					effect_range: 0.2,
					mob_effect: "poison",
					effect_time: 10,
					entity_filter: {
						any_of: [
							{
								test: "is_family",
								subject: "other",
								value: "player"
							},
							{
								test: "is_family",
								subject: "other",
								value: "monster"
							}
						]
					}
				}
			},
			"minecraft:deflate_sensor_buffer": {
				"minecraft:timer": {
					looping: false,
					time: 0.01,
					randomInterval: false,
					time_down_event: {
						event: "minecraft:on_full_puff"
					}
				}
			},
			"minecraft:deflate_sensor": {
				"minecraft:entity_sensor": {
					sensor_range: 2.9,
					relative_range: false,
					require_all: true,
					event_filters: {
						none_of: [
							{
								test: "is_family",
								subject: "other",
								value: "mob"
							},
							{
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										none_of: {
											test: "has_ability",
											subject: "other",
											value: "instabuild"
										}
									}
								]
							}
						],
						test: "distance_to_nearest_player",
						operator: ">",
						value: 2.9
					},
					event: "minecraft:from_full_puff"
				}
			},
			"minecraft:start_deflate": {
				"minecraft:timer": {
					looping: false,
					time: 3,
					randomInterval: false,
					time_down_event: {
						event: "minecraft:on_deflate"
					}
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
			},
			"minecraft:type_family": {
				family: [
					"pufferfish",
					"fish"
				]
			},
			"minecraft:collision_box": {
				width: 0.8,
				height: 0.8
			},
			"minecraft:loot": {
				table: "loot_tables/entities/pufferfish.json"
			},
			"minecraft:scale": {
				value: 1.2
			},
			"minecraft:health": {
				value: 3,
				max: 3
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_air: false,
				breathes_water: true
			},
			"minecraft:movement": {
				value: 0.13
			},
			"minecraft:underwater_movement": {
				value: 0.13
			},
			"minecraft:navigation.generic": {
				is_amphibious: false,
				can_path_over_water: false,
				can_swim: true,
				can_walk: false,
				can_breach: false,
				can_sink: false
			},
			"minecraft:movement.sway": {
				sway_amplitude: 0
			},
			"minecraft:despawn": {
				despawn_from_distance: {
					min_distance: 32,
					max_distance: 40
				}
			},
			"minecraft:behavior.random_swim": {
				priority: 3,
				speed_multiplier: 1,
				xz_dist: 16,
				y_dist: 4,
				interval: 0
			},
			"minecraft:behavior.swim_wander": {
				priority: 5,
				interval: 1,
				look_ahead: 2,
				speed_multiplier: 1,
				wander_time: 5
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 1,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "axolotl"
								}
							]
						},
						max_dist: 6,
						walk_speed_multiplier: 1.5,
						sprint_speed_multiplier: 2
					}
				]
			},
			"minecraft:flocking": {
				in_water: true,
				match_variants: false,
				use_center_of_mass: true,
				low_flock_limit: 4,
				high_flock_limit: 8,
				goal_weight: 2,
				loner_chance: 0.1,
				influence_radius: 3,
				breach_influence: 7,
				separation_weight: 1.75,
				separation_threshold: 0.95,
				cohesion_weight: 2,
				cohesion_threshold: 1.95,
				innner_cohesion_threshold: 1.25,
				min_height: 1.5,
				max_height: 6,
				block_distance: 2,
				block_weight: 0.85
			},
			"minecraft:nameable": {
			},
			"minecraft:physics": {
				has_gravity: false
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:normal_puff"
					]
				}
			},
			"minecraft:to_full_puff": {
				add: {
					component_groups: [
						"minecraft:full_puff",
						"minecraft:deflate_sensor_buffer"
					]
				},
				remove: {
					component_groups: [
						"minecraft:normal_puff"
					]
				}
			},
			"minecraft:start_half_puff": {
				add: {
					component_groups: [
						"minecraft:half_puff_primary"
					]
				},
				remove: {
					component_groups: [
						"minecraft:normal_puff"
					]
				}
			},
			"minecraft:on_half_puff": {
				add: {
					component_groups: [
						"minecraft:half_puff_secondary"
					]
				},
				remove: {
					component_groups: [
						"minecraft:half_puff_primary"
					]
				}
			},
			"minecraft:start_full_puff": {
				add: {
					component_groups: [
						"minecraft:full_puff",
						"minecraft:deflate_sensor_buffer"
					]
				},
				remove: {
					component_groups: [
						"minecraft:half_puff_secondary"
					]
				}
			},
			"minecraft:on_full_puff": {
				add: {
					component_groups: [
						"minecraft:deflate_sensor"
					]
				},
				remove: {
					component_groups: [
						"minecraft:deflate_sensor_buffer"
					]
				}
			},
			"minecraft:from_full_puff": {
				add: {
					component_groups: [
						"minecraft:start_deflate"
					]
				},
				remove: {
					component_groups: [
						"minecraft:deflate_sensor"
					]
				}
			},
			"minecraft:on_deflate": {
				add: {
					component_groups: [
						"minecraft:half_puff_secondary"
					]
				},
				remove: {
					component_groups: [
						"minecraft:full_puff",
						"minecraft:start_deflate"
					]
				}
			},
			"minecraft:on_normal_puff": {
				add: {
					component_groups: [
						"minecraft:normal_puff"
					]
				},
				remove: {
					component_groups: [
						"minecraft:half_puff_secondary"
					]
				}
			}
		}
	}
},
	"minecraft:rabbit": {
	format_version: "1.17.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:rabbit",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			baby: {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.4
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"golden_carrot",
						"carrot",
						"yellow_flower"
					],
					grow_up: {
						event: "grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 6,
					speed_multiplier: 1.1
				}
			},
			adult: {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/rabbit.json"
				},
				"minecraft:scale": {
					value: 0.6
				},
				"minecraft:behavior.breed": {
					priority: 2,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					breed_items: [
						"golden_carrot",
						"carrot",
						"yellow_flower"
					],
					breeds_with: {
						mate_type: "minecraft:rabbit",
						baby_type: "minecraft:rabbit"
					},
					require_tame: false,
					mutation_factor: {
						variant: 0.2
					}
				}
			},
			coat_brown: {
				"minecraft:variant": {
					value: 0
				}
			},
			coat_white: {
				"minecraft:variant": {
					value: 1
				}
			},
			coat_black: {
				"minecraft:variant": {
					value: 2
				}
			},
			coat_splotched: {
				"minecraft:variant": {
					value: 3
				}
			},
			coat_desert: {
				"minecraft:variant": {
					value: 4
				}
			},
			coat_salt: {
				"minecraft:variant": {
					value: 5
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"rabbit",
					"lightweight",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 3,
				max: 3
			},
			"minecraft:scale": {
				value: 0.6
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:collision_box": {
				width: 0.67,
				height: 0.67
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true
			},
			"minecraft:movement.skip": {
			},
			"minecraft:jump.dynamic": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 0.4
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 2.2
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 4,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 8,
						walk_speed_multiplier: 1.5,
						sprint_speed_multiplier: 1.8
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "wolf"
						},
						max_dist: 4,
						walk_speed_multiplier: 1.5,
						sprint_speed_multiplier: 1.8
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "monster"
						},
						max_dist: 4,
						walk_speed_multiplier: 1.5,
						sprint_speed_multiplier: 1.5
					}
				]
			},
			"minecraft:behavior.breed": {
				priority: 2,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.tempt": {
				priority: 3,
				speed_multiplier: 1,
				items: [
					"golden_carrot",
					"carrot",
					"yellow_flower"
				]
			},
			"minecraft:behavior.raid_garden": {
				priority: 5,
				blocks: [
					"minecraft:carrots"
				],
				search_range: 16,
				goal_radius: 0.8
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.6,
				xz_dist: 2,
				y_dist: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 11
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:block_climber": {
			}
		},
		events: {
			in_desert: {
				add: {
					component_groups: [
						"coat_desert"
					]
				}
			},
			in_snow: {
				randomize: [
					{
						weight: 80,
						add: {
							component_groups: [
								"coat_white"
							]
						}
					},
					{
						weight: 20,
						add: {
							component_groups: [
								"coat_splotched"
							]
						}
					}
				]
			},
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 3,
								add: {
									component_groups: [
										"adult"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"baby"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 50,
								add: {
									component_groups: [
										"coat_brown"
									]
								}
							},
							{
								weight: 40,
								add: {
									component_groups: [
										"coat_black"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"coat_salt"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "is_biome",
							value: "desert"
						},
						add: {
							component_groups: [
								"coat_desert"
							]
						}
					},
					{
						filters: {
							test: "is_snow_covered",
							value: true
						},
						randomize: [
							{
								weight: 80,
								add: {
									component_groups: [
										"coat_white"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"coat_splotched"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:entity_born": {
				sequence: [
					{
						add: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 50,
								add: {
									component_groups: [
										"coat_brown"
									]
								}
							},
							{
								weight: 40,
								add: {
									component_groups: [
										"coat_black"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"coat_salt"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "is_biome",
							value: "desert"
						},
						add: {
							component_groups: [
								"coat_desert"
							]
						}
					},
					{
						filters: {
							test: "is_snow_covered",
							value: true
						},
						randomize: [
							{
								weight: 80,
								add: {
									component_groups: [
										"coat_white"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"coat_splotched"
									]
								}
							}
						]
					}
				]
			},
			grow_up: {
				remove: {
					component_groups: [
						"baby"
					]
				},
				add: {
					component_groups: [
						"adult"
					]
				}
			}
		}
	}
},
	"minecraft:ravager": {
	format_version: "1.17.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:ravager",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:celebrate": {
				"minecraft:behavior.celebrate": {
					priority: 5,
					celebration_sound: "celebrate",
					sound_interval: {
						range_min: 2,
						range_max: 7
					},
					jump_interval: {
						range_min: 1,
						range_max: 3.5
					},
					duration: 30,
					on_celebration_end_event: {
						event: "minecraft:stop_celebrating",
						target: "self"
					}
				}
			},
			"minecraft:pillager_rider": {
				"minecraft:addrider": {
					entity_type: "minecraft:pillager"
				}
			},
			"minecraft:pillager_rider_for_raid": {
				"minecraft:addrider": {
					entity_type: "minecraft:pillager",
					spawn_event: "minecraft:spawn_for_raid"
				}
			},
			"minecraft:evoker_rider_for_raid": {
				"minecraft:addrider": {
					entity_type: "minecraft:evocation_illager",
					spawn_event: "minecraft:spawn_for_raid"
				}
			},
			"minecraft:pillager_captain_rider": {
				"minecraft:addrider": {
					entity_type: "minecraft:pillager",
					spawn_event: "minecraft:spawn_as_illager_captain"
				}
			},
			"minecraft:vindicator_rider": {
				"minecraft:addrider": {
					entity_type: "minecraft:vindicator"
				}
			},
			"minecraft:vindicator_captain_rider": {
				"minecraft:addrider": {
					entity_type: "minecraft:vindicator",
					spawn_event: "minecraft:spawn_as_illager_captain"
				}
			},
			"minecraft:raid_configuration": {
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "hostile",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: false,
					can_migrate: true,
					first_founding_reward: 0
				},
				"minecraft:behavior.move_to_village": {
					priority: 5,
					speed_multiplier: 1,
					goal_radius: 2
				},
				"minecraft:behavior.random_stroll": {
					priority: 6,
					speed_multiplier: 1
				},
				"minecraft:ambient_sound_interval": {
					value: 4,
					range: 8,
					event_name: "ambient.in.raid"
				}
			},
			"minecraft:raid_persistence": {
				"minecraft:persistent": {
				}
			},
			"minecraft:hostile": {
				"minecraft:movement": {
					value: 0.4
				},
				"minecraft:behavior.delayed_attack": {
					priority: 4,
					attack_once: false,
					track_target: true,
					require_complete_path: false,
					random_stop_interval: 0,
					reach_multiplier: 1.5,
					speed_multiplier: 1,
					attack_duration: 0.75,
					hit_delay_pct: 0.5
				},
				"minecraft:behavior.random_stroll": {
					priority: 6,
					speed_multiplier: 0.4
				},
				"minecraft:behavior.look_at_player": {
					priority: 7,
					look_distance: 6,
					angle_of_view_horizontal: 45,
					probability: 1
				},
				"minecraft:behavior.look_at_entity": {
					priority: 10,
					look_distance: 8,
					angle_of_view_horizontal: 45,
					filters: {
						test: "is_family",
						subject: "other",
						value: "mob"
					}
				},
				"minecraft:behavior.hurt_by_target": {
					priority: 2,
					entity_types: {
						filters: {
							test: "is_family",
							subject: "other",
							operator: "!=",
							value: "illager"
						},
						max_dist: 64
					}
				},
				"minecraft:behavior.nearest_attackable_target": {
					priority: 3,
					must_see: true,
					within_radius: 16,
					entity_types: [
						{
							filters: {
								any_of: [
									{
										subject: "other",
										test: "is_family",
										value: "player"
									},
									{
										subject: "other",
										test: "is_family",
										value: "irongolem"
									},
									{
										test: "is_family",
										subject: "other",
										value: "wandering_trader"
									}
								]
							},
							max_dist: 16
						},
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "villager"
									},
									{
										test: "has_component",
										subject: "other",
										operator: "!=",
										value: "minecraft:is_baby"
									}
								]
							},
							max_dist: 16
						}
					]
				},
				"minecraft:behavior.mount_pathing": {
					priority: 5,
					speed_multiplier: 1.25,
					target_dist: 0,
					track_target: true
				}
			},
			stunned: {
				"minecraft:is_stunned": {
				},
				"minecraft:timer": {
					looping: false,
					time: 2,
					time_down_event: {
						event: "minecraft:start_roar"
					}
				}
			},
			roaring: {
				"minecraft:behavior.knockback_roar": {
					priority: 1,
					duration: 1,
					attack_time: 0.5,
					knockback_damage: 6,
					knockback_horizontal_strength: 3,
					knockback_vertical_strength: 3,
					knockback_range: 4,
					knockback_filters: {
						test: "is_family",
						subject: "other",
						operator: "!=",
						value: "ravager"
					},
					damage_filters: {
						test: "is_family",
						subject: "other",
						operator: "!=",
						value: "illager"
					},
					on_roar_end: {
						event: "minecraft:end_roar"
					},
					cooldown_time: 0.1
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 20 : 0"
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:ravager_blocked": {
				knockback_strength: 3,
				reaction_choices: [
					{
						weight: 1,
						value: {
							event: "minecraft:become_stunned",
							target: "self"
						}
					},
					{
						weight: 1
					}
				]
			},
			"minecraft:attack": {
				damage: 12
			},
			"minecraft:breathable": {
				suffocate_time: 0,
				total_supply: 15
			},
			"minecraft:collision_box": {
				height: 2.2,
				width: 1.95
			},
			"minecraft:health": {
				max: 100,
				value: 100
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:jump.static": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/ravager.json"
			},
			"minecraft:knockback_resistance": {
				value: 0.75
			},
			"minecraft:movement": {
				value: 0
			},
			"minecraft:movement.basic": {
			},
			"minecraft:nameable": {
			},
			"minecraft:navigation.walk": {
				avoid_damage_blocks: true,
				can_path_over_water: true,
				can_sink: false
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:break_blocks": {
				breakable_blocks: [
					"bamboo",
					"bamboo_sapling",
					"beetroot",
					"brown_mushroom",
					"carrots",
					"carved_pumpkin",
					"chorus_flower",
					"chorus_plant",
					"deadbush",
					"double_plant",
					"leaves",
					"leaves2",
					"lit_pumpkin",
					"melon_block",
					"melon_stem",
					"potatoes",
					"pumpkin",
					"pumpkin_stem",
					"red_flower",
					"red_mushroom",
					"crimson_fungus",
					"warped_fungus",
					"reeds",
					"sapling",
					"snow_layer",
					"sweet_berry_bush",
					"tallgrass",
					"turtle_egg",
					"vine",
					"waterlily",
					"wheat",
					"yellow_flower",
					"azalea",
					"flowering_azalea",
					"azalea_leaves",
					"azalea_leaves_flowered",
					"cave_vines",
					"cave_vines_body_with_berries",
					"cave_vines_head_with_berries",
					"small_dripleaf_block",
					"big_dripleaf",
					"spore_blossom",
					"hanging_roots",
					"mangrove_leaves"
				]
			},
			"minecraft:follow_range": {
				value: 64
			},
			"minecraft:rideable": {
				seat_count: 1,
				family_types: [
					"pillager",
					"vindicator",
					"evocation_illager"
				],
				seats: {
					position: [
						0,
						2.1,
						-0.3
					]
				}
			},
			"minecraft:type_family": {
				family: [
					"monster",
					"ravager",
					"mob"
				]
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:hostile"
					]
				}
			},
			"minecraft:spawn_for_raid": {
				add: {
					component_groups: [
						"minecraft:hostile",
						"minecraft:raid_configuration",
						"minecraft:raid_persistence"
					]
				}
			},
			"minecraft:spawn_for_raid_with_evoker_rider": {
				add: {
					component_groups: [
						"minecraft:hostile",
						"minecraft:evoker_rider_for_raid",
						"minecraft:raid_configuration",
						"minecraft:raid_persistence"
					]
				}
			},
			"minecraft:spawn_for_raid_with_pillager_rider": {
				add: {
					component_groups: [
						"minecraft:hostile",
						"minecraft:pillager_rider_for_raid",
						"minecraft:raid_configuration",
						"minecraft:raid_persistence"
					]
				}
			},
			"minecraft:spawn_with_pillager_rider": {
				add: {
					component_groups: [
						"minecraft:hostile",
						"minecraft:pillager_rider"
					]
				}
			},
			"minecraft:spawn_with_pillager_captain_rider": {
				add: {
					component_groups: [
						"minecraft:hostile",
						"minecraft:pillager_captain_rider"
					]
				}
			},
			"minecraft:spawn_with_vindicator_rider": {
				add: {
					component_groups: [
						"minecraft:hostile",
						"minecraft:vindicator_rider"
					]
				}
			},
			"minecraft:spawn_with_vindicator_captain_rider": {
				add: {
					component_groups: [
						"minecraft:hostile",
						"minecraft:vindicator_captain_rider"
					]
				}
			},
			"minecraft:become_stunned": {
				add: {
					component_groups: [
						"stunned"
					]
				},
				remove: {
					component_groups: [
						"minecraft:hostile"
					]
				}
			},
			"minecraft:start_roar": {
				add: {
					component_groups: [
						"roaring"
					]
				},
				remove: {
					component_groups: [
						"stunned"
					]
				}
			},
			"minecraft:end_roar": {
				add: {
					component_groups: [
						"minecraft:hostile"
					]
				},
				remove: {
					component_groups: [
						"roaring"
					]
				}
			},
			"minecraft:start_celebrating": {
				sequence: [
					{
						add: {
							component_groups: [
								"minecraft:celebrate"
							]
						}
					},
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			},
			"minecraft:stop_celebrating": {
				remove: {
					component_groups: [
						"minecraft:celebrate"
					]
				}
			},
			"minecraft:raid_expired": {
				sequence: [
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:salmon": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:salmon",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			scale_small: {
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:loot": {
					table: "loot_tables/entities/salmon_normal.json"
				}
			},
			scale_normal: {
				"minecraft:scale": {
					value: 1
				},
				"minecraft:loot": {
					table: "loot_tables/entities/salmon_normal.json"
				}
			},
			scale_large: {
				"minecraft:scale": {
					value: 1.5
				},
				"minecraft:loot": {
					table: "loot_tables/entities/salmon_large.json"
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
			},
			"minecraft:type_family": {
				family: [
					"salmon",
					"fish"
				]
			},
			"minecraft:collision_box": {
				width: 0.5,
				height: 0.5
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_air: false,
				breathes_water: true
			},
			"minecraft:health": {
				value: 3,
				max: 3
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.12
			},
			"minecraft:underwater_movement": {
				value: 0.12
			},
			"minecraft:navigation.generic": {
				is_amphibious: false,
				can_path_over_water: false,
				can_swim: true,
				can_walk: false,
				can_breach: false,
				can_sink: false
			},
			"minecraft:movement.sway": {
				sway_amplitude: 0
			},
			"minecraft:physics": {
				has_gravity: false
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:despawn": {
				despawn_from_distance: {
					min_distance: 32,
					max_distance: 40
				}
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 1,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "axolotl"
								}
							]
						},
						max_dist: 3,
						max_flee: 10,
						walk_speed_multiplier: 1.5,
						sprint_speed_multiplier: 2
					}
				]
			},
			"minecraft:behavior.swim_idle": {
				priority: 5,
				idle_time: 5,
				success_rate: 0.1
			},
			"minecraft:behavior.random_swim": {
				speed_multiplier: 1,
				priority: 3,
				xz_dist: 16,
				y_dist: 4,
				interval: 0
			},
			"minecraft:behavior.swim_wander": {
				priority: 4,
				interval: 0.0166,
				look_ahead: 5,
				speed_multiplier: 0.014,
				wander_time: 5
			},
			"minecraft:flocking": {
				in_water: true,
				match_variants: false,
				use_center_of_mass: false,
				low_flock_limit: 4,
				high_flock_limit: 8,
				goal_weight: 2,
				loner_chance: 0.1,
				influence_radius: 3,
				breach_influence: 7,
				separation_weight: 0.65,
				separation_threshold: 0.15,
				cohesion_weight: 2.25,
				cohesion_threshold: 1.5,
				innner_cohesion_threshold: 1.5,
				min_height: 4,
				max_height: 4,
				block_distance: 1,
				block_weight: 0.75
			},
			"minecraft:nameable": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 30,
						add: {
							component_groups: [
								"adult",
								"scale_small"
							]
						}
					},
					{
						weight: 50,
						add: {
							component_groups: [
								"adult",
								"scale_normal"
							]
						}
					},
					{
						weight: 15,
						add: {
							component_groups: [
								"adult",
								"scale_large"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:sheep": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:sheep",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:loot_sheared": {
				"minecraft:loot": {
					table: "loot_tables/entities/sheep_sheared.json"
				}
			},
			"minecraft:loot_wooly": {
				"minecraft:loot": {
					table: "loot_tables/entities/sheep.json"
				}
			},
			"minecraft:rideable_sheared": {
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							0.9,
							0
						]
					}
				}
			},
			"minecraft:rideable_wooly": {
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							0.975,
							0
						]
					}
				}
			},
			"minecraft:sheep_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: "wheat",
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 6,
					speed_multiplier: 1.1
				}
			},
			"minecraft:sheep_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:behavior.breed": {
					priority: 3,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: false,
					breeds_with: {
						mate_type: "minecraft:sheep",
						baby_type: "minecraft:sheep"
					},
					breed_items: "wheat"
				}
			},
			"minecraft:sheep_dyeable": {
				"minecraft:is_dyeable": {
					interact_text: "action.interact.dye"
				}
			},
			"minecraft:sheep_sheared": {
				"minecraft:is_sheared": {
				}
			},
			"minecraft:sheep_white": {
				"minecraft:color": {
					value: 0
				}
			},
			"minecraft:sheep_brown": {
				"minecraft:color": {
					value: 12
				}
			},
			"minecraft:sheep_black": {
				"minecraft:color": {
					value: 15
				}
			},
			"minecraft:sheep_gray": {
				"minecraft:color": {
					value: 8
				}
			},
			"minecraft:sheep_light_gray": {
				"minecraft:color": {
					value: 7
				}
			},
			"minecraft:sheep_pink": {
				"minecraft:color": {
					value: 6
				}
			},
			"minecraft:sheep_red": {
				"minecraft:color": {
					value: 14
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"sheep",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 1.3
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 8,
				max: 8
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:interact": {
				interactions: [
					{
						cooldown: 2.5,
						use_item: false,
						hurt_item: 1,
						spawn_items: {
							table: "loot_tables/entities/sheep_shear.json"
						},
						play_sounds: "shear",
						interact_text: "action.interact.shear",
						vibration: "shear",
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "shears"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_component",
										operator: "!=",
										value: "minecraft:is_baby"
									},
									{
										test: "has_component",
										value: "minecraft:is_dyeable"
									}
								]
							},
							event: "minecraft:on_sheared",
							target: "self"
						}
					}
				]
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 0.75
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.25
			},
			"minecraft:behavior.mount_pathing": {
				priority: 2,
				speed_multiplier: 1.5,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.tempt": {
				priority: 4,
				speed_multiplier: 1.25,
				items: [
					"wheat"
				]
			},
			"minecraft:behavior.follow_parent": {
				priority: 5,
				speed_multiplier: 1.1
			},
			"minecraft:behavior.eat_block": {
				priority: 6,
				success_chance: "query.is_baby ? 0.02 : 0.001",
				time_until_eat: 1.8,
				eat_and_replace_block_pairs: [
					{
						eat_block: "grass",
						replace_block: "dirt"
					},
					{
						eat_block: "tallgrass",
						replace_block: "air"
					}
				],
				on_eat: {
					event: "minecraft:on_eat_block",
					target: "self"
				}
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 95,
								remove: {
								},
								trigger: "spawn_adult"
							},
							{
								weight: 5,
								remove: {
								},
								trigger: "spawn_baby"
							}
						]
					},
					{
						randomize: [
							{
								weight: 81836,
								add: {
									component_groups: [
										"minecraft:sheep_white"
									]
								}
							},
							{
								weight: 5000,
								add: {
									component_groups: [
										"minecraft:sheep_black"
									]
								}
							},
							{
								weight: 5000,
								add: {
									component_groups: [
										"minecraft:sheep_light_gray"
									]
								}
							},
							{
								weight: 5000,
								add: {
									component_groups: [
										"minecraft:sheep_gray"
									]
								}
							},
							{
								weight: 3000,
								add: {
									component_groups: [
										"minecraft:sheep_brown"
									]
								}
							},
							{
								weight: 164,
								add: {
									component_groups: [
										"minecraft:sheep_pink"
									]
								}
							}
						]
					}
				]
			},
			spawn_adult: {
				add: {
					component_groups: [
						"minecraft:sheep_adult",
						"minecraft:sheep_dyeable",
						"minecraft:rideable_wooly",
						"minecraft:loot_wooly"
					]
				}
			},
			spawn_baby: {
				add: {
					component_groups: [
						"minecraft:sheep_baby",
						"minecraft:sheep_dyeable",
						"minecraft:rideable_sheared"
					]
				}
			},
			"minecraft:entity_born": {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:sheep_baby",
						"minecraft:sheep_dyeable",
						"minecraft:rideable_sheared"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:sheep_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:sheep_adult",
						"minecraft:rideable_wooly",
						"minecraft:loot_wooly"
					]
				}
			},
			"minecraft:on_sheared": {
				remove: {
					component_groups: [
						"minecraft:sheep_dyeable",
						"minecraft:loot_wooly"
					]
				},
				add: {
					component_groups: [
						"minecraft:sheep_sheared",
						"minecraft:rideable_sheared",
						"minecraft:loot_sheared"
					]
				}
			},
			"minecraft:on_eat_block": {
				sequence: [
					{
						remove: {
							component_groups: [
								"minecraft:sheep_sheared"
							]
						},
						add: {
							component_groups: [
								"minecraft:sheep_dyeable"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							subject: "other",
							operator: "!=",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"minecraft:rideable_wooly",
								"minecraft:loot_wooly"
							]
						},
						remove: {
							component_groups: [
								"minecraft:loot_sheared"
							]
						}
					}
				]
			},
			wololo: {
				add: {
					component_groups: [
						"minecraft:sheep_red"
					]
				}
			}
		}
	}
},
	"minecraft:shulker": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:shulker",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:shulker_purple": {
				"minecraft:variant": {
					value: 5
				}
			},
			"minecraft:shulker_black": {
				"minecraft:variant": {
					value: 0
				}
			},
			"minecraft:shulker_blue": {
				"minecraft:variant": {
					value: 4
				}
			},
			"minecraft:shulker_brown": {
				"minecraft:variant": {
					value: 3
				}
			},
			"minecraft:shulker_cyan": {
				"minecraft:variant": {
					value: 6
				}
			},
			"minecraft:shulker_gray": {
				"minecraft:variant": {
					value: 8
				}
			},
			"minecraft:shulker_green": {
				"minecraft:variant": {
					value: 2
				}
			},
			"minecraft:shulker_light_blue": {
				"minecraft:variant": {
					value: 12
				}
			},
			"minecraft:shulker_lime": {
				"minecraft:variant": {
					value: 10
				}
			},
			"minecraft:shulker_magenta": {
				"minecraft:variant": {
					value: 13
				}
			},
			"minecraft:shulker_orange": {
				"minecraft:variant": {
					value: 14
				}
			},
			"minecraft:shulker_pink": {
				"minecraft:variant": {
					value: 9
				}
			},
			"minecraft:shulker_red": {
				"minecraft:variant": {
					value: 1
				}
			},
			"minecraft:shulker_silver": {
				"minecraft:variant": {
					value: 7
				}
			},
			"minecraft:shulker_undyed": {
				"minecraft:variant": {
					value: 16
				}
			},
			"minecraft:shulker_white": {
				"minecraft:variant": {
					value: 15
				}
			},
			"minecraft:shulker_yellow": {
				"minecraft:variant": {
					value: 11
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:type_family": {
				family: [
					"shulker",
					"monster",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_lava: false,
				breathes_water: false
			},
			"minecraft:nameable": {
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 10,
					use_motion_prediction_hints: true
				}
			},
			"minecraft:health": {
				value: 30,
				max: 30
			},
			"minecraft:fire_immune": true,
			"minecraft:movement": {
				value: 0,
				max: 0
			},
			"minecraft:loot": {
				table: "loot_tables/entities/shulker.json"
			},
			"minecraft:peek": {
				on_open: {
					event: "minecraft:on_open"
				},
				on_close: {
					event: "minecraft:on_close"
				},
				on_target_open: {
					event: "minecraft:on_open"
				}
			},
			"minecraft:behavior.look_at_player": {
				priority: 1,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:shooter": {
				def: "minecraft:shulker_bullet"
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:behavior.ranged_attack": {
				attack_interval_min: 1,
				attack_interval_max: 3,
				attack_radius: 15
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 2,
				entity_types: {
					filters: {
						test: "is_family",
						subject: "other",
						operator: "!=",
						value: "shulker"
					}
				}
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 3,
				entity_types: {
					filters: {
						test: "is_family",
						subject: "other",
						value: "player"
					},
					max_dist: 16
				},
				must_see: true
			},
			"minecraft:navigation.walk": {
			},
			"minecraft:movement.basic": {
			},
			"minecraft:interact": {
				interactions: [
					{
						on_interact: {
							filters: {
								all_of: [
									{
										any_of: [
											{
												test: "has_equipment",
												subject: "other",
												domain: "hand",
												value: "dye:0"
											},
											{
												test: "has_equipment",
												subject: "other",
												domain: "hand",
												value: "dye:16"
											}
										]
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_black"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:8"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_gray"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:7"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_silver"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										any_of: [
											{
												test: "has_equipment",
												subject: "other",
												domain: "hand",
												value: "dye:15"
											},
											{
												test: "has_equipment",
												subject: "other",
												domain: "hand",
												value: "dye:19"
											}
										]
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_white"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:12"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_light_blue"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:14"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_orange"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:1"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_red"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										any_of: [
											{
												test: "has_equipment",
												subject: "other",
												domain: "hand",
												value: "dye:4"
											},
											{
												test: "has_equipment",
												subject: "other",
												domain: "hand",
												value: "dye:18"
											}
										]
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_blue"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:5"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_purple"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:13"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_magenta"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:9"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_pink"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										any_of: [
											{
												test: "has_equipment",
												subject: "other",
												domain: "hand",
												value: "dye:3"
											},
											{
												test: "has_equipment",
												subject: "other",
												domain: "hand",
												value: "dye:17"
											}
										]
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_brown"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:11"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_yellow"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:10"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_lime"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:2"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_green"
						},
						use_item: true
					},
					{
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "dye:6"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_ability",
										subject: "other",
										value: "instabuild"
									}
								]
							},
							event: "minecraft:turn_cyan"
						},
						use_item: true
					}
				]
			},
			"minecraft:physics": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:shulker_undyed"
					]
				}
			},
			"minecraft:turn_purple": {
				add: {
					component_groups: [
						"minecraft:shulker_purple"
					]
				}
			},
			"minecraft:turn_black": {
				add: {
					component_groups: [
						"minecraft:shulker_black"
					]
				}
			},
			"minecraft:turn_blue": {
				add: {
					component_groups: [
						"minecraft:shulker_blue"
					]
				}
			},
			"minecraft:turn_brown": {
				add: {
					component_groups: [
						"minecraft:shulker_brown"
					]
				}
			},
			"minecraft:turn_cyan": {
				add: {
					component_groups: [
						"minecraft:shulker_cyan"
					]
				}
			},
			"minecraft:turn_gray": {
				add: {
					component_groups: [
						"minecraft:shulker_gray"
					]
				}
			},
			"minecraft:turn_green": {
				add: {
					component_groups: [
						"minecraft:shulker_green"
					]
				}
			},
			"minecraft:turn_light_blue": {
				add: {
					component_groups: [
						"minecraft:shulker_light_blue"
					]
				}
			},
			"minecraft:turn_lime": {
				add: {
					component_groups: [
						"minecraft:shulker_lime"
					]
				}
			},
			"minecraft:turn_magenta": {
				add: {
					component_groups: [
						"minecraft:shulker_magenta"
					]
				}
			},
			"minecraft:turn_orange": {
				add: {
					component_groups: [
						"minecraft:shulker_orange"
					]
				}
			},
			"minecraft:turn_pink": {
				add: {
					component_groups: [
						"minecraft:shulker_pink"
					]
				}
			},
			"minecraft:turn_red": {
				add: {
					component_groups: [
						"minecraft:shulker_red"
					]
				}
			},
			"minecraft:turn_silver": {
				add: {
					component_groups: [
						"minecraft:shulker_silver"
					]
				}
			},
			"minecraft:turn_white": {
				add: {
					component_groups: [
						"minecraft:shulker_white"
					]
				}
			},
			"minecraft:turn_yellow": {
				add: {
					component_groups: [
						"minecraft:shulker_yellow"
					]
				}
			}
		}
	}
},
	"minecraft:shulker_bullet": {
	format_version: "1.10.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:shulker_bullet",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.625,
				height: 0.625
			},
			"minecraft:projectile": {
				on_hit: {
					impact_damage: {
						damage: 4,
						knockback: true,
						should_bounce: true
					},
					mob_effect: {
						effect: "levitation",
						durationeasy: 200,
						durationnormal: 200,
						durationhard: 200,
						amplifier: 0
					},
					remove_on_hit: {
					},
					particle_on_hit: {
						particle_type: "largeexplode",
						on_other_hit: true
					}
				},
				hit_sound: "bullet.hit",
				destroyOnHurt: true,
				crit_particle_on_hurt: true,
				power: 1.6,
				gravity: 0.05,
				uncertainty_base: 16,
				uncertainty_multiplier: 4,
				anchor: 1,
				offset: [
					0,
					-0.1,
					0
				],
				homing: true
			},
			"minecraft:physics": {
				has_collision: false
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:silverfish": {
	format_version: "1.17.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:silverfish",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:silverfish_calm": {
				"minecraft:on_target_acquired": {
					event: "minecraft:become_angry",
					target: "self"
				}
			},
			"minecraft:silverfish_angry": {
				"minecraft:angry": {
					duration: -1,
					broadcast_anger: true,
					broadcast_range: 20,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:behavior.melee_attack": {
					priority: 4,
					track_target: true
				},
				"minecraft:behavior.silverfish_wake_up_friends": {
					priority: 1
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:type_family": {
				family: [
					"silverfish",
					"monster",
					"lightweight",
					"mob",
					"arthropod"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/silverfish.json"
			},
			"minecraft:health": {
				value: 8,
				max: 8
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:attack": {
				damage: 1
			},
			"minecraft:collision_box": {
				width: 0.4,
				height: 0.3
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 1
			},
			"minecraft:behavior.silverfish_merge_with_stone": {
				priority: 5
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				attack_interval: 10,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "snowgolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								}
							]
						},
						max_dist: 8
					}
				]
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1,
				alert_same_type: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:block_climber": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:silverfish_calm"
					]
				}
			},
			"minecraft:become_angry": {
				remove: {
					"minecraft:silverfish_calm": {
					}
				},
				add: {
					component_groups: [
						"minecraft:silverfish_angry"
					]
				}
			},
			"minecraft:on_calm": {
				remove: {
					"minecraft:silverfish_angry": {
					}
				},
				add: {
					component_groups: [
						"minecraft:silverfish_calm"
					]
				}
			}
		}
	}
},
	"minecraft:skeleton": {
	format_version: "1.18.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:skeleton",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			in_powder_snow: {
				"minecraft:is_shaking": {
				},
				"minecraft:timer": {
					looping: false,
					time: 20,
					time_down_event: {
						event: "become_stray_event"
					}
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								test: "in_block",
								subject: "self",
								operator: "!=",
								value: "minecraft:powder_snow"
							},
							event: "got_out_of_powder_snow"
						}
					]
				}
			},
			got_out_of_powder_snow_environment_sensor: {
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								test: "is_underwater",
								subject: "self",
								operator: "==",
								value: true
							},
							event: "minecraft:melee_mode"
						},
						{
							filters: {
								test: "has_ranged_weapon",
								subject: "self",
								operator: "==",
								value: false
							},
							event: "minecraft:melee_mode"
						},
						{
							filters: {
								all_of: [
									{
										test: "in_water",
										subject: "self",
										operator: "==",
										value: false
									},
									{
										test: "has_ranged_weapon",
										subject: "self",
										operator: "==",
										value: true
									}
								]
							},
							event: "minecraft:ranged_mode"
						}
					]
				}
			},
			"minecraft:lightning_immune": {
				"minecraft:damage_sensor": {
					triggers: {
						on_damage: {
							filters: {
								other_with_families: "lightning"
							}
						},
						deals_damage: false
					}
				}
			},
			become_stray: {
				"minecraft:transformation": {
					into: "minecraft:stray",
					transformation_sound: "convert_to_stray",
					keep_level: true,
					drop_inventory: true,
					preserve_equipment: true
				}
			},
			"minecraft:ranged_attack": {
				"minecraft:behavior.ranged_attack": {
					priority: 0,
					attack_interval_min: 1,
					attack_interval_max: 3,
					attack_radius: 15
				},
				"minecraft:shooter": {
					def: "minecraft:arrow"
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								test: "is_underwater",
								subject: "self",
								operator: "==",
								value: true
							},
							event: "minecraft:melee_mode"
						},
						{
							filters: {
								test: "has_ranged_weapon",
								subject: "self",
								operator: "==",
								value: false
							},
							event: "minecraft:melee_mode"
						},
						{
							filters: {
								test: "in_block",
								subject: "self",
								operator: "==",
								value: "minecraft:powder_snow"
							},
							event: "got_in_powder_snow"
						}
					]
				}
			},
			"minecraft:melee_attack": {
				"minecraft:behavior.melee_attack": {
					priority: 4,
					track_target: true,
					speed_multiplier: 1.25
				},
				"minecraft:attack": {
					damage: 2
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								all_of: [
									{
										test: "in_water",
										subject: "self",
										operator: "==",
										value: false
									},
									{
										test: "has_ranged_weapon",
										subject: "self",
										operator: "==",
										value: true
									}
								]
							},
							event: "minecraft:ranged_mode"
						},
						{
							filters: {
								test: "in_block",
								subject: "self",
								operator: "==",
								value: "minecraft:powder_snow"
							},
							event: "got_in_powder_snow"
						}
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
			},
			"minecraft:equip_item": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:type_family": {
				family: [
					"skeleton",
					"undead",
					"monster",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:burns_in_daylight": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/skeleton.json"
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				avoid_sun: true,
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:nameable": {
			},
			"minecraft:equipment": {
				table: "loot_tables/entities/skeleton_gear.json"
			},
			"minecraft:shooter": {
				def: "minecraft:arrow"
			},
			"minecraft:environment_sensor": {
				triggers: [
					{
						filters: {
							test: "is_underwater",
							subject: "self",
							operator: "==",
							value: true
						},
						event: "minecraft:melee_mode"
					},
					{
						filters: {
							test: "has_ranged_weapon",
							subject: "self",
							operator: "==",
							value: false
						},
						event: "minecraft:melee_mode"
					},
					{
						filters: {
							test: "in_block",
							subject: "self",
							operator: "==",
							value: "minecraft:powder_snow"
						},
						event: "got_in_powder_snow"
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:netherite_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:stone_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:wooden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:bow",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:netherite_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					}
				]
			},
			"minecraft:behavior.ranged_attack": {
				priority: 0,
				attack_interval_min: 1,
				attack_interval_max: 3,
				attack_radius: 15
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				must_see: true,
				reselect_targets: true,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 16
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "irongolem"
						},
						max_dist: 16
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "baby_turtle"
								},
								{
									test: "in_water",
									subject: "other",
									operator: "!=",
									value: true
								}
							]
						},
						max_dist: 16
					}
				]
			},
			"minecraft:behavior.flee_sun": {
				priority: 2,
				speed_multiplier: 1
			},
			"minecraft:behavior.equip_item": {
				priority: 3
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 4,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "wolf"
						},
						max_dist: 6,
						walk_speed_multiplier: 1.2,
						sprint_speed_multiplier: 1.2
					}
				]
			},
			"minecraft:behavior.pickup_items": {
				priority: 5,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1,
				pickup_based_on_chance: true,
				can_pickup_any_item: true
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:ranged_attack"
					]
				}
			},
			become_stray_event: {
				add: {
					component_groups: [
						"become_stray"
					]
				}
			},
			got_in_powder_snow: {
				add: {
					component_groups: [
						"in_powder_snow"
					]
				}
			},
			got_out_of_powder_snow: {
				remove: {
					component_groups: [
						"in_powder_snow"
					]
				},
				add: {
					component_groups: [
						"got_out_of_powder_snow_environment_sensor"
					]
				}
			},
			"minecraft:spring_trap": {
				add: {
					component_groups: [
						"minecraft:lightning_immune"
					]
				}
			},
			"minecraft:melee_mode": {
				remove: {
					component_groups: [
						"minecraft:ranged_attack",
						"got_out_of_powder_snow_environment_sensor"
					]
				},
				add: {
					component_groups: [
						"minecraft:melee_attack"
					]
				}
			},
			"minecraft:ranged_mode": {
				remove: {
					component_groups: [
						"minecraft:melee_attack",
						"got_out_of_powder_snow_environment_sensor"
					]
				},
				add: {
					component_groups: [
						"minecraft:ranged_attack"
					]
				}
			}
		}
	}
},
	"minecraft:skeleton_horse": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:skeleton_horse",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:skeleton_horse_r5_upgrade": {
				"minecraft:rideable": {
				}
			},
			"minecraft:skeleton_horse_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale_by_age": {
					start_scale: 0.5,
					end_scale: 1
				},
				"minecraft:ageable": {
					duration: 1200,
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 4,
					speed_multiplier: 1
				}
			},
			"minecraft:skeleton_horse_adult": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/skeleton_horse.json"
				},
				"minecraft:collision_box": {
					width: 1.4,
					height: 1.6
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"player",
						"skeleton",
						"zombie"
					],
					interact_text: "action.interact.ride.horse",
					seats: {
						position: [
							0,
							1.2,
							-0.2
						]
					}
				}
			},
			"minecraft:skeleton_trap": {
				"minecraft:behavior.skeleton_horse_trap": {
					within_radius: 10,
					duration: 900,
					priority: 2
				}
			},
			"minecraft:lightning_immune": {
				"minecraft:damage_sensor": {
					triggers: {
						on_damage: {
							filters: {
								test: "is_family",
								subject: "other",
								value: "lightning"
							}
						},
						deals_damage: false
					}
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"skeletonhorse",
					"undead",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:health": {
				value: 15,
				max: 15
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.2
			},
			"minecraft:underwater_movement": {
				value: 0.08
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:nameable": {
			},
			"minecraft:horse.jump_strength": {
				value: {
					range_min: 0.4,
					range_max: 1
				}
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:rideable": {
				seat_count: 1,
				family_types: [
					"player",
					"skeleton",
					"zombie"
				],
				interact_text: "action.interact.ride.horse",
				seats: {
					position: [
						0,
						1.2,
						-0.2
					]
				}
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.mount_pathing": {
				priority: 2,
				speed_multiplier: 1.5,
				target_dist: 4,
				track_target: true
			},
			"minecraft:behavior.player_ride_tamed": {
			},
			"minecraft:input_ground_controlled": {
			},
			"minecraft:can_power_jump": {
			},
			"minecraft:balloonable": {
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.7
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:is_tamed": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 36,
						add: {
							component_groups: [
								"minecraft:skeleton_horse_adult"
							]
						}
					},
					{
						weight: 9,
						remove: {
							component_groups: [
								"minecraft:skeleton_horse_r5_upgrade"
							]
						},
						add: {
							component_groups: [
								"minecraft:skeleton_horse_baby"
							]
						}
					}
				]
			},
			"minecraft:set_trap": {
				add: {
					component_groups: [
						"minecraft:skeleton_trap",
						"minecraft:lightning_immune"
					]
				}
			},
			"minecraft:spring_trap": {
				add: {
					component_groups: [
						"minecraft:skeleton_horse_adult",
						"minecraft:lightning_immune"
					]
				}
			}
		}
	}
},
	"minecraft:slime": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:slime",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:slime_large": {
				"minecraft:variant": {
					value: 4
				},
				"minecraft:collision_box": {
					width: 2.08,
					height: 2.08
				},
				"minecraft:health": {
					value: 16,
					max: 16
				},
				"minecraft:movement": {
					value: 0.6
				},
				"minecraft:attack": {
					damage: 4
				}
			},
			"minecraft:slime_medium": {
				"minecraft:variant": {
					value: 2
				},
				"minecraft:collision_box": {
					width: 1.04,
					height: 1.04
				},
				"minecraft:health": {
					value: 4,
					max: 4
				},
				"minecraft:movement": {
					value: 0.4
				},
				"minecraft:attack": {
					damage: 2
				}
			},
			"minecraft:slime_small": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:collision_box": {
					width: 0.52,
					height: 0.52
				},
				"minecraft:health": {
					value: 1,
					max: 1
				},
				"minecraft:movement": {
					value: 0.3
				},
				"minecraft:attack": {
					damage: 0
				},
				"minecraft:loot": {
					table: "loot_tables/entities/slime.json"
				}
			},
			"minecraft:slime_calm": {
				"minecraft:movement.jump": {
					jump_delay: [
						0.5,
						1.5
					]
				}
			},
			"minecraft:slime_aggressive": {
				"minecraft:movement.jump": {
					jump_delay: [
						0.16,
						0.5
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? query.variant : 0"
			},
			"minecraft:type_family": {
				family: [
					"slime",
					"monster",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement.jump": {
				jump_delay: [
					0.5,
					1.5
				]
			},
			"minecraft:on_target_acquired": {
				event: "minecraft:become_aggressive",
				target: "self"
			},
			"minecraft:on_target_escape": {
				event: "minecraft:become_calm",
				target: "self"
			},
			"minecraft:nameable": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.slime_float": {
				priority: 1,
				jump_chance_percentage: 0.8,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.slime_attack": {
				priority: 3
			},
			"minecraft:behavior.slime_random_direction": {
				priority: 4,
				add_random_time_range: 3,
				turn_range: 360,
				min_change_direction_time: 2
			},
			"minecraft:behavior.slime_keep_on_jumping": {
				priority: 5,
				speed_multiplier: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "snowgolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								}
							]
						},
						max_dist: 16
					}
				],
				must_see: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 1,
						trigger: "spawn_small"
					},
					{
						weight: 1,
						trigger: "spawn_medium"
					},
					{
						weight: 1,
						trigger: "spawn_large"
					}
				]
			},
			spawn_small: {
				add: {
					component_groups: [
						"minecraft:slime_small",
						"minecraft:slime_calm"
					]
				}
			},
			spawn_medium: {
				add: {
					component_groups: [
						"minecraft:slime_medium",
						"minecraft:slime_calm"
					]
				}
			},
			spawn_large: {
				add: {
					component_groups: [
						"minecraft:slime_large",
						"minecraft:slime_calm"
					]
				}
			},
			"minecraft:become_calm": {
				add: {
					component_groups: [
						"minecraft:slime_calm"
					]
				}
			},
			"minecraft:become_aggressive": {
				add: {
					component_groups: [
						"minecraft:slime_aggressive"
					]
				}
			}
		}
	}
},
	"minecraft:small_fireball": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:small_fireball",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.31,
				height: 0.31
			},
			"minecraft:projectile": {
				on_hit: {
					impact_damage: {
						damage: 5,
						knockback: true,
						catch_fire: true,
						semi_random_diff_damage: false
					},
					catch_fire: {
						fire_affected_by_griefing: true
					},
					remove_on_hit: {
					}
				},
				power: 1.3,
				gravity: 0,
				inertia: 1,
				liquid_inertia: 1,
				anchor: 2,
				offset: [
					0,
					0.5,
					0
				],
				semi_random_diff_damage: true,
				uncertainty_base: 10,
				reflect_on_hurt: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:snowball": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:snowball",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:projectile": {
				on_hit: {
					impact_damage: {
						filter: "blaze",
						damage: 3,
						knockback: true
					},
					remove_on_hit: {
					},
					particle_on_hit: {
						particle_type: "snowballpoof",
						num_particles: 6,
						on_entity_hit: true,
						on_other_hit: true
					}
				},
				anchor: 1,
				power: 1.5,
				gravity: 0.03,
				angle_offset: 0,
				offset: [
					0,
					-0.1,
					0
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 100,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:snow_golem": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:snow_golem",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:snowman_sheared": {
				"minecraft:is_sheared": {
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"snowgolem",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:collision_box": {
				width: 0.4,
				height: 1.8
			},
			"minecraft:loot": {
				table: "loot_tables/entities/snowman.json"
			},
			"minecraft:health": {
				value: 4,
				max: 4
			},
			"minecraft:movement": {
				value: 0.2
			},
			"minecraft:navigation.walk": {
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:attack": {
				damage: 2
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "fall",
					deals_damage: false
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					},
					{
						filters: {
							test: "is_temperature_value",
							operator: ">",
							value: 1
						},
						cause: "temperature",
						damage_per_tick: 1
					},
					{
						filters: {
							test: "in_contact_with_water",
							operator: "==",
							value: true
						},
						cause: "drowning",
						damage_per_tick: 1
					}
				]
			},
			"minecraft:interact": {
				interactions: [
					{
						cooldown: 2.5,
						use_item: false,
						hurt_item: 1,
						spawn_items: {
							table: "loot_tables/entities/snow_golem_shear.json"
						},
						play_sounds: "shear",
						interact_text: "action.interact.shear",
						vibration: "shear",
						on_interact: {
							filters: {
								all_of: [
									{
										test: "has_equipment",
										subject: "other",
										domain: "hand",
										value: "shears"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "has_component",
										operator: "!=",
										value: "minecraft:is_sheared"
									}
								]
							},
							event: "minecraft:on_sheared",
							target: "self"
						}
					}
				]
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:behavior.ranged_attack": {
				priority: 1,
				speed_multiplier: 1.25,
				attack_interval: 1,
				attack_radius: 10
			},
			"minecraft:shooter": {
				def: "minecraft:snowball"
			},
			"minecraft:trail": {
				block_type: "minecraft:snow_layer",
				spawn_filter: {
					test: "is_temperature_value",
					operator: "<",
					value: 0.81
				}
			},
			"minecraft:behavior.random_stroll": {
				priority: 2,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 3,
				look_distance: 6
			},
			"minecraft:behavior.random_look_around": {
				priority: 4
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 1,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "monster"
						},
						within_default: 6
					}
				]
			},
			"minecraft:persistent": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:on_sheared": {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:snowman_sheared"
					]
				}
			}
		}
	}
},
	"minecraft:spider": {
	format_version: "1.18.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:spider",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:spider_jockey": {
				"minecraft:addrider": {
					entity_type: "minecraft:skeleton"
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"skeleton"
					],
					seats: {
						position: [
							0,
							0.54,
							0
						]
					}
				}
			},
			"minecraft:spider_stray_jockey": {
				"minecraft:addrider": {
					entity_type: "minecraft:skeleton.stray"
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"skeleton"
					],
					seats: {
						position: [
							0,
							0.54,
							0
						]
					}
				}
			},
			"minecraft:spider_wither_jockey": {
				"minecraft:addrider": {
					entity_type: "minecraft:skeleton.wither"
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"skeleton"
					],
					seats: {
						position: [
							0,
							0.54,
							0
						]
					}
				}
			},
			"minecraft:spider_neutral": {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "is_brightness",
							operator: "<",
							value: 0.49
						},
						event: "minecraft:become_hostile"
					}
				},
				"minecraft:on_target_acquired": {
					event: "minecraft:become_angry"
				}
			},
			"minecraft:spider_hostile": {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "is_brightness",
							operator: ">",
							value: 0.49
						},
						event: "minecraft:become_neutral"
					}
				},
				"minecraft:on_target_acquired": {
					event: "minecraft:become_angry"
				},
				"minecraft:behavior.nearest_attackable_target": {
					priority: 2,
					must_see: true,
					attack_interval: 5,
					entity_types: [
						{
							filters: {
								any_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "is_family",
										subject: "other",
										value: "snowgolem"
									},
									{
										test: "is_family",
										subject: "other",
										value: "irongolem"
									}
								]
							},
							max_dist: 16
						}
					]
				}
			},
			"minecraft:spider_angry": {
				"minecraft:angry": {
					duration: 10,
					duration_delta: 3,
					calm_event: {
						event: "minecraft:become_calm",
						target: "self"
					}
				},
				"minecraft:behavior.leap_at_target": {
					priority: 4,
					yd: 0.4,
					must_be_on_ground: false
				},
				"minecraft:behavior.melee_attack": {
					priority: 3,
					track_target: true,
					reach_multiplier: 0.8
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"spider",
					"monster",
					"mob",
					"arthropod"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:loot": {
				table: "loot_tables/entities/spider.json"
			},
			"minecraft:collision_box": {
				width: 1.4,
				height: 0.9
			},
			"minecraft:health": {
				value: 16,
				max: 16
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:navigation.climb": {
				can_path_over_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:attack": {
				damage: 2
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 1
			},
			"minecraft:behavior.mount_pathing": {
				priority: 5,
				speed_multiplier: 1.25,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 7
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:rideable": {
				seat_count: 1,
				family_types: [
					"zombie"
				],
				seats: {
					position: [
						0,
						0.54,
						-0.1
					]
				}
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 1,
						randomize: [
							{
								weight: 80,
								filters: {
									all_of: [
										{
											test: "is_daytime",
											value: false
										},
										{
											test: "is_snow_covered",
											value: true
										},
										{
											test: "is_underground",
											value: false
										}
									]
								},
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:spider_stray_jockey",
										"minecraft:spider_neutral"
									]
								}
							},
							{
								weight: 80,
								filters: {
									test: "is_biome",
									value: "the_nether"
								},
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:spider_wither_jockey",
										"minecraft:spider_neutral"
									]
								}
							},
							{
								weight: 20,
								filters: {
									any_of: [
										{
											test: "is_daytime",
											value: false
										},
										{
											test: "is_underground",
											value: true
										}
									]
								},
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:spider_jockey",
										"minecraft:spider_neutral"
									]
								}
							}
						]
					},
					{
						weight: 99,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:spider_neutral"
							]
						}
					}
				]
			},
			"minecraft:become_hostile": {
				remove: {
					component_groups: [
						"minecraft:spider_neutral"
					]
				},
				add: {
					component_groups: [
						"minecraft:spider_hostile"
					]
				}
			},
			"minecraft:become_neutral": {
				remove: {
					component_groups: [
						"minecraft:spider_hostile"
					]
				},
				add: {
					component_groups: [
						"minecraft:spider_neutral"
					]
				}
			},
			"minecraft:become_angry": {
				add: {
					component_groups: [
						"minecraft:spider_angry"
					]
				}
			},
			"minecraft:become_calm": {
				remove: {
					component_groups: [
						"minecraft:spider_angry"
					]
				}
			}
		}
	}
},
	"minecraft:splash_potion": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:splash_potion",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:projectile": {
				on_hit: {
					douse_fire: {
					},
					thrown_potion_effect: {
					},
					remove_on_hit: {
					}
				},
				power: 0.5,
				gravity: 0.05,
				angle_offset: -20,
				hit_sound: "glass"
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 5,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:squid": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:squid",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:squid_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "!query.is_baby && query.last_hit_by_player ? Math.Random(1,3) : 0"
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"squid",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.95,
				height: 0.95
			},
			"minecraft:health": {
				value: 10,
				max: 10
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/squid.json"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_air: false,
				breathes_water: true
			},
			"minecraft:movement": {
				value: 0.2
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				can_sink: false
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
				mass: 0.5
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.squid_move_away_from_ground": {
				priority: 1
			},
			"minecraft:behavior.squid_flee": {
				priority: 2
			},
			"minecraft:behavior.squid_idle": {
				priority: 2
			},
			"minecraft:behavior.squid_dive": {
				priority: 2
			},
			"minecraft:behavior.squid_out_of_water": {
				priority: 2
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						remove: {
						},
						add: {
						}
					},
					{
						weight: 5,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:squid_baby"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:stray": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:stray",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:revert_to_skeleton": {
				"minecraft:transformation": {
					into: "minecraft:skeleton",
					delay: 0.5
				}
			},
			"minecraft:ranged_attack": {
				"minecraft:behavior.ranged_attack": {
					priority: 0,
					attack_interval_min: 1,
					attack_interval_max: 3,
					attack_radius: 15
				},
				"minecraft:shooter": {
					def: "minecraft:arrow",
					aux_val: 19
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								test: "is_underwater",
								subject: "self",
								operator: "==",
								value: true
							},
							event: "minecraft:melee_mode"
						},
						{
							filters: {
								test: "has_ranged_weapon",
								subject: "self",
								operator: "==",
								value: false
							},
							event: "minecraft:melee_mode"
						}
					]
				}
			},
			"minecraft:melee_attack": {
				"minecraft:behavior.melee_attack": {
					priority: 4,
					track_target: true,
					speed_multiplier: 1.25
				},
				"minecraft:attack": {
					damage: 3,
					effect_name: "slowness",
					effect_duration: 10
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								all_of: [
									{
										test: "in_water",
										subject: "self",
										operator: "==",
										value: false
									},
									{
										test: "has_ranged_weapon",
										subject: "self",
										operator: "==",
										value: true
									}
								]
							},
							event: "minecraft:ranged_mode"
						}
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:equip_item": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:burns_in_daylight": {
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/stray.json"
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				avoid_sun: true,
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:equipment": {
				table: "loot_tables/entities/skeleton_gear.json"
			},
			"minecraft:shooter": {
				def: "minecraft:arrow",
				aux_val: 19
			},
			"minecraft:environment_sensor": {
				triggers: [
					{
						filters: {
							test: "is_underwater",
							subject: "self",
							operator: "==",
							value: true
						},
						event: "minecraft:melee_mode"
					},
					{
						filters: {
							test: "has_ranged_weapon",
							subject: "self",
							operator: "==",
							value: false
						},
						event: "minecraft:melee_mode"
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:netherite_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:stone_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:wooden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:bow",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:netherite_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					}
				]
			},
			"minecraft:behavior.ranged_attack": {
				priority: 0,
				attack_interval_min: 1,
				attack_interval_max: 3,
				attack_radius: 15
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				must_see: true,
				reselect_targets: true,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 16
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "irongolem"
						},
						max_dist: 16
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "baby_turtle"
								},
								{
									test: "in_water",
									subject: "other",
									operator: "!=",
									value: true
								}
							]
						},
						max_dist: 16
					}
				]
			},
			"minecraft:behavior.flee_sun": {
				priority: 2,
				speed_multiplier: 1
			},
			"minecraft:behavior.equip_item": {
				priority: 3
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 4,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "wolf"
						},
						max_dist: 6,
						walk_speed_multiplier: 1.2,
						sprint_speed_multiplier: 1.2
					}
				]
			},
			"minecraft:behavior.pickup_items": {
				priority: 5,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1,
				pickup_based_on_chance: true,
				can_pickup_any_item: true
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:type_family": {
				family: [
					"stray",
					"skeleton",
					"monster",
					"mob",
					"undead"
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:ranged_attack"
					]
				}
			},
			change_to_skeleton: {
				sequence: [
					{
						filters: {
							test: "is_underground",
							value: true
						},
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:revert_to_skeleton"
							]
						}
					},
					{
						randomize: [
							{
								weight: 20,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:revert_to_skeleton"
									]
								}
							},
							{
								weight: 80,
								remove: {
								},
								add: {
								}
							}
						]
					}
				]
			},
			"minecraft:melee_mode": {
				remove: {
					component_groups: [
						"minecraft:ranged_attack"
					]
				},
				add: {
					component_groups: [
						"minecraft:melee_attack"
					]
				}
			},
			"minecraft:ranged_mode": {
				remove: {
					component_groups: [
						"minecraft:melee_attack"
					]
				},
				add: {
					component_groups: [
						"minecraft:ranged_attack"
					]
				}
			}
		}
	}
},
	"minecraft:strider": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:strider",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:strider_saddled": {
				"minecraft:is_saddled": {
				},
				"minecraft:loot": {
					table: "loot_tables/entities/strider_saddled.json"
				},
				"minecraft:boostable": {
					speed_multiplier: 2,
					duration: 16,
					boost_items: [
						{
							item: "warped_fungus_on_a_stick",
							damage: 1,
							replace_item: "fishing_rod"
						}
					]
				},
				"minecraft:rideable": {
					seat_count: 1,
					crouching_skip_interact: true,
					family_types: [
						"player"
					],
					interact_text: "action.interact.ride.strider",
					seats: {
						position: [
							0,
							1.6,
							-0.2
						]
					}
				},
				"minecraft:item_controllable": {
					control_items: "warped_fungus_on_a_stick"
				},
				"minecraft:behavior.controlled_by_player": {
					priority: 0,
					mount_speed_multiplier: 1.45
				}
			},
			"minecraft:strider_unsaddled": {
				"minecraft:interact": {
					interactions: [
						{
							on_interact: {
								filters: {
									test: "has_equipment",
									subject: "other",
									domain: "hand",
									value: "saddle"
								},
								event: "minecraft:on_saddled"
							},
							use_item: true,
							play_sounds: "saddle",
							interact_text: "action.interact.saddle"
						}
					]
				}
			},
			"minecraft:strider_piglin_jockey": {
				"minecraft:addrider": {
					entity_type: "minecraft:zombie_pigman",
					spawn_event: "minecraft:spawn_as_strider_jockey"
				},
				"minecraft:rideable": {
					seat_count: 1,
					crouching_skip_interact: true,
					family_types: [
						"player",
						"zombie_pigman"
					],
					interact_text: "action.interact.ride.strider",
					seats: {
						position: [
							0,
							1.65,
							-0.2
						]
					}
				}
			},
			"minecraft:strider_parent_jockey": {
				"minecraft:addrider": {
					entity_type: "minecraft:strider",
					spawn_event: "minecraft:spawn_baby_strider_jockey"
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"strider"
					],
					seats: {
						position: [
							0,
							1.6,
							0
						]
					}
				}
			},
			"minecraft:strider_baby": {
				"minecraft:type_family": {
					family: [
						"strider",
						"strider_baby",
						"mob"
					]
				},
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"warped_fungus"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 6,
					speed_multiplier: 1.1
				}
			},
			"minecraft:strider_adult": {
				"minecraft:type_family": {
					family: [
						"strider",
						"strider_adult",
						"mob"
					]
				},
				"minecraft:behavior.breed": {
					priority: 4,
					speed_multiplier: 1
				},
				"minecraft:loot": {
					table: "loot_tables/entities/strider.json"
				},
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:breedable": {
					require_tame: false,
					breeds_with: {
						mate_type: "minecraft:strider",
						baby_type: "minecraft:strider",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					breed_items: [
						"warped_fungus"
					]
				}
			},
			"minecraft:start_suffocating": {
				"minecraft:is_shaking": {
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								any_of: [
									{
										test: "in_lava",
										subject: "self",
										operator: "==",
										value: true
									},
									{
										test: "in_lava",
										subject: "other",
										operator: "==",
										value: true
									}
								]
							},
							event: "stop_suffocating"
						},
						{
							filters: {
								all_of: [
									{
										test: "is_riding",
										subject: "self",
										operator: "equals",
										value: false
									},
									{
										test: "has_component",
										subject: "self",
										operator: "not",
										value: "minecraft:behavior.move_to_liquid"
									}
								]
							},
							event: "on_not_riding_parent"
						}
					]
				}
			},
			"minecraft:detect_suffocating": {
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								all_of: [
									{
										test: "in_lava",
										subject: "self",
										operator: "==",
										value: false
									},
									{
										any_of: [
											{
												test: "is_riding",
												subject: "self",
												operator: "==",
												value: false
											},
											{
												test: "in_lava",
												subject: "other",
												operator: "==",
												value: false
											}
										]
									}
								]
							},
							event: "start_suffocating"
						},
						{
							filters: {
								all_of: [
									{
										test: "is_riding",
										subject: "self",
										operator: "equals",
										value: false
									},
									{
										test: "has_component",
										subject: "self",
										operator: "not",
										value: "minecraft:behavior.move_to_liquid"
									}
								]
							},
							event: "on_not_riding_parent"
						}
					]
				}
			},
			"minecraft:strider_pathing_behaviors": {
				"minecraft:behavior.rise_to_liquid_level": {
					priority: 0,
					liquid_y_offset: 0.25,
					rise_delta: 0.01,
					sink_delta: 0.01
				},
				"minecraft:behavior.move_to_liquid": {
					priority: 7,
					search_range: 16,
					search_height: 10,
					goal_radius: 0.9,
					material_type: "Lava",
					search_count: 30
				},
				"minecraft:behavior.random_stroll": {
					priority: 8,
					speed_multiplier: 0.8
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"strider",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 1.7
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_contact_with_water",
							operator: "==",
							value: true
						},
						cause: "drowning",
						damage_per_tick: 1
					}
				]
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:movement": {
				value: 0.16
			},
			"minecraft:lava_movement": {
				value: 0.32
			},
			"minecraft:movement.basic": {
			},
			"minecraft:navigation.walk": {
				can_path_over_lava: true,
				avoid_water: true,
				can_sink: false,
				can_walk_in_lava: true
			},
			"minecraft:jump.static": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:fire_immune": {
			},
			"minecraft:nameable": {
			},
			"minecraft:physics": {
			},
			"minecraft:behavior.look_at_player": {
				priority: 9,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 10
			},
			"minecraft:behavior.panic": {
				priority: 3,
				speed_multiplier: 1.1,
				panic_sound: "panic",
				sound_interval: {
					range_min: 1,
					range_max: 3
				}
			},
			"minecraft:behavior.tempt": {
				priority: 5,
				speed_multiplier: 1.2,
				items: [
					"warped_fungus",
					"warped_fungus_on_a_stick"
				],
				can_tempt_while_ridden: true,
				tempt_sound: "tempt",
				sound_interval: {
					range_min: 2,
					range_max: 5
				}
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 40,
						trigger: "spawn_adult"
					},
					{
						weight: 2,
						trigger: "spawn_adult_piglin_jockey"
					},
					{
						weight: 8,
						trigger: "spawn_adult_parent_jockey"
					},
					{
						weight: 50,
						trigger: "spawn_baby"
					}
				]
			},
			"minecraft:entity_born": {
				trigger: "spawn_baby"
			},
			spawn_adult: {
				add: {
					component_groups: [
						"minecraft:strider_adult",
						"minecraft:strider_unsaddled",
						"minecraft:detect_suffocating",
						"minecraft:strider_pathing_behaviors"
					]
				}
			},
			spawn_adult_parent_jockey: {
				add: {
					component_groups: [
						"minecraft:strider_adult",
						"minecraft:strider_parent_jockey",
						"minecraft:strider_unsaddled",
						"minecraft:detect_suffocating",
						"minecraft:strider_pathing_behaviors"
					]
				}
			},
			spawn_adult_piglin_jockey: {
				add: {
					component_groups: [
						"minecraft:strider_adult",
						"minecraft:strider_saddled",
						"minecraft:strider_piglin_jockey",
						"minecraft:detect_suffocating",
						"minecraft:strider_pathing_behaviors"
					]
				}
			},
			spawn_baby: {
				add: {
					component_groups: [
						"minecraft:strider_baby",
						"minecraft:detect_suffocating",
						"minecraft:strider_pathing_behaviors"
					]
				}
			},
			"minecraft:spawn_baby_strider_jockey": {
				add: {
					component_groups: [
						"minecraft:strider_baby",
						"minecraft:detect_suffocating"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:strider_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:strider_adult",
						"minecraft:strider_unsaddled"
					]
				}
			},
			"minecraft:on_saddled": {
				remove: {
					component_groups: [
						"minecraft:strider_unsaddled"
					]
				},
				add: {
					component_groups: [
						"minecraft:strider_saddled"
					]
				}
			},
			start_suffocating: {
				add: {
					component_groups: [
						"minecraft:start_suffocating"
					]
				}
			},
			stop_suffocating: {
				add: {
					component_groups: [
						"minecraft:detect_suffocating"
					]
				},
				remove: {
					component_groups: [
						"minecraft:start_suffocating"
					]
				}
			},
			on_not_riding_parent: {
				add: {
					component_groups: [
						"minecraft:strider_pathing_behaviors"
					]
				}
			}
		}
	}
},
	"minecraft:tadpole": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:tadpole",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			grow_up: {
				"minecraft:transformation": {
					into: "minecraft:frog",
					transformation_sound: "convert_to_frog"
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"tadpole",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.8,
				height: 0.6
			},
			"minecraft:breathable": {
				total_supply: 8,
				suffocate_time: 0,
				breathes_water: true,
				breathes_air: false,
				generates_bubbles: false
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 6
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:navigation.generic": {
				can_path_over_water: true,
				can_swim: true,
				can_walk: false,
				can_sink: false,
				avoid_damage_blocks: true
			},
			"minecraft:movement.sway": {
				sway_amplitude: 0
			},
			"minecraft:movement": {
				value: 0.1
			},
			"minecraft:underwater_movement": {
				value: 0.1
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:is_baby": {
			},
			"minecraft:ageable": {
				duration: 1200,
				feed_items: [
					"slime_ball"
				],
				grow_up: {
					event: "ageable_grow_up",
					target: "self"
				}
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 2
			},
			"minecraft:behavior.tempt": {
				priority: 5,
				speed_multiplier: 1.25,
				can_tempt_vertically: true,
				items: [
					"slime_ball"
				]
			},
			"minecraft:behavior.random_swim": {
				priority: 2,
				interval: 100
			},
			"minecraft:behavior.look_at_player": {
				priority: 3,
				target_distance: 6,
				probability: 0.02
			}
		},
		events: {
			ageable_grow_up: {
				sequence: [
					{
						add: {
							component_groups: [
								"grow_up"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:thrown_trident": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:thrown_trident",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.35
			},
			"minecraft:projectile": {
				on_hit: {
					impact_damage: {
						damage: 8,
						knockback: true,
						semi_random_diff_damage: false,
						destroy_on_hit: false
					},
					stick_in_ground: {
						shake_time: 0
					}
				},
				liquid_inertia: 0.99,
				hit_sound: "item.trident.hit",
				hit_ground_sound: "item.trident.hit_ground",
				power: 4,
				gravity: 0.1,
				uncertainty_base: 1,
				uncertainty_multiplier: 0,
				stop_on_hurt: true,
				anchor: 1,
				should_bounce: true,
				multiple_targets: false,
				offset: [
					0,
					-0.1,
					0
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:tnt": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:tnt",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			from_explosion: {
				"minecraft:explode": {
					fuse_length: {
						range_min: 0.5,
						range_max: 2
					},
					fuse_lit: true,
					power: 4,
					causes_fire: false
				}
			}
		},
		components: {
			"minecraft:type_family": {
				family: [
					"tnt",
					"inanimate"
				]
			},
			"minecraft:collision_box": {
				width: 0.98,
				height: 0.98
			},
			"minecraft:explode": {
				fuse_length: 4,
				fuse_lit: true,
				power: 4,
				causes_fire: false
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: false,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 5,
					use_motion_prediction_hints: true
				}
			}
		},
		events: {
			from_explosion: {
				add: {
					component_groups: [
						"from_explosion"
					]
				}
			}
		}
	}
},
	"minecraft:tnt_minecart": {
	format_version: "1.13.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:tnt_minecart",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:primed_tnt": {
				"minecraft:explode": {
					fuse_length: 4,
					fuse_lit: true,
					power: 3,
					causes_fire: false
				},
				"minecraft:rail_sensor": {
				},
				"minecraft:is_ignited": {
				}
			},
			"minecraft:instant_explode_tnt": {
				"minecraft:explode": {
					fuse_length: 0,
					fuse_lit: true,
					power: 3,
					causes_fire: false
				},
				"minecraft:rail_sensor": {
				},
				"minecraft:is_ignited": {
				}
			},
			"minecraft:inactive": {
				"minecraft:rail_sensor": {
					on_activate: {
						filters: {
							all_of: [
								{
									test: "is_game_rule",
									domain: "tntexplodes",
									operator: "==",
									value: true
								}
							]
						},
						event: "minecraft:on_prime"
					}
				},
				"minecraft:interact": {
					interactions: [
						{
							on_interact: {
								filters: {
									any_of: [
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "fireball:0"
										},
										{
											test: "has_equipment",
											subject: "other",
											domain: "hand",
											value: "flint_and_steel"
										}
									],
									all_of: [
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "is_game_rule",
											domain: "tntexplodes",
											operator: "==",
											value: true
										}
									]
								},
								event: "minecraft:on_prime",
								target: "self"
							},
							swing: true,
							play_sounds: "ignite",
							interact_text: "action.interact.creeper"
						},
						{
							on_interact: {
								filters: {
									any_of: [
										{
											test: "has_component",
											subject: "other",
											value: "fire_aspect"
										}
									],
									all_of: [
										{
											test: "is_game_rule",
											domain: "tntexplodes",
											operator: "==",
											value: true
										}
									]
								},
								event: "minecraft:on_prime",
								target: "self"
							},
							swing: true,
							interact_text: "action.interact.creeper"
						}
					]
				}
			}
		},
		components: {
			"minecraft:type_family": {
				family: [
					"minecart",
					"inanimate"
				]
			},
			"minecraft:collision_box": {
				width: 0.98,
				height: 0.7
			},
			"minecraft:rail_movement": {
			},
			"minecraft:is_stackable": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 60,
					max_dropped_ticks: 20,
					use_motion_prediction_hints: true
				},
				conditional_values: [
					{
						max_optimized_distance: 0,
						max_dropped_ticks: 0,
						conditional_values: [
							{
								test: "is_moving",
								subject: "self",
								operator: "==",
								value: true
							}
						]
					}
				]
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:inactive"
					]
				}
			},
			"minecraft:on_prime": {
				remove: {
					component_groups: [
						"minecraft:inactive"
					]
				},
				add: {
					component_groups: [
						"minecraft:primed_tnt"
					]
				}
			},
			"minecraft:on_instant_prime": {
				remove: {
					component_groups: [
						"minecraft:inactive"
					]
				},
				add: {
					component_groups: [
						"minecraft:instant_explode_tnt"
					]
				}
			}
		}
	}
},
	"minecraft:trader_llama": {
	format_version: "1.13.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:trader_llama",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:llama_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						{
							item: "wheat",
							growth: 0.1
						},
						{
							item: "hay_block",
							growth: 0.9
						}
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 5,
					speed_multiplier: 1
				}
			},
			"minecraft:llama_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/llama.json"
				},
				"minecraft:behavior.breed": {
					priority: 4,
					speed_multiplier: 1
				},
				"minecraft:breedable": {
					require_tame: true,
					inherit_tamed: false,
					breeds_with: [
						{
							mate_type: "minecraft:llama",
							baby_type: "minecraft:llama",
							breed_event: {
								event: "minecraft:entity_born",
								target: "baby"
							}
						},
						{
							mate_type: "minecraft:trader_llama",
							baby_type: "minecraft:trader_llama",
							breed_event: {
								event: "minecraft:entity_born",
								target: "baby"
							}
						}
					],
					breed_items: [
						"hay_block"
					]
				}
			},
			"minecraft:llama_wild": {
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"player"
					],
					interact_text: "action.interact.mount",
					seats: {
						position: [
							0,
							1.17,
							-0.3
						]
					}
				},
				"minecraft:tamemount": {
					min_temper: 0,
					max_temper: 30,
					feed_text: "action.interact.feed",
					ride_text: "action.interact.mount",
					feed_items: [
						{
							item: "wheat",
							temper_mod: 3
						},
						{
							item: "hay_block",
							temper_mod: 6
						}
					],
					auto_reject_items: [
						{
							item: "horsearmorleather"
						},
						{
							item: "horsearmoriron"
						},
						{
							item: "horsearmorgold"
						},
						{
							item: "horsearmordiamond"
						},
						{
							item: "saddle"
						}
					],
					tame_event: {
						event: "minecraft:on_tame",
						target: "self"
					}
				}
			},
			"minecraft:llama_wandering_trader": {
				"minecraft:on_friendly_anger": {
					event: "minecraft:defend_wandering_trader",
					target: "self"
				},
				"minecraft:environment_sensor": {
					triggers: [
						{
							filters: {
								all_of: [
									{
										test: "is_leashed",
										subject: "self",
										value: false
									},
									{
										test: "has_component",
										subject: "self",
										operator: "!=",
										value: "minecraft:is_tamed"
									}
								]
							},
							event: "minecraft:on_tame"
						},
						{
							filters: {
								all_of: [
									{
										test: "is_leashed",
										subject: "self",
										value: false
									},
									{
										test: "has_component",
										subject: "self",
										operator: "==",
										value: "minecraft:persistent"
									}
								]
							},
							event: "minecraft:remove_persistence"
						}
					]
				}
			},
			"minecraft:llama_persistence": {
				"minecraft:persistent": {
				}
			},
			"minecraft:strength_1": {
				"minecraft:strength": {
					value: 1,
					max: 5
				}
			},
			"minecraft:strength_2": {
				"minecraft:strength": {
					value: 2,
					max: 5
				}
			},
			"minecraft:strength_3": {
				"minecraft:strength": {
					value: 3,
					max: 5
				}
			},
			"minecraft:strength_4": {
				"minecraft:strength": {
					value: 4,
					max: 5
				}
			},
			"minecraft:strength_5": {
				"minecraft:strength": {
					value: 5,
					max: 5
				}
			},
			"minecraft:llama_creamy": {
				"minecraft:variant": {
					value: 0
				}
			},
			"minecraft:llama_white": {
				"minecraft:variant": {
					value: 1
				}
			},
			"minecraft:llama_brown": {
				"minecraft:variant": {
					value: 2
				}
			},
			"minecraft:llama_gray": {
				"minecraft:variant": {
					value: 3
				}
			},
			"minecraft:llama_tamed": {
				"minecraft:is_tamed": {
				},
				"minecraft:rideable": {
					seat_count: 1,
					crouching_skip_interact: true,
					family_types: [
						"player"
					],
					interact_text: "action.interact.ride.horse",
					seats: {
						position: [
							0,
							1.17,
							-0.3
						]
					}
				},
				"minecraft:inventory": {
					inventory_size: 16,
					container_type: "horse",
					additional_slots_per_strength: 3
				},
				"minecraft:equippable": {
					slots: [
						{
							slot: 1,
							item: "carpet",
							accepted_items: [
								"carpet"
							]
						}
					]
				}
			},
			"minecraft:llama_unchested": {
				"minecraft:interact": {
					interactions: [
						{
							play_sounds: "armor.equip_generic",
							on_interact: {
								filters: {
									all_of: [
										{
											test: "is_family",
											subject: "other",
											value: "player"
										},
										{
											test: "has_equipment",
											domain: "hand",
											subject: "other",
											value: "chest"
										}
									]
								},
								event: "minecraft:on_chest",
								target: "self"
							},
							use_item: true,
							interact_text: "action.interact.attachchest"
						}
					]
				}
			},
			"minecraft:llama_chested": {
				"minecraft:is_chested": {
				}
			},
			"minecraft:llama_angry": {
				"minecraft:angry": {
					duration: 4,
					broadcast_anger: false,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:behavior.ranged_attack": {
					priority: 2,
					attack_radius: 64,
					charge_shoot_trigger: 2,
					charge_charged_trigger: 1
				}
			},
			"minecraft:llama_angry_wolf": {
				"minecraft:angry": {
					duration: -1,
					broadcast_anger: false,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:behavior.ranged_attack": {
					priority: 2,
					attack_radius: 64,
					charge_shoot_trigger: 2,
					charge_charged_trigger: 1
				}
			},
			"minecraft:llama_defend_trader": {
				"minecraft:angry": {
					duration: 10,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:behavior.ranged_attack": {
					priority: 2,
					attack_radius: 64,
					charge_shoot_trigger: 2,
					charge_charged_trigger: 1
				}
			},
			"minecraft:in_caravan": {
				"minecraft:damage_sensor": {
					triggers: {
						cause: "all",
						deals_damage: true
					}
				}
			}
		},
		components: {
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.run_around_like_crazy": {
				priority: 1,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.mount_pathing": {
				priority: 1,
				speed_multiplier: 1.25,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1,
				hurt_owner: true,
				entity_types: {
					filters: {
						test: "is_family",
						subject: "other",
						operator: "!=",
						value: "trader_llama"
					}
				}
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				attack_interval: 16,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "wolf"
								},
								{
									test: "has_component",
									subject: "other",
									operator: "!=",
									value: "minecraft:is_tamed"
								}
							]
						},
						max_dist: 10
					}
				],
				must_see: false,
				must_reach: true
			},
			"minecraft:behavior.follow_caravan": {
				priority: 3,
				speed_multiplier: 2.1,
				entity_count: 10,
				entity_types: {
					filters: {
						test: "is_family",
						subject: "other",
						value: "llama"
					}
				}
			},
			"minecraft:behavior.panic": {
				priority: 4,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.7
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"trader_llama",
					"llama",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:mark_variant": {
				value: 1
			},
			"minecraft:health": {
				value: {
					range_min: 15,
					range_max: 30
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:follow_range": {
				value: 40,
				max: 40
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10,
				can_be_stolen: true
			},
			"minecraft:balloonable": {
			},
			"minecraft:healable": {
				items: [
					{
						item: "wheat",
						heal_amount: 2
					},
					{
						item: "hay_block",
						heal_amount: 10
					}
				]
			},
			"minecraft:shooter": {
				def: "minecraft:llama_spit"
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "all",
					deals_damage: true,
					on_damage: {
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "trader_llama"
								},
								{
									test: "in_caravan",
									value: false
								}
							]
						},
						event: "minecraft:become_angry"
					}
				}
			},
			"minecraft:on_target_acquired": {
				filters: {
					all_of: [
						{
							test: "is_family",
							subject: "target",
							value: "wolf"
						},
						{
							test: "has_component",
							subject: "target",
							operator: "!=",
							value: "minecraft:is_tamed"
						}
					]
				},
				event: "minecraft:mad_at_wolf",
				target: "self"
			},
			"minecraft:on_target_escape": {
				filters: {
					all_of: [
						{
							test: "is_family",
							subject: "target",
							value: "wolf"
						},
						{
							test: "has_component",
							subject: "target",
							operator: "!=",
							value: "minecraft:is_tamed"
						}
					]
				},
				event: "minecraft:on_calm",
				target: "self"
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 1.87
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 90,
								trigger: "minecraft:spawn_adult"
							},
							{
								weight: 10,
								trigger: "minecraft:spawn_baby"
							}
						]
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:llama_baby"
					]
				}
			},
			"minecraft:from_wandering_trader": {
				sequence: [
					{
						add: {
							component_groups: [
								"minecraft:llama_adult",
								"minecraft:llama_wandering_trader",
								"minecraft:llama_persistence"
							]
						}
					},
					{
						trigger: "minecraft:add_attributes"
					}
				]
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:llama_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:llama_adult",
						"minecraft:llama_wild"
					]
				}
			},
			"minecraft:on_tame": {
				remove: {
					component_groups: [
						"minecraft:llama_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:llama_tamed",
						"minecraft:llama_unchested"
					]
				}
			},
			"minecraft:remove_persistence": {
				remove: {
					component_groups: [
						"minecraft:llama_persistence"
					]
				}
			},
			"minecraft:join_caravan": {
				add: {
					component_groups: [
						"minecraft:in_caravan"
					]
				}
			},
			"minecraft:leave_caravan": {
				remove: {
					component_groups: [
						"minecraft:in_caravan"
					]
				}
			},
			"minecraft:mad_at_wolf": {
				add: {
					component_groups: [
						"minecraft:llama_angry_wolf"
					]
				}
			},
			"minecraft:defend_wandering_trader": {
				add: {
					component_groups: [
						"minecraft:llama_defend_trader"
					]
				}
			},
			"minecraft:become_angry": {
				add: {
					component_groups: [
						"minecraft:llama_angry"
					]
				}
			},
			"minecraft:on_calm": {
				remove: {
					component_groups: [
						"minecraft:llama_angry",
						"minecraft:llama_angry_wolf",
						"minecraft:llama_defend_trader"
					]
				}
			},
			"minecraft:on_chest": {
				remove: {
					component_groups: [
						"minecraft:llama_unchested"
					]
				},
				add: {
					component_groups: [
						"minecraft:llama_chested"
					]
				}
			},
			"minecraft:add_attributes": {
				sequence: [
					{
						randomize: [
							{
								weight: 32,
								add: {
									component_groups: [
										"minecraft:strength_1"
									]
								}
							},
							{
								weight: 32,
								add: {
									component_groups: [
										"minecraft:strength_2"
									]
								}
							},
							{
								weight: 32,
								add: {
									component_groups: [
										"minecraft:strength_3"
									]
								}
							},
							{
								weight: 2,
								add: {
									component_groups: [
										"minecraft:strength_4"
									]
								}
							},
							{
								weight: 2,
								add: {
									component_groups: [
										"minecraft:strength_5"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 25,
								add: {
									component_groups: [
										"minecraft:llama_creamy"
									]
								}
							},
							{
								weight: 25,
								add: {
									component_groups: [
										"minecraft:llama_white"
									]
								}
							},
							{
								weight: 25,
								add: {
									component_groups: [
										"minecraft:llama_brown"
									]
								}
							},
							{
								weight: 25,
								add: {
									component_groups: [
										"minecraft:llama_gray"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:spawn_baby": {
				add: {
					component_groups: [
						"minecraft:llama_baby"
					]
				},
				trigger: "minecraft:add_attributes"
			},
			"minecraft:spawn_adult": {
				add: {
					component_groups: [
						"minecraft:llama_adult",
						"minecraft:llama_wild"
					]
				},
				trigger: "minecraft:add_attributes"
			}
		}
	}
},
	"minecraft:tripod_camera": {
	format_version: "1.13.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:tripod_camera",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		components: {
			"minecraft:type_family": {
				family: [
					"tripodcamera",
					"inanimate",
					"mob"
				]
			},
			"minecraft:health": {
				value: 4,
				max: 4
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/empty.json"
			},
			"minecraft:collision_box": {
				width: 0.75,
				height: 1.8
			},
			"minecraft:physics": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		}
	}
},
	"minecraft:tropicalfish": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:tropicalfish",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:tropicalfish_variant_a": {
				"minecraft:variant": {
					value: 0
				}
			},
			"minecraft:tropicalfish_variant_b": {
				"minecraft:variant": {
					value: 1
				}
			},
			"minecraft:tropicalfish_variant_pattern_1": {
				"minecraft:mark_variant": {
					value: 0
				}
			},
			"minecraft:tropicalfish_variant_pattern_2": {
				"minecraft:mark_variant": {
					value: 1
				}
			},
			"minecraft:tropicalfish_variant_pattern_3": {
				"minecraft:mark_variant": {
					value: 2
				}
			},
			"minecraft:tropicalfish_variant_pattern_4": {
				"minecraft:mark_variant": {
					value: 3
				}
			},
			"minecraft:tropicalfish_variant_pattern_5": {
				"minecraft:mark_variant": {
					value: 4
				}
			},
			"minecraft:tropicalfish_variant_pattern_6": {
				"minecraft:mark_variant": {
					value: 5
				}
			},
			"minecraft:tropicalfish_base_white": {
				"minecraft:color": {
					value: 0
				}
			},
			"minecraft:tropicalfish_base_orange": {
				"minecraft:color": {
					value: 1
				}
			},
			"minecraft:tropicalfish_base_magenta": {
				"minecraft:color": {
					value: 2
				}
			},
			"minecraft:tropicalfish_base_lightblue": {
				"minecraft:color": {
					value: 3
				}
			},
			"minecraft:tropicalfish_base_yellow": {
				"minecraft:color": {
					value: 4
				}
			},
			"minecraft:tropicalfish_base_lightgreen": {
				"minecraft:color": {
					value: 5
				}
			},
			"minecraft:tropicalfish_base_pink": {
				"minecraft:color": {
					value: 6
				}
			},
			"minecraft:tropicalfish_base_gray": {
				"minecraft:color": {
					value: 7
				}
			},
			"minecraft:tropicalfish_base_silver": {
				"minecraft:color": {
					value: 8
				}
			},
			"minecraft:tropicalfish_base_cyan": {
				"minecraft:color": {
					value: 9
				}
			},
			"minecraft:tropicalfish_base_purple": {
				"minecraft:color": {
					value: 10
				}
			},
			"minecraft:tropicalfish_base_blue": {
				"minecraft:color": {
					value: 11
				}
			},
			"minecraft:tropicalfish_base_brown": {
				"minecraft:color": {
					value: 12
				}
			},
			"minecraft:tropicalfish_base_green": {
				"minecraft:color": {
					value: 13
				}
			},
			"minecraft:tropicalfish_base_red": {
				"minecraft:color": {
					value: 14
				}
			},
			"minecraft:tropicalfish_pattern_white": {
				"minecraft:color2": {
					value: 0
				}
			},
			"minecraft:tropicalfish_pattern_orange": {
				"minecraft:color2": {
					value: 1
				}
			},
			"minecraft:tropicalfish_pattern_magenta": {
				"minecraft:color2": {
					value: 2
				}
			},
			"minecraft:tropicalfish_pattern_lightblue": {
				"minecraft:color2": {
					value: 3
				}
			},
			"minecraft:tropicalfish_pattern_yellow": {
				"minecraft:color2": {
					value: 4
				}
			},
			"minecraft:tropicalfish_pattern_lightgreen": {
				"minecraft:color2": {
					value: 5
				}
			},
			"minecraft:tropicalfish_pattern_pink": {
				"minecraft:color2": {
					value: 6
				}
			},
			"minecraft:tropicalfish_pattern_gray": {
				"minecraft:color2": {
					value: 7
				}
			},
			"minecraft:tropicalfish_pattern_silver": {
				"minecraft:color2": {
					value: 8
				}
			},
			"minecraft:tropicalfish_pattern_cyan": {
				"minecraft:color2": {
					value: 9
				}
			},
			"minecraft:tropicalfish_pattern_purple": {
				"minecraft:color2": {
					value: 10
				}
			},
			"minecraft:tropicalfish_pattern_blue": {
				"minecraft:color2": {
					value: 11
				}
			},
			"minecraft:tropicalfish_pattern_brown": {
				"minecraft:color2": {
					value: 12
				}
			},
			"minecraft:tropicalfish_pattern_green": {
				"minecraft:color2": {
					value: 13
				}
			},
			"minecraft:tropicalfish_pattern_red": {
				"minecraft:color2": {
					value: 14
				}
			},
			"minecraft:anenonme": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 1
				},
				"minecraft:color": {
					value: 1
				},
				"minecraft:color2": {
					value: 7
				}
			},
			"minecraft:black_tang": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 0
				},
				"minecraft:color": {
					value: 7
				},
				"minecraft:color2": {
					value: 7
				}
			},
			"minecraft:blue_dory": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 1
				},
				"minecraft:color": {
					value: 7
				},
				"minecraft:color2": {
					value: 3
				}
			},
			"minecraft:butterfly_fish": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 4
				},
				"minecraft:color": {
					value: 0
				},
				"minecraft:color2": {
					value: 7
				}
			},
			"minecraft:cichlid": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 1
				},
				"minecraft:color": {
					value: 11
				},
				"minecraft:color2": {
					value: 7
				}
			},
			"minecraft:clownfish": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 0
				},
				"minecraft:color": {
					value: 1
				},
				"minecraft:color2": {
					value: 0
				}
			},
			"minecraft:cc_betta": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 5
				},
				"minecraft:color": {
					value: 6
				},
				"minecraft:color2": {
					value: 3
				}
			},
			"minecraft:dog_fish": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 3
				},
				"minecraft:color": {
					value: 10
				},
				"minecraft:color2": {
					value: 4
				}
			},
			"minecraft:e_red_snapper": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 5
				},
				"minecraft:color": {
					value: 0
				},
				"minecraft:color2": {
					value: 14
				}
			},
			"minecraft:goat_fish": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 5
				},
				"minecraft:color": {
					value: 0
				},
				"minecraft:color2": {
					value: 4
				}
			},
			"minecraft:moorish_idol": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 2
				},
				"minecraft:color": {
					value: 0
				},
				"minecraft:color2": {
					value: 7
				}
			},
			"minecraft:ornate_butterfly": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 5
				},
				"minecraft:color": {
					value: 0
				},
				"minecraft:color2": {
					value: 1
				}
			},
			"minecraft:parrot_fish": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 3
				},
				"minecraft:color": {
					value: 9
				},
				"minecraft:color2": {
					value: 6
				}
			},
			"minecraft:queen_angel_fish": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 4
				},
				"minecraft:color": {
					value: 5
				},
				"minecraft:color2": {
					value: 3
				}
			},
			"minecraft:red_cichlid": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 4
				},
				"minecraft:color": {
					value: 14
				},
				"minecraft:color2": {
					value: 0
				}
			},
			"minecraft:red_lipped_benny": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 2
				},
				"minecraft:color": {
					value: 7
				},
				"minecraft:color2": {
					value: 14
				}
			},
			"minecraft:red_snapper": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 3
				},
				"minecraft:color": {
					value: 14
				},
				"minecraft:color2": {
					value: 0
				}
			},
			"minecraft:threadfin": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 0
				},
				"minecraft:color": {
					value: 0
				},
				"minecraft:color2": {
					value: 4
				}
			},
			"minecraft:tomato_clown": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 1
				},
				"minecraft:color": {
					value: 14
				},
				"minecraft:color2": {
					value: 0
				}
			},
			"minecraft:triggerfish": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 1
				},
				"minecraft:color": {
					value: 7
				},
				"minecraft:color2": {
					value: 0
				}
			},
			"minecraft:yellow_tang": {
				"minecraft:variant": {
					value: 1
				},
				"minecraft:mark_variant": {
					value: 1
				},
				"minecraft:color": {
					value: 4
				},
				"minecraft:color2": {
					value: 4
				}
			},
			"minecraft:yellowtail_parrot": {
				"minecraft:variant": {
					value: 0
				},
				"minecraft:mark_variant": {
					value: 3
				},
				"minecraft:color": {
					value: 9
				},
				"minecraft:color2": {
					value: 4
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
			},
			"minecraft:type_family": {
				family: [
					"tropicalfish",
					"fish"
				]
			},
			"minecraft:collision_box": {
				width: 0.4,
				height: 0.4
			},
			"minecraft:health": {
				value: 3,
				max: 3
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/tropicalfish.json"
			},
			"minecraft:scale": {
				value: 1.3
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_air: false,
				breathes_water: true
			},
			"minecraft:movement": {
				value: 0.12
			},
			"minecraft:underwater_movement": {
				value: 0.12
			},
			"minecraft:navigation.generic": {
				is_amphibious: false,
				can_path_over_water: false,
				can_swim: true,
				can_walk: false,
				can_breach: false,
				can_sink: false
			},
			"minecraft:movement.sway": {
				sway_amplitude: 0
			},
			"minecraft:physics": {
				has_gravity: false
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:despawn": {
				despawn_from_distance: {
					min_distance: 32,
					max_distance: 40
				}
			},
			"minecraft:behavior.swim_idle": {
				priority: 5,
				idle_time: 5,
				success_rate: 0.1
			},
			"minecraft:behavior.random_swim": {
				priority: 3,
				speed_multiplier: 1,
				xz_dist: 16,
				y_dist: 4,
				interval: 0
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 1,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "axolotl"
								}
							]
						},
						max_dist: 6,
						walk_speed_multiplier: 1.5,
						sprint_speed_multiplier: 2
					}
				]
			},
			"minecraft:behavior.swim_wander": {
				priority: 4,
				interval: 0.1,
				look_ahead: 2,
				speed_multiplier: 1,
				wander_time: 5
			},
			"minecraft:flocking": {
				in_water: true,
				match_variants: true,
				use_center_of_mass: false,
				low_flock_limit: 4,
				high_flock_limit: 8,
				goal_weight: 2,
				loner_chance: 0.1,
				influence_radius: 3,
				breach_influence: 7,
				separation_weight: 0.65,
				separation_threshold: 0.15,
				cohesion_weight: 2.75,
				cohesion_threshold: 1.5,
				innner_cohesion_threshold: 1.5,
				min_height: 1.5,
				max_height: 6,
				block_distance: 2,
				block_weight: 0.85
			},
			"minecraft:nameable": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:become_anenonme": {
				add: {
					component_groups: [
						"minecraft:anenonme"
					]
				}
			},
			"minecraft:become_black_tang": {
				add: {
					component_groups: [
						"minecraft:black_tang"
					]
				}
			},
			"minecraft:become_blue_dory": {
				add: {
					component_groups: [
						"minecraft:blue_dory"
					]
				}
			},
			"minecraft:become_butterfly_fish": {
				add: {
					component_groups: [
						"minecraft:butterfly_fish"
					]
				}
			},
			"minecraft:become_cichlid": {
				add: {
					component_groups: [
						"minecraft:cichlid"
					]
				}
			},
			"minecraft:become_clownfish": {
				add: {
					component_groups: [
						"minecraft:clownfish"
					]
				}
			},
			"minecraft:become_cc_betta": {
				add: {
					component_groups: [
						"minecraft:cc_betta"
					]
				}
			},
			"minecraft:become_dog_fish": {
				add: {
					component_groups: [
						"minecraft:dog_fish"
					]
				}
			},
			"minecraft:become_e_red_snapper": {
				add: {
					component_groups: [
						"minecraft:e_red_snapper"
					]
				}
			},
			"minecraft:become_goat_fish": {
				add: {
					component_groups: [
						"minecraft:goat_fish"
					]
				}
			},
			"minecraft:become_moorish_idol": {
				add: {
					component_groups: [
						"minecraft:moorish_idol"
					]
				}
			},
			"minecraft:become_ornate_butterfly": {
				add: {
					component_groups: [
						"minecraft:ornate_butterfly"
					]
				}
			},
			"minecraft:become_parrot_fish": {
				add: {
					component_groups: [
						"minecraft:parrot_fish"
					]
				}
			},
			"minecraft:become_queen_angel_fish": {
				add: {
					component_groups: [
						"minecraft:queen_angel_fish"
					]
				}
			},
			"minecraft:become_red_cichlid": {
				add: {
					component_groups: [
						"minecraft:red_cichlid"
					]
				}
			},
			"minecraft:become_red_lipped_benny": {
				add: {
					component_groups: [
						"minecraft:red_lipped_benny"
					]
				}
			},
			"minecraft:become_red_snapper": {
				add: {
					component_groups: [
						"minecraft:red_snapper"
					]
				}
			},
			"minecraft:become_threadfin": {
				add: {
					component_groups: [
						"minecraft:threadfin"
					]
				}
			},
			"minecraft:become_tomato_clown": {
				add: {
					component_groups: [
						"minecraft:tomato_clown"
					]
				}
			},
			"minecraft:become_triggerfish": {
				add: {
					component_groups: [
						"minecraft:triggerfish"
					]
				}
			},
			"minecraft:become_yellow_tang": {
				add: {
					component_groups: [
						"minecraft:yellow_tang"
					]
				}
			},
			"minecraft:become_yellow_tail_parrot": {
				add: {
					component_groups: [
						"minecraft:yellow_tail_parrot"
					]
				}
			},
			"minecraft:entity_spawned": {
				sequence: [
					{
						add: {
							component_groups: [
								"adult"
							]
						}
					},
					{
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_variant_a"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_variant_b"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_variant_pattern_1"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_variant_pattern_2"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_variant_pattern_3"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_variant_pattern_4"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_variant_pattern_5"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_variant_pattern_6"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_white"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_orange"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_magenta"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_lightblue"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_yellow"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_lightgreen"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_pink"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_gray"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_silver"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_cyan"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_purple"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_blue"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_brown"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_green"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_base_red"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_white"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_orange"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_magenta"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_lightblue"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_yellow"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_lightgreen"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_pink"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_gray"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_silver"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_cyan"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_purple"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_blue"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_brown"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_green"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"minecraft:tropicalfish_pattern_red"
									]
								}
							}
						]
					}
				]
			}
		}
	}
},
	"minecraft:turtle": {
	format_version: "1.18.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:turtle",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:baby": {
				"minecraft:type_family": {
					family: [
						"turtle",
						"baby_turtle",
						"mob"
					]
				},
				"minecraft:collision_box": {
					width: 0.6,
					height: 0.2
				},
				"minecraft:underwater_movement": {
					value: 0.06
				},
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.16
				},
				"minecraft:behavior.move_to_water": {
					priority: 1,
					search_range: 15,
					search_height: 5,
					goal_radius: 0.1
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"seagrass"
					],
					drop_items: [
						"turtle_shell_piece"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				}
			},
			"minecraft:adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:type_family": {
					family: [
						"turtle",
						"mob"
					]
				},
				"minecraft:collision_box": {
					width: 1.2,
					height: 0.4
				},
				"minecraft:underwater_movement": {
					value: 0.12
				},
				"minecraft:loot": {
					table: "loot_tables/entities/sea_turtle.json"
				},
				"minecraft:breedable": {
					require_tame: false,
					causes_pregnancy: true,
					breeds_with: {
						mate_type: "minecraft:turtle",
						baby_type: "minecraft:turtle",
						breed_event: {
							event: "minecraft:become_pregnant",
							target: "self"
						}
					},
					breed_items: [
						"seagrass"
					]
				},
				"minecraft:behavior.breed": {
					priority: 2,
					speed_multiplier: 1
				},
				"minecraft:behavior.move_to_land": {
					priority: 6,
					search_range: 16,
					search_height: 5,
					goal_radius: 0.5
				},
				"minecraft:behavior.random_stroll": {
					priority: 9,
					interval: 100
				}
			},
			"minecraft:pregnant": {
				"minecraft:behavior.go_home": {
					priority: 1,
					speed_multiplier: 1,
					interval: 700,
					goal_radius: 4,
					on_home: [
						{
							event: "minecraft:go_lay_egg",
							target: "self"
						}
					]
				}
			},
			"minecraft:wants_to_lay_egg": {
				"minecraft:behavior.lay_egg": {
					priority: 1,
					speed_multiplier: 1,
					search_range: 16,
					search_height: 4,
					goal_radius: 1.5,
					on_lay: {
						event: "minecraft:laid_egg",
						target: "self"
					}
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true,
				breathes_air: true,
				generates_bubbles: false
			},
			"minecraft:nameable": {
			},
			"minecraft:health": {
				value: 30
			},
			"minecraft:damage_sensor": {
				triggers: {
					cause: "lightning",
					deals_damage: true,
					damage_multiplier: 2000
				}
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.1
			},
			"minecraft:water_movement": {
				drag_factor: 0.9
			},
			"minecraft:navigation.generic": {
				is_amphibious: true,
				can_path_over_water: false,
				can_swim: true,
				can_walk: true,
				can_sink: false,
				avoid_damage_blocks: true
			},
			"minecraft:movement.amphibious": {
				max_turn: 5
			},
			"minecraft:jump.static": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:home": {
			},
			"minecraft:follow_range": {
				value: 1024
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.panic": {
				priority: 0,
				prefer_water: true,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.tempt": {
				priority: 3,
				speed_multiplier: 1.1,
				can_tempt_vertically: true,
				items: [
					"seagrass"
				]
			},
			"minecraft:behavior.move_to_water": {
				priority: 4,
				search_range: 16,
				search_height: 5,
				goal_radius: 1.5
			},
			"minecraft:behavior.random_swim": {
				priority: 7,
				interval: 0,
				xz_dist: 30,
				y_dist: 15
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				target_distance: 6,
				probability: 0.02
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 9,
						add: {
							component_groups: [
								"minecraft:adult"
							]
						}
					},
					{
						weight: 1,
						add: {
							component_groups: [
								"minecraft:baby"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				add: {
					component_groups: [
						"minecraft:baby"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:adult"
					]
				}
			},
			"minecraft:become_pregnant": {
				add: {
					component_groups: [
						"minecraft:pregnant"
					]
				}
			},
			"minecraft:go_lay_egg": {
				add: {
					component_groups: [
						"minecraft:wants_to_lay_egg"
					]
				},
				remove: {
					component_groups: [
						"minecraft:pregnant"
					]
				}
			},
			"minecraft:laid_egg": {
				remove: {
					component_groups: [
						"minecraft:wants_to_lay_egg"
					]
				}
			}
		}
	}
},
	"minecraft:vex": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:vex",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"vex",
					"monster",
					"mob"
				]
			},
			"minecraft:equipment": {
				table: "loot_tables/entities/vex_gear.json"
			},
			"minecraft:health": {
				value: 14,
				max: 14
			},
			"minecraft:attack": {
				damage: 3
			},
			"minecraft:collision_box": {
				width: 0.4,
				height: 0.8
			},
			"minecraft:movement": {
				value: 1
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:fire_immune": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.charge_attack": {
				priority: 4
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 3,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "wandering_trader"
								}
							]
						},
						max_dist: 70
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "villager"
								},
								{
									test: "has_component",
									subject: "other",
									operator: "!=",
									value: "minecraft:is_baby"
								}
							]
						},
						max_dist: 70
					}
				],
				must_see: true
			},
			"minecraft:behavior.look_at_player": {
				priority: 9,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.look_at_entity": {
				priority: 9,
				look_distance: 6,
				probability: 0.02,
				filters: {
					test: "is_family",
					subject: "other",
					value: "mob"
				}
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:physics": {
				has_gravity: false,
				has_collision: false
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:game_event_movement_tracking": {
				emit_move: false,
				emit_swim: false
			}
		}
	}
},
	"minecraft:villager": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:villager",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:celebrate": {
				"minecraft:behavior.celebrate_survive": {
					priority: 5,
					fireworks_interval: {
						range_min: 2,
						range_max: 7
					},
					duration: 30,
					on_celebration_end_event: {
						event: "minecraft:stop_celebrating",
						target: "self"
					}
				},
				"minecraft:behavior.move_outdoors": {
					priority: 2,
					speed_multiplier: 0.8,
					timeout_cooldown: 8
				}
			},
			become_witch: {
				"minecraft:transformation": {
					into: "minecraft:witch",
					delay: 0.5
				}
			},
			become_villager_v2: {
				"minecraft:transformation": {
					into: "minecraft:villager_v2",
					keep_level: true
				}
			},
			become_zombie: {
				"minecraft:transformation": {
					into: "minecraft:zombie_villager"
				}
			},
			behavior_peasant: {
				"minecraft:shareables": {
					items: [
						{
							item: "minecraft:bread",
							want_amount: 3,
							surplus_amount: 6,
							stored_in_inventory: true
						},
						{
							item: "minecraft:carrot",
							want_amount: 60,
							surplus_amount: 4,
							stored_in_inventory: true
						},
						{
							item: "minecraft:potato",
							want_amount: 60,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:beetroot",
							want_amount: 60,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:wheat_seeds",
							want_amount: 64,
							surplus_amount: 64,
							stored_in_inventory: true,
							pickup_only: true
						},
						{
							item: "minecraft:beetroot_seeds",
							want_amount: 64,
							surplus_amount: 64,
							stored_in_inventory: true,
							pickup_only: true
						},
						{
							item: "minecraft:wheat",
							want_amount: 45,
							surplus_amount: 18,
							craft_into: "minecraft:bread",
							stored_in_inventory: true
						}
					]
				},
				"minecraft:behavior.harvest_farm_block": {
					priority: 9,
					speed_multiplier: 0.5
				}
			},
			behavior_non_peasant: {
				"minecraft:shareables": {
					items: [
						{
							item: "minecraft:bread",
							want_amount: 3,
							surplus_amount: 6,
							stored_in_inventory: true
						},
						{
							item: "minecraft:carrot",
							want_amount: 12,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:potato",
							want_amount: 12,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:beetroot",
							want_amount: 12,
							surplus_amount: 24,
							stored_in_inventory: true
						}
					]
				}
			},
			farmer: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"farmer",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.farmer",
					table: "trading/farmer_trades.json",
					convert_trades_economy: true
				}
			},
			fisherman: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"fisherman",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.fisherman",
					table: "trading/fisherman_trades.json",
					convert_trades_economy: true
				}
			},
			shepherd: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"shepherd",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.shepherd",
					table: "trading/shepherd_trades.json",
					convert_trades_economy: true
				}
			},
			fletcher: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"fletcher",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.fletcher",
					table: "trading/fletcher_trades.json",
					convert_trades_economy: true
				}
			},
			librarian: {
				"minecraft:type_family": {
					family: [
						"villager",
						"librarian",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 1
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.librarian",
					table: "trading/librarian_trades.json",
					convert_trades_economy: true
				}
			},
			cartographer: {
				"minecraft:type_family": {
					family: [
						"villager",
						"cartographer",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 1
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.cartographer",
					table: "trading/cartographer_trades.json",
					convert_trades_economy: true
				}
			},
			cleric: {
				"minecraft:type_family": {
					family: [
						"villager",
						"priest",
						"cleric",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 2
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.cleric",
					table: "trading/cleric_trades.json",
					convert_trades_economy: true
				}
			},
			armorer: {
				"minecraft:type_family": {
					family: [
						"villager",
						"blacksmith",
						"armorer",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 3
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.armor",
					table: "trading/armorer_trades.json",
					convert_trades_economy: true
				}
			},
			weaponsmith: {
				"minecraft:type_family": {
					family: [
						"villager",
						"blacksmith",
						"weaponsmith",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 3
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.weapon",
					table: "trading/weapon_smith_trades.json",
					convert_trades_economy: true
				}
			},
			toolsmith: {
				"minecraft:type_family": {
					family: [
						"villager",
						"blacksmith",
						"toolsmith",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 3
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.tool",
					table: "trading/tool_smith_trades.json",
					convert_trades_economy: true
				}
			},
			butcher: {
				"minecraft:type_family": {
					family: [
						"villager",
						"artisan",
						"butcher",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 4
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.butcher",
					table: "trading/butcher_trades.json",
					convert_trades_economy: true
				}
			},
			leatherworker: {
				"minecraft:type_family": {
					family: [
						"villager",
						"artisan",
						"leatherworker",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 4
				},
				"minecraft:trade_table": {
					display_name: "entity.villager.leather",
					table: "trading/leather_worker_trades.json",
					convert_trades_economy: true
				}
			},
			baby: {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.take_flower": {
					priority: 7
				},
				"minecraft:behavior.play": {
					priority: 8,
					speed_multiplier: 0.32
				}
			},
			adult: {
				"minecraft:behavior.make_love": {
					priority: 6
				},
				"minecraft:behavior.receive_love": {
					priority: 7
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"villager",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:nameable": {
			},
			"minecraft:movement": {
				value: 0.5
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				can_path_over_water: true,
				can_pass_doors: true,
				can_open_doors: true,
				can_walk: true,
				avoid_water: true
			},
			"minecraft:annotation.open_door": {
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:inventory": {
				inventory_size: 8,
				"private": true
			},
			"minecraft:damage_sensor": {
				triggers: [
					{
						on_damage: {
							filters: {
								test: "is_family",
								subject: "other",
								value: "lightning"
							},
							event: "become_witch"
						},
						deals_damage: false
					},
					{
						on_damage: {
							filters: {
								any_of: [
									{
										test: "is_family",
										subject: "other",
										value: "zombie"
									},
									{
										test: "is_family",
										subject: "other",
										value: "husk"
									}
								],
								all_of: [
									{
										test: "has_damage",
										value: "fatal"
									}
								]
							},
							event: "become_zombie"
						}
					}
				]
			},
			"minecraft:persistent": {
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.trade_with_player": {
				priority: 1
			},
			"minecraft:behavior.look_at_trading_player": {
				priority: 2
			},
			"minecraft:behavior.panic": {
				priority: 3,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 3,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "zombie"
								},
								{
									test: "is_family",
									subject: "other",
									value: "zombie_villager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "illager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "vex"
								}
							]
						},
						max_dist: 8,
						walk_speed_multiplier: 0.6,
						sprint_speed_multiplier: 0.6
					}
				]
			},
			"minecraft:behavior.move_indoors": {
				priority: 4,
				speed_multiplier: 0.8
			},
			"minecraft:behavior.restrict_open_door": {
				priority: 5
			},
			"minecraft:behavior.open_door": {
				priority: 6,
				close_door_after: true
			},
			"minecraft:behavior.share_items": {
				priority: 8,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 0.5,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "villager"
						}
					}
				]
			},
			"minecraft:behavior.pickup_items": {
				priority: 9,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 0.5,
				can_pickup_to_hand_or_equipment: false
			},
			"minecraft:behavior.random_stroll": {
				priority: 11,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.look_at_player": {
				priority: 12,
				look_distance: 8,
				probability: 0.02
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			become_witch: {
				add: {
					component_groups: [
						"become_witch"
					]
				}
			},
			become_zombie: {
				sequence: [
					{
						filters: {
							test: "is_difficulty",
							value: "normal"
						},
						randomize: [
							{
								weight: 50,
								add: {
									component_groups: [
										"become_zombie"
									]
								}
							},
							{
								weight: 50
							}
						]
					},
					{
						filters: {
							test: "is_difficulty",
							value: "hard"
						},
						add: {
							component_groups: [
								"become_zombie"
							]
						}
					}
				]
			},
			"minecraft:entity_spawned": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 5,
								add: {
									component_groups: [
										"baby"
									]
								}
							},
							{
								weight: 95,
								add: {
									component_groups: [
										"adult"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 5,
								add: {
									component_groups: [
										"farmer",
										"behavior_peasant"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"fisherman",
										"behavior_peasant"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"shepherd",
										"behavior_peasant"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"fletcher",
										"behavior_peasant"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"librarian",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"cartographer",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"cleric",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"armorer",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"weaponsmith",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"toolsmith",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"butcher",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"leatherworker",
										"behavior_non_peasant"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:entity_transformed": {
				sequence: [
					{
						filters: {
							test: "has_component",
							subject: "other",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							subject: "other",
							operator: "!=",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"adult"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "farmer"
						},
						add: {
							component_groups: [
								"farmer",
								"behavior_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "fisherman"
						},
						add: {
							component_groups: [
								"fisherman",
								"behavior_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "shepherd"
						},
						add: {
							component_groups: [
								"shepherd",
								"behavior_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "fletcher"
						},
						add: {
							component_groups: [
								"fletcher",
								"behavior_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "librarian"
						},
						add: {
							component_groups: [
								"librarian",
								"behavior_non_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "cartographer"
						},
						add: {
							component_groups: [
								"cartographer",
								"behavior_non_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "cleric"
						},
						add: {
							component_groups: [
								"cleric",
								"behavior_non_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "armorer"
						},
						add: {
							component_groups: [
								"armorer",
								"behavior_non_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "weaponsmith"
						},
						add: {
							component_groups: [
								"weaponsmith",
								"behavior_non_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "toolsmith"
						},
						add: {
							component_groups: [
								"toolsmith",
								"behavior_non_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "butcher"
						},
						add: {
							component_groups: [
								"butcher",
								"behavior_non_peasant"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "leatherworker"
						},
						add: {
							component_groups: [
								"leatherworker",
								"behavior_non_peasant"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				sequence: [
					{
						add: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						randomize: [
							{
								weight: 5,
								add: {
									component_groups: [
										"farmer",
										"behavior_peasant"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"fisherman",
										"behavior_peasant"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"shepherd",
										"behavior_peasant"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"fletcher",
										"behavior_peasant"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"librarian",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"cartographer",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"cleric",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"armorer",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"weaponsmith",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"toolsmith",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"butcher",
										"behavior_non_peasant"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"leatherworker",
										"behavior_non_peasant"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:spawn_farmer": {
				randomize: [
					{
						weight: 5,
						add: {
							component_groups: [
								"farmer",
								"adult",
								"behavior_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"fisherman",
								"adult",
								"behavior_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"shepherd",
								"adult",
								"behavior_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"fletcher",
								"adult",
								"behavior_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					}
				]
			},
			"minecraft:spawn_librarian": {
				randomize: [
					{
						weight: 20,
						add: {
							component_groups: [
								"librarian",
								"adult",
								"behavior_non_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						weight: 20,
						add: {
							component_groups: [
								"cartographer",
								"behavior_non_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					}
				]
			},
			"minecraft:spawn_cleric": {
				add: {
					component_groups: [
						"cleric",
						"adult",
						"behavior_non_peasant"
					]
				},
				remove: {
					component_groups: [
						"baby"
					]
				}
			},
			"minecraft:spawn_armorer": {
				randomize: [
					{
						weight: 6,
						add: {
							component_groups: [
								"armorer",
								"adult",
								"behavior_non_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						weight: 6,
						add: {
							component_groups: [
								"weaponsmith",
								"adult",
								"behavior_non_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						weight: 6,
						add: {
							component_groups: [
								"toolsmith",
								"adult",
								"behavior_non_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					}
				]
			},
			"minecraft:spawn_butcher": {
				randomize: [
					{
						weight: 10,
						add: {
							component_groups: [
								"butcher",
								"adult",
								"behavior_non_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						weight: 10,
						add: {
							component_groups: [
								"leatherworker",
								"adult",
								"behavior_non_peasant"
							]
						},
						remove: {
							component_groups: [
								"baby"
							]
						}
					}
				]
			},
			"minecraft:ageable_grow_up": {
				sequence: [
					{
						remove: {
							component_groups: [
								"baby"
							]
						},
						add: {
							component_groups: [
								"adult"
							]
						}
					}
				]
			},
			"minecraft:become_cleric": {
				add: {
					component_groups: [
						"cleric",
						"adult",
						"behavior_non_peasant"
					]
				},
				remove: {
					component_groups: [
						"baby"
					]
				}
			},
			"minecraft:start_celebrating": {
				add: {
					component_groups: [
						"minecraft:celebrate"
					]
				}
			},
			"minecraft:stop_celebrating": {
				remove: {
					component_groups: [
						"minecraft:celebrate"
					]
				}
			}
		}
	}
},
	"minecraft:villager_v2": {
	format_version: "1.19.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:villager_v2",
			is_spawnable: true,
			is_summonable: false,
			is_experimental: false
		},
		component_groups: {
			"minecraft:celebrate": {
				"minecraft:behavior.celebrate_survive": {
					priority: 5,
					fireworks_interval: {
						range_min: 2,
						range_max: 7
					},
					duration: 30,
					on_celebration_end_event: {
						event: "minecraft:stop_celebrating",
						target: "self"
					}
				},
				"minecraft:behavior.move_outdoors": {
					priority: 2,
					speed_multiplier: 0.8,
					timeout_cooldown: 8
				}
			},
			trade_resupply_component_group: {
				"minecraft:trade_resupply": {
				}
			},
			become_witch: {
				"minecraft:transformation": {
					into: "minecraft:witch",
					delay: 0.5
				}
			},
			become_zombie: {
				"minecraft:transformation": {
					into: "minecraft:zombie_villager_v2",
					keep_level: true
				}
			},
			work_schedule: {
				"minecraft:scheduler": {
					min_delay_secs: 0,
					max_delay_secs: 10,
					scheduled_events: [
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 0
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 8000
									}
								]
							},
							event: "minecraft:schedule_work_pro_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 8000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 10000
									}
								]
							},
							event: "minecraft:schedule_gather_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 10000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 11000
									}
								]
							},
							event: "minecraft:schedule_work_pro_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 11000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 12000
									}
								]
							},
							event: "minecraft:schedule_home_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 12000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 24000
									}
								]
							},
							event: "minecraft:schedule_bed_villager"
						}
					]
				}
			},
			basic_schedule: {
				"minecraft:scheduler": {
					min_delay_secs: 0,
					max_delay_secs: 10,
					scheduled_events: [
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 0
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 8000
									}
								]
							},
							event: "minecraft:schedule_wander_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 8000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 10000
									}
								]
							},
							event: "minecraft:schedule_gather_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 10000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 11000
									}
								]
							},
							event: "minecraft:schedule_wander_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 11000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 12000
									}
								]
							},
							event: "minecraft:schedule_home_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 12000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 24000
									}
								]
							},
							event: "minecraft:schedule_bed_villager"
						}
					]
				}
			},
			child_schedule: {
				"minecraft:scheduler": {
					min_delay_secs: 0,
					max_delay_secs: 10,
					scheduled_events: [
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 0
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 11000
									}
								]
							},
							event: "minecraft:schedule_play_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 11000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 12000
									}
								]
							},
							event: "minecraft:schedule_home_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 12000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 24000
									}
								]
							},
							event: "minecraft:schedule_bed_villager"
						}
					]
				}
			},
			jobless_schedule: {
				"minecraft:scheduler": {
					min_delay_secs: 0,
					max_delay_secs: 10,
					scheduled_events: [
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 2000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 13000
									}
								]
							},
							event: "minecraft:schedule_wander_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 13000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 14000
									}
								]
							},
							event: "minecraft:schedule_home_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 14000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 24000
									}
								]
							},
							event: "minecraft:schedule_bed_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 0
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 2000
									}
								]
							},
							event: "minecraft:schedule_bed_villager"
						}
					]
				}
			},
			fisher_schedule: {
				"minecraft:scheduler": {
					min_delay_secs: 0,
					max_delay_secs: 10,
					scheduled_events: [
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 0
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 8000
									}
								]
							},
							event: "minecraft:schedule_work_fisher"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 8000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 10000
									}
								]
							},
							event: "minecraft:schedule_gather_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 10000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 11000
									}
								]
							},
							event: "minecraft:schedule_work_fisher"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 11000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 12000
									}
								]
							},
							event: "minecraft:schedule_home_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 12000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 24000
									}
								]
							},
							event: "minecraft:schedule_bed_villager"
						}
					]
				}
			},
			librarian_schedule: {
				"minecraft:scheduler": {
					min_delay_secs: 0,
					max_delay_secs: 10,
					scheduled_events: [
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 0
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 8000
									}
								]
							},
							event: "minecraft:schedule_work_librarian"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 8000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 10000
									}
								]
							},
							event: "minecraft:schedule_gather_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 10000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 11000
									}
								]
							},
							event: "minecraft:schedule_work_librarian"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 11000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 12000
									}
								]
							},
							event: "minecraft:schedule_home_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 12000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 24000
									}
								]
							},
							event: "minecraft:schedule_bed_villager"
						}
					]
				}
			},
			farmer_schedule: {
				"minecraft:scheduler": {
					min_delay_secs: 0,
					max_delay_secs: 10,
					scheduled_events: [
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 0
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 8000
									}
								]
							},
							event: "minecraft:schedule_work_farmer"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 8000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 10000
									}
								]
							},
							event: "minecraft:schedule_gather_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 10000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 11000
									}
								]
							},
							event: "minecraft:schedule_work_farmer"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 11000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 12000
									}
								]
							},
							event: "minecraft:schedule_home_villager"
						},
						{
							filters: {
								all_of: [
									{
										test: "hourly_clock_time",
										operator: ">=",
										value: 12000
									},
									{
										test: "hourly_clock_time",
										operator: "<",
										value: 24000
									}
								]
							},
							event: "minecraft:schedule_bed_villager"
						}
					]
				}
			},
			job_specific_goals: {
				"minecraft:behavior.inspect_bookshelf": {
				},
				"minecraft:behavior.harvest_farm_block": {
				},
				"minecraft:behavior.explore_outskirts": {
				},
				"minecraft:behavior.work": {
				},
				"minecraft:behavior.work_composter": {
				},
				"minecraft:behavior.mingle": {
				},
				"minecraft:behavior.sleep": {
				}
			},
			work_schedule_villager: {
				"minecraft:behavior.work": {
					priority: 7,
					active_time: 250,
					speed_multiplier: 0.5,
					goal_cooldown: 200,
					sound_delay_min: 100,
					sound_delay_max: 200,
					can_work_in_rain: false,
					work_in_rain_tolerance: 100,
					on_arrival: {
						event: "minecraft:resupply_trades",
						target: "self"
					}
				}
			},
			work_schedule_fisher: {
				"minecraft:behavior.work": {
					priority: 7,
					active_time: 250,
					speed_multiplier: 0.5,
					goal_cooldown: 200,
					sound_delay_min: 100,
					sound_delay_max: 200,
					can_work_in_rain: false,
					work_in_rain_tolerance: 100,
					on_arrival: {
						event: "minecraft:resupply_trades",
						target: "self"
					}
				}
			},
			work_schedule_farmer: {
				"minecraft:shareables": {
					items: [
						{
							item: "minecraft:bread",
							want_amount: 3,
							surplus_amount: 6,
							stored_in_inventory: true
						},
						{
							item: "minecraft:carrot",
							want_amount: 60,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:potato",
							want_amount: 60,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:beetroot",
							want_amount: 60,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:wheat_seeds",
							want_amount: 64,
							surplus_amount: 64,
							stored_in_inventory: true,
							pickup_only: true
						},
						{
							item: "minecraft:beetroot_seeds",
							want_amount: 64,
							surplus_amount: 64,
							stored_in_inventory: true,
							pickup_only: true
						},
						{
							item: "minecraft:bone_meal",
							want_amount: 64,
							surplus_amount: 64,
							stored_in_inventory: true
						},
						{
							item: "minecraft:wheat",
							want_amount: 45,
							surplus_amount: 18,
							craft_into: "minecraft:bread",
							stored_in_inventory: true
						}
					]
				},
				"minecraft:behavior.work_composter": {
					priority: 9,
					active_time: 250,
					speed_multiplier: 0.5,
					goal_cooldown: 200,
					can_work_in_rain: false,
					work_in_rain_tolerance: 100,
					on_arrival: {
						event: "minecraft:resupply_trades",
						target: "self"
					}
				},
				"minecraft:behavior.harvest_farm_block": {
					priority: 7
				},
				"minecraft:behavior.fertilize_farm_block": {
					priority: 8
				}
			},
			work_schedule_librarian: {
				"minecraft:behavior.work": {
					priority: 7,
					active_time: 250,
					speed_multiplier: 0.5,
					goal_cooldown: 200,
					sound_delay_min: 100,
					sound_delay_max: 200,
					can_work_in_rain: false,
					work_in_rain_tolerance: 100,
					on_arrival: {
						event: "minecraft:resupply_trades",
						target: "self"
					}
				},
				"minecraft:behavior.inspect_bookshelf": {
					priority: 8,
					speed_multiplier: 0.6,
					search_range: 4,
					search_height: 3,
					goal_radius: 0.8,
					search_count: 0
				}
			},
			play_schedule_villager: {
				"minecraft:behavior.play": {
					priority: 8,
					speed_multiplier: 0.32,
					friend_types: [
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "villager"
									},
									{
										test: "is_baby",
										subject: "other",
										operator: "==",
										value: true
									}
								]
							}
						}
					]
				}
			},
			gather_schedule_villager: {
				"minecraft:behavior.mingle": {
					priority: 7,
					speed_multiplier: 0.5,
					duration: 30,
					cooldown_time: 10,
					mingle_partner_type: "minecraft:villager_v2",
					mingle_distance: 2
				}
			},
			home_schedule_villager: {
			},
			bed_schedule_villager: {
				"minecraft:behavior.sleep": {
					priority: 3,
					goal_radius: 1.5,
					speed_multiplier: 0.6,
					sleep_collider_height: 0.3,
					sleep_collider_width: 1,
					sleep_y_offset: 0.6,
					timeout_cooldown: 10
				}
			},
			wander_schedule_villager: {
				"minecraft:behavior.explore_outskirts": {
					priority: 9,
					next_xz: 5,
					next_y: 3,
					min_wait_time: 3,
					max_wait_time: 10,
					max_travel_time: 60,
					speed_multiplier: 0.6,
					explore_dist: 6,
					min_perimeter: 1,
					min_dist_from_target: 2.5,
					timer_ratio: 2,
					dist_from_boundary: [
						5,
						0,
						5
					]
				}
			},
			behavior_peasant: {
				"minecraft:shareables": {
					items: [
						{
							item: "minecraft:bread",
							want_amount: 3,
							surplus_amount: 6,
							stored_in_inventory: true
						},
						{
							item: "minecraft:carrot",
							want_amount: 60,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:potato",
							want_amount: 60,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:beetroot",
							want_amount: 60,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:wheat_seeds",
							want_amount: 64,
							surplus_amount: 64,
							stored_in_inventory: true,
							pickup_only: true
						},
						{
							item: "minecraft:beetroot_seeds",
							want_amount: 64,
							surplus_amount: 64,
							stored_in_inventory: true,
							pickup_only: true
						},
						{
							item: "minecraft:wheat",
							want_amount: 45,
							surplus_amount: 18,
							craft_into: "minecraft:bread",
							stored_in_inventory: true
						}
					]
				}
			},
			behavior_non_peasant: {
				"minecraft:shareables": {
					items: [
						{
							item: "minecraft:bread",
							want_amount: 3,
							surplus_amount: 6,
							stored_in_inventory: true
						},
						{
							item: "minecraft:carrot",
							want_amount: 12,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:potato",
							want_amount: 12,
							surplus_amount: 24,
							stored_in_inventory: true
						},
						{
							item: "minecraft:beetroot",
							want_amount: 12,
							surplus_amount: 24,
							stored_in_inventory: true
						}
					]
				}
			},
			trade_components: {
				"minecraft:behavior.trade_interest": {
				},
				"minecraft:economy_trade_table": {
				}
			},
			unskilled: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"unskilled",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			farmer: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"farmer",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 1
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.farmer",
					table: "trading/economy_trades/farmer_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "farmer",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			fisherman: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"fisherman",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 2
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.fisherman",
					table: "trading/economy_trades/fisherman_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "fisherman",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			shepherd: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"shepherd",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 3
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.shepherd",
					table: "trading/economy_trades/shepherd_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "shepherd",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			fletcher: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"fletcher",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 4
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.fletcher",
					table: "trading/economy_trades/fletcher_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "fletcher",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			librarian: {
				"minecraft:type_family": {
					family: [
						"villager",
						"librarian",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 5
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.librarian",
					table: "trading/economy_trades/librarian_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "librarian",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			cartographer: {
				"minecraft:type_family": {
					family: [
						"villager",
						"cartographer",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 6
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.cartographer",
					table: "trading/economy_trades/cartographer_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "cartographer",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			cleric: {
				"minecraft:type_family": {
					family: [
						"villager",
						"priest",
						"cleric",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 7
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.cleric",
					table: "trading/economy_trades/cleric_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "cleric",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			armorer: {
				"minecraft:type_family": {
					family: [
						"villager",
						"blacksmith",
						"armorer",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 8
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.armor",
					table: "trading/economy_trades/armorer_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "armorer",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			weaponsmith: {
				"minecraft:type_family": {
					family: [
						"villager",
						"blacksmith",
						"weaponsmith",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 9
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.weapon",
					table: "trading/economy_trades/weapon_smith_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "weaponsmith",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			toolsmith: {
				"minecraft:type_family": {
					family: [
						"villager",
						"blacksmith",
						"toolsmith",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 10
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.tool",
					table: "trading/economy_trades/tool_smith_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "toolsmith",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			butcher: {
				"minecraft:type_family": {
					family: [
						"villager",
						"artisan",
						"butcher",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 11
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.butcher",
					table: "trading/economy_trades/butcher_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "butcher",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			leatherworker: {
				"minecraft:type_family": {
					family: [
						"villager",
						"artisan",
						"leatherworker",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 12
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.leather",
					table: "trading/economy_trades/leather_worker_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "leatherworker",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			mason: {
				"minecraft:type_family": {
					family: [
						"villager",
						"artisan",
						"stone_mason",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 13
				},
				"minecraft:behavior.trade_interest": {
					priority: 5,
					within_radius: 6,
					interest_time: 45,
					remove_item_time: 1,
					carried_item_switch_time: 2,
					cooldown: 2
				},
				"minecraft:economy_trade_table": {
					display_name: "entity.villager.mason",
					table: "trading/economy_trades/stone_mason_trades.json",
					new_screen: true,
					persist_trades: true,
					cured_discount: [
						-100,
						-100
					],
					max_cured_discount: [
						-500,
						-500
					]
				},
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "inhabitant",
					preferred_profession: "mason",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: true,
					can_migrate: true,
					first_founding_reward: 5
				}
			},
			nitwit: {
				"minecraft:type_family": {
					family: [
						"villager",
						"peasant",
						"nitwit",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 14
				}
			},
			baby: {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.take_flower": {
					priority: 9
				},
				"minecraft:preferred_path": {
					max_fall_blocks: 1,
					jump_cost: 5,
					default_block_cost: 1.5,
					preferred_path_blocks: [
						{
							cost: 0,
							blocks: [
								"grass_path"
							]
						},
						{
							cost: 1,
							blocks: [
								"cobblestone",
								"stone",
								"stonebrick",
								"sandstone",
								"mossy_cobblestone",
								"stone_slab",
								"stone_slab2",
								"stone_slab3",
								"stone_slab4",
								"double_stone_slab",
								"double_stone_slab2",
								"double_stone_slab3",
								"double_stone_slab4",
								"wooden_slab",
								"double_wooden_slab",
								"planks",
								"brick_block",
								"nether_brick",
								"red_nether_brick",
								"end_bricks",
								"red_sandstone",
								"stained_glass",
								"glass",
								"glowstone",
								"prismarine",
								"emerald_block",
								"diamond_block",
								"lapis_block",
								"gold_block",
								"redstone_block",
								"purple_glazed_terracotta",
								"white_glazed_terracotta",
								"orange_glazed_terracotta",
								"magenta_glazed_terracotta",
								"light_blue_glazed_terracotta",
								"yellow_glazed_terracotta",
								"lime_glazed_terracotta",
								"pink_glazed_terracotta",
								"gray_glazed_terracotta",
								"silver_glazed_terracotta",
								"cyan_glazed_terracotta",
								"blue_glazed_terracotta",
								"brown_glazed_terracotta",
								"green_glazed_terracotta",
								"red_glazed_terracotta",
								"black_glazed_terracotta"
							]
						},
						{
							cost: 50,
							blocks: [
								"bed",
								"lectern",
								"composter",
								"grindstone",
								"blast_furnace",
								"smoker",
								"fletching_table",
								"cartography_table",
								"brewing_stand",
								"smithing_table",
								"cauldron",
								"barrel",
								"loom",
								"stonecutter"
							]
						}
					]
				}
			},
			make_and_receive_love: {
				"minecraft:behavior.make_love": {
					priority: 5
				},
				"minecraft:behavior.receive_love": {
					priority: 6
				}
			},
			adult: {
				"minecraft:preferred_path": {
					max_fall_blocks: 1,
					jump_cost: 20,
					default_block_cost: 3,
					preferred_path_blocks: [
						{
							cost: 0,
							blocks: [
								"grass_path"
							]
						},
						{
							cost: 1,
							blocks: [
								"cobblestone",
								"stone",
								"stonebrick",
								"sandstone",
								"mossy_cobblestone",
								"stone_slab",
								"stone_slab2",
								"stone_slab3",
								"stone_slab4",
								"double_stone_slab",
								"double_stone_slab2",
								"double_stone_slab3",
								"double_stone_slab4",
								"wooden_slab",
								"double_wooden_slab",
								"planks",
								"brick_block",
								"nether_brick",
								"red_nether_brick",
								"end_bricks",
								"red_sandstone",
								"stained_glass",
								"glass",
								"glowstone",
								"prismarine",
								"emerald_block",
								"diamond_block",
								"lapis_block",
								"gold_block",
								"redstone_block",
								"purple_glazed_terracotta",
								"white_glazed_terracotta",
								"orange_glazed_terracotta",
								"magenta_glazed_terracotta",
								"light_blue_glazed_terracotta",
								"yellow_glazed_terracotta",
								"lime_glazed_terracotta",
								"pink_glazed_terracotta",
								"gray_glazed_terracotta",
								"silver_glazed_terracotta",
								"cyan_glazed_terracotta",
								"blue_glazed_terracotta",
								"brown_glazed_terracotta",
								"green_glazed_terracotta",
								"red_glazed_terracotta",
								"black_glazed_terracotta"
							]
						},
						{
							cost: 50,
							blocks: [
								"bed",
								"lectern",
								"composter",
								"grindstone",
								"blast_furnace",
								"smoker",
								"fletching_table",
								"cartography_table",
								"brewing_stand",
								"smithing_table",
								"cauldron",
								"barrel",
								"loom",
								"stonecutter"
							]
						}
					]
				}
			},
			villager_skin_0: {
				"minecraft:skin_id": {
					value: 0
				}
			},
			villager_skin_1: {
				"minecraft:skin_id": {
					value: 1
				}
			},
			villager_skin_2: {
				"minecraft:skin_id": {
					value: 2
				}
			},
			villager_skin_3: {
				"minecraft:skin_id": {
					value: 3
				}
			},
			villager_skin_4: {
				"minecraft:skin_id": {
					value: 4
				}
			},
			villager_skin_5: {
				"minecraft:skin_id": {
					value: 5
				}
			},
			desert_villager: {
				"minecraft:mark_variant": {
					value: 1
				}
			},
			jungle_villager: {
				"minecraft:mark_variant": {
					value: 2
				}
			},
			savanna_villager: {
				"minecraft:mark_variant": {
					value: 3
				}
			},
			snow_villager: {
				"minecraft:mark_variant": {
					value: 4
				}
			},
			swamp_villager: {
				"minecraft:mark_variant": {
					value: 5
				}
			},
			taiga_villager: {
				"minecraft:mark_variant": {
					value: 6
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"villager",
					"mob"
				]
			},
			"minecraft:mark_variant": {
				value: 0
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:hide": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:nameable": {
			},
			"minecraft:movement": {
				value: 0.5
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				can_pass_doors: true,
				can_open_doors: true,
				avoid_water: true
			},
			"minecraft:follow_range": {
				value: 128
			},
			"minecraft:annotation.open_door": {
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:inventory": {
				inventory_size: 8,
				"private": true
			},
			"minecraft:dweller": {
				dwelling_type: "village",
				dweller_role: "inhabitant",
				update_interval_base: 60,
				update_interval_variant: 40,
				can_find_poi: true,
				can_migrate: true,
				first_founding_reward: 5
			},
			"minecraft:damage_sensor": {
				triggers: [
					{
						on_damage: {
							filters: [
								{
									test: "is_family",
									subject: "other",
									value: "lightning"
								},
								{
									test: "is_difficulty",
									operator: "!=",
									value: "peaceful"
								}
							],
							event: "become_witch"
						},
						deals_damage: false
					},
					{
						on_damage: {
							filters: {
								any_of: [
									{
										test: "is_family",
										subject: "other",
										value: "zombie"
									},
									{
										test: "is_family",
										subject: "other",
										value: "husk"
									}
								],
								all_of: [
									{
										test: "has_damage",
										value: "fatal"
									}
								]
							},
							event: "become_zombie"
						}
					}
				]
			},
			"minecraft:persistent": {
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.hide": {
				priority: 0,
				speed_multiplier: 0.8,
				poi_type: "bed",
				duration: 30
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.trade_with_player": {
				priority: 2
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 4,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "zombie"
								},
								{
									test: "is_family",
									subject: "other",
									value: "zombie_villager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "illager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "vex"
								},
								{
									test: "is_family",
									subject: "other",
									value: "zoglin"
								}
							]
						},
						max_dist: 8,
						walk_speed_multiplier: 0.6,
						sprint_speed_multiplier: 0.6
					}
				]
			},
			"minecraft:behavior.pickup_items": {
				priority: 4,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 0.5,
				can_pickup_to_hand_or_equipment: false
			},
			"minecraft:behavior.move_indoors": {
				priority: 6,
				speed_multiplier: 0.8,
				timeout_cooldown: 8
			},
			"minecraft:behavior.look_at_trading_player": {
				priority: 7
			},
			"minecraft:behavior.look_at_player": {
				priority: 9,
				look_distance: 8,
				probability: 0.02
			},
			"minecraft:behavior.share_items": {
				priority: 10,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 0.5,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "villager"
						}
					}
				]
			},
			"minecraft:behavior.move_towards_dwelling_restriction": {
				priority: 11,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.random_stroll": {
				priority: 11,
				speed_multiplier: 0.6
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			}
		},
		events: {
			become_witch: {
				add: {
					component_groups: [
						"become_witch"
					]
				}
			},
			become_zombie: {
				sequence: [
					{
						filters: {
							test: "is_difficulty",
							value: "normal"
						},
						randomize: [
							{
								weight: 50,
								add: {
									component_groups: [
										"become_zombie"
									]
								}
							},
							{
								weight: 50
							}
						]
					},
					{
						filters: {
							test: "is_difficulty",
							value: "hard"
						},
						add: {
							component_groups: [
								"become_zombie"
							]
						}
					}
				]
			},
			"minecraft:entity_spawned": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:skin_id"
						},
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_0"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_1"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_2"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_3"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_4"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_5"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 5,
								add: {
									component_groups: [
										"baby",
										"child_schedule"
									]
								}
							},
							{
								weight: 95,
								sequence: [
									{
										add: {
											component_groups: [
												"adult",
												"make_and_receive_love"
											]
										}
									},
									{
										randomize: [
											{
												weight: 1,
												add: {
													component_groups: [
														"farmer",
														"behavior_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"fisherman",
														"behavior_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"shepherd",
														"behavior_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"fletcher",
														"behavior_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"librarian",
														"behavior_non_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"cartographer",
														"behavior_non_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"cleric",
														"behavior_non_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"armorer",
														"behavior_non_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"weaponsmith",
														"behavior_non_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"toolsmith",
														"behavior_non_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"butcher",
														"behavior_non_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"leatherworker",
														"behavior_non_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"mason",
														"behavior_non_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 1,
												add: {
													component_groups: [
														"nitwit",
														"behavior_peasant",
														"jobless_schedule"
													]
												}
											}
										]
									}
								]
							}
						]
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "desert"
								},
								{
									test: "has_biome_tag",
									value: "mesa"
								}
							]
						},
						add: {
							component_groups: [
								"desert_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "jungle"
						},
						add: {
							component_groups: [
								"jungle_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "savanna"
						},
						add: {
							component_groups: [
								"savanna_villager"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									all_of: [
										{
											test: "has_biome_tag",
											value: "cold"
										},
										{
											test: "has_biome_tag",
											operator: "!=",
											value: "ocean"
										}
									]
								},
								{
									test: "has_biome_tag",
									value: "frozen"
								}
							]
						},
						add: {
							component_groups: [
								"snow_villager"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "swamp"
								},
								{
									test: "has_biome_tag",
									value: "mangrove_swamp"
								}
							]
						},
						add: {
							component_groups: [
								"swamp_villager"
							]
						}
					},
					{
						filters: {
							all_of: [
								{
									any_of: [
										{
											test: "has_biome_tag",
											value: "taiga"
										},
										{
											test: "has_biome_tag",
											value: "extreme_hills"
										}
									]
								},
								{
									test: "has_biome_tag",
									operator: "!=",
									value: "cold"
								}
							]
						},
						add: {
							component_groups: [
								"taiga_villager"
							]
						}
					}
				]
			},
			"minecraft:spawn_from_village": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 5,
								add: {
									component_groups: [
										"baby",
										"child_schedule"
									]
								}
							},
							{
								weight: 95,
								add: {
									component_groups: [
										"adult",
										"make_and_receive_love"
									]
								},
								sequence: [
									{
										randomize: [
											{
												weight: 90,
												add: {
													component_groups: [
														"unskilled",
														"behavior_peasant",
														"basic_schedule"
													]
												}
											},
											{
												weight: 10,
												add: {
													component_groups: [
														"nitwit",
														"behavior_peasant",
														"jobless_schedule"
													]
												}
											}
										]
									}
								]
							}
						]
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:skin_id"
						},
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_0"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_1"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_2"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_3"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_4"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_5"
									]
								}
							}
						]
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "desert"
								},
								{
									test: "has_biome_tag",
									value: "mesa"
								}
							]
						},
						add: {
							component_groups: [
								"desert_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "jungle"
						},
						add: {
							component_groups: [
								"jungle_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "savanna"
						},
						add: {
							component_groups: [
								"savanna_villager"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									all_of: [
										{
											test: "has_biome_tag",
											value: "cold"
										},
										{
											test: "has_biome_tag",
											operator: "!=",
											value: "ocean"
										}
									]
								},
								{
									test: "has_biome_tag",
									value: "frozen"
								}
							]
						},
						add: {
							component_groups: [
								"snow_villager"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "swamp"
								},
								{
									test: "has_biome_tag",
									value: "mangrove_swamp"
								}
							]
						},
						add: {
							component_groups: [
								"swamp_villager"
							]
						}
					},
					{
						filters: {
							all_of: [
								{
									any_of: [
										{
											test: "has_biome_tag",
											value: "taiga"
										},
										{
											test: "has_biome_tag",
											value: "extreme_hills"
										}
									]
								},
								{
									test: "has_biome_tag",
									operator: "!=",
									value: "cold"
								}
							]
						},
						add: {
							component_groups: [
								"taiga_villager"
							]
						}
					}
				]
			},
			"minecraft:entity_transformed": {
				sequence: [
					{
						filters: {
							test: "has_component",
							subject: "other",
							operator: "==",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							subject: "other",
							operator: "!=",
							value: "minecraft:is_baby"
						},
						sequence: [
							{
								add: {
									component_groups: [
										"adult",
										"make_and_receive_love"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "farmer"
								},
								add: {
									component_groups: [
										"farmer",
										"behavior_peasant",
										"farmer_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "fisherman"
								},
								add: {
									component_groups: [
										"fisherman",
										"behavior_peasant",
										"fisher_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "shepherd"
								},
								add: {
									component_groups: [
										"shepherd",
										"behavior_peasant",
										"work_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "fletcher"
								},
								add: {
									component_groups: [
										"fletcher",
										"behavior_peasant",
										"work_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "librarian"
								},
								add: {
									component_groups: [
										"librarian",
										"behavior_non_peasant",
										"librarian_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "cartographer"
								},
								add: {
									component_groups: [
										"cartographer",
										"behavior_non_peasant",
										"work_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "cleric"
								},
								add: {
									component_groups: [
										"cleric",
										"behavior_non_peasant",
										"work_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "armorer"
								},
								add: {
									component_groups: [
										"armorer",
										"behavior_non_peasant",
										"work_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "weaponsmith"
								},
								add: {
									component_groups: [
										"weaponsmith",
										"behavior_non_peasant",
										"work_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "toolsmith"
								},
								add: {
									component_groups: [
										"toolsmith",
										"behavior_non_peasant",
										"work_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "butcher"
								},
								add: {
									component_groups: [
										"butcher",
										"behavior_non_peasant",
										"work_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "leatherworker"
								},
								add: {
									component_groups: [
										"leatherworker",
										"behavior_non_peasant",
										"work_schedule"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "stone_mason"
								},
								add: {
									component_groups: [
										"mason",
										"behavior_non_peasant",
										"work_schedule"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							operator: "==",
							value: "zombie_villager"
						},
						sequence: [
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 0
								},
								add: {
									component_groups: [
										"villager_skin_0"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 1
								},
								add: {
									component_groups: [
										"villager_skin_1"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 2
								},
								add: {
									component_groups: [
										"villager_skin_2"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 3
								},
								add: {
									component_groups: [
										"villager_skin_3"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 4
								},
								add: {
									component_groups: [
										"villager_skin_4"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 5
								},
								add: {
									component_groups: [
										"villager_skin_5"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 1
								},
								add: {
									component_groups: [
										"desert_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 2
								},
								add: {
									component_groups: [
										"jungle_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 3
								},
								add: {
									component_groups: [
										"savanna_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 4
								},
								add: {
									component_groups: [
										"snow_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 5
								},
								add: {
									component_groups: [
										"swamp_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 6
								},
								add: {
									component_groups: [
										"taiga_villager"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							operator: "==",
							value: "villager"
						},
						sequence: [
							{
								randomize: [
									{
										weight: 1,
										add: {
											component_groups: [
												"villager_skin_0"
											]
										}
									},
									{
										weight: 1,
										add: {
											component_groups: [
												"villager_skin_1"
											]
										}
									},
									{
										weight: 1,
										add: {
											component_groups: [
												"villager_skin_2"
											]
										}
									},
									{
										weight: 1,
										add: {
											component_groups: [
												"villager_skin_3"
											]
										}
									},
									{
										weight: 1,
										add: {
											component_groups: [
												"villager_skin_4"
											]
										}
									},
									{
										weight: 1,
										add: {
											component_groups: [
												"villager_skin_5"
											]
										}
									}
								]
							},
							{
								filters: {
									any_of: [
										{
											test: "has_biome_tag",
											value: "desert"
										},
										{
											test: "has_biome_tag",
											value: "mesa"
										}
									]
								},
								add: {
									component_groups: [
										"desert_villager"
									]
								}
							},
							{
								filters: {
									test: "has_biome_tag",
									value: "jungle"
								},
								add: {
									component_groups: [
										"jungle_villager"
									]
								}
							},
							{
								filters: {
									test: "has_biome_tag",
									value: "savanna"
								},
								add: {
									component_groups: [
										"savanna_villager"
									]
								}
							},
							{
								filters: {
									any_of: [
										{
											all_of: [
												{
													test: "has_biome_tag",
													value: "cold"
												},
												{
													test: "has_biome_tag",
													operator: "!=",
													value: "ocean"
												}
											]
										},
										{
											test: "has_biome_tag",
											value: "frozen"
										}
									]
								},
								add: {
									component_groups: [
										"snow_villager"
									]
								}
							},
							{
								filters: {
									any_of: [
										{
											test: "has_biome_tag",
											value: "swamp"
										},
										{
											test: "has_biome_tag",
											value: "mangrove_swamp"
										}
									]
								},
								add: {
									component_groups: [
										"swamp_villager"
									]
								}
							},
							{
								filters: {
									all_of: [
										{
											any_of: [
												{
													test: "has_biome_tag",
													value: "taiga"
												},
												{
													test: "has_biome_tag",
													value: "extreme_hills"
												}
											]
										},
										{
											test: "has_biome_tag",
											operator: "!=",
											value: "cold"
										}
									]
								},
								add: {
									component_groups: [
										"taiga_villager"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:entity_born": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:skin_id"
						},
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_0"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_1"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_2"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_3"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_4"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_5"
									]
								}
							}
						]
					},
					{
						add: {
							component_groups: [
								"baby",
								"unskilled",
								"child_schedule"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "desert"
						},
						add: {
							component_groups: [
								"desert_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "jungle"
						},
						add: {
							component_groups: [
								"jungle_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "savanna"
						},
						add: {
							component_groups: [
								"savanna_villager"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "cold"
								},
								{
									test: "has_biome_tag",
									value: "frozen"
								}
							]
						},
						add: {
							component_groups: [
								"snow_villager"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "swamp"
								},
								{
									test: "has_biome_tag",
									value: "mangrove_swamp"
								}
							]
						},
						add: {
							component_groups: [
								"swamp_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "taiga"
						},
						add: {
							component_groups: [
								"taiga_villager"
							]
						}
					}
				]
			},
			"minecraft:spawn_farmer": {
				randomize: [
					{
						weight: 5,
						add: {
							component_groups: [
								"farmer",
								"adult",
								"make_and_receive_love",
								"behavior_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"fisherman",
								"adult",
								"make_and_receive_love",
								"behavior_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"shepherd",
								"adult",
								"make_and_receive_love",
								"behavior_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"fletcher",
								"adult",
								"make_and_receive_love",
								"behavior_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"mason",
								"adult",
								"make_and_receive_love",
								"behavior_non_peasant",
								"work_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					}
				]
			},
			"minecraft:spawn_librarian": {
				randomize: [
					{
						weight: 20,
						add: {
							component_groups: [
								"librarian",
								"adult",
								"make_and_receive_love",
								"behavior_non_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					},
					{
						weight: 20,
						add: {
							component_groups: [
								"cartographer",
								"behavior_non_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					}
				]
			},
			"minecraft:spawn_cleric": {
				add: {
					component_groups: [
						"cleric",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"basic_schedule"
					]
				},
				remove: {
					component_groups: [
						"baby",
						"child_schedule"
					]
				}
			},
			"minecraft:spawn_armorer": {
				randomize: [
					{
						weight: 6,
						add: {
							component_groups: [
								"armorer",
								"adult",
								"make_and_receive_love",
								"behavior_non_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					},
					{
						weight: 6,
						add: {
							component_groups: [
								"weaponsmith",
								"adult",
								"make_and_receive_love",
								"behavior_non_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					},
					{
						weight: 6,
						add: {
							component_groups: [
								"toolsmith",
								"adult",
								"make_and_receive_love",
								"behavior_non_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					}
				]
			},
			"minecraft:spawn_butcher": {
				randomize: [
					{
						weight: 10,
						add: {
							component_groups: [
								"butcher",
								"adult",
								"make_and_receive_love",
								"behavior_non_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					},
					{
						weight: 10,
						add: {
							component_groups: [
								"leatherworker",
								"adult",
								"make_and_receive_love",
								"behavior_non_peasant",
								"basic_schedule"
							]
						},
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						}
					}
				]
			},
			"minecraft:ageable_grow_up": {
				randomize: [
					{
						weight: 10,
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						},
						add: {
							component_groups: [
								"adult",
								"make_and_receive_love",
								"nitwit",
								"behavior_peasant",
								"jobless_schedule"
							]
						}
					},
					{
						weight: 90,
						remove: {
							component_groups: [
								"baby",
								"child_schedule"
							]
						},
						add: {
							component_groups: [
								"adult",
								"make_and_receive_love",
								"unskilled",
								"behavior_peasant",
								"basic_schedule"
							]
						}
					}
				]
			},
			"minecraft:become_unskilled": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"adult",
						"make_and_receive_love",
						"unskilled",
						"behavior_peasant",
						"basic_schedule"
					]
				}
			},
			"minecraft:become_cleric": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"cleric",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:become_farmer": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"farmer",
						"adult",
						"make_and_receive_love",
						"behavior_peasant",
						"farmer_schedule"
					]
				}
			},
			"minecraft:become_fisherman": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"fisherman",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"fisher_schedule"
					]
				}
			},
			"minecraft:become_fletcher": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"fletcher",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:become_librarian": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"librarian",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"librarian_schedule"
					]
				}
			},
			"minecraft:become_cartographer": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"cartographer",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:become_armorer": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"armorer",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:become_weaponsmith": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"weaponsmith",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:become_toolsmith": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"toolsmith",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:become_butcher": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"butcher",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:become_leatherworker": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"leatherworker",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:become_sheperd": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"shepherd",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:become_mason": {
				remove: {
					component_groups: [
						"baby",
						"child_schedule",
						"job_specific_goals",
						"trade_components"
					]
				},
				add: {
					component_groups: [
						"mason",
						"adult",
						"make_and_receive_love",
						"behavior_non_peasant",
						"work_schedule"
					]
				}
			},
			"minecraft:schedule_wander_villager": {
				remove: {
					component_groups: [
						"home_schedule_villager",
						"bed_schedule_villager",
						"wander_schedule_villager",
						"job_specific_goals",
						"play_schedule_villager",
						"trade_resupply_component_group"
					]
				},
				add: {
					component_groups: [
						"make_and_receive_love",
						"wander_schedule_villager"
					]
				}
			},
			"minecraft:schedule_gather_villager": {
				remove: {
					component_groups: [
						"bed_schedule_villager",
						"wander_schedule_villager",
						"home_schedule_villager",
						"job_specific_goals",
						"play_schedule_villager",
						"trade_resupply_component_group"
					]
				},
				add: {
					component_groups: [
						"make_and_receive_love",
						"gather_schedule_villager"
					]
				}
			},
			"minecraft:schedule_home_villager": {
				remove: {
					component_groups: [
						"bed_schedule_villager",
						"wander_schedule_villager",
						"gather_schedule_villager",
						"job_specific_goals",
						"play_schedule_villager",
						"trade_resupply_component_group"
					]
				},
				add: {
					component_groups: [
						"make_and_receive_love",
						"home_schedule_villager"
					]
				}
			},
			"minecraft:schedule_bed_villager": {
				remove: {
					component_groups: [
						"make_and_receive_love",
						"home_schedule_villager",
						"gather_schedule_villager",
						"wander_schedule_villager",
						"job_specific_goals",
						"play_schedule_villager",
						"trade_resupply_component_group"
					]
				},
				add: {
					component_groups: [
						"bed_schedule_villager"
					]
				}
			},
			"minecraft:schedule_play_villager": {
				remove: {
					component_groups: [
						"home_schedule_villager",
						"gather_schedule_villager",
						"wander_schedule_villager",
						"bed_schedule_villager",
						"job_specific_goals",
						"trade_resupply_component_group"
					]
				},
				add: {
					component_groups: [
						"play_schedule_villager"
					]
				}
			},
			"minecraft:schedule_work_pro_villager": {
				remove: {
					component_groups: [
						"home_schedule_villager",
						"gather_schedule_villager",
						"wander_schedule_villager",
						"bed_schedule_villager",
						"play_schedule_villager"
					]
				},
				add: {
					component_groups: [
						"make_and_receive_love",
						"work_schedule_villager"
					]
				}
			},
			"minecraft:schedule_work_farmer": {
				remove: {
					component_groups: [
						"home_schedule_villager",
						"gather_schedule_villager",
						"wander_schedule_villager",
						"bed_schedule_villager",
						"job_specific_goals",
						"play_schedule_villager"
					]
				},
				add: {
					component_groups: [
						"make_and_receive_love",
						"work_schedule_farmer"
					]
				}
			},
			"minecraft:schedule_work_fisher": {
				remove: {
					component_groups: [
						"home_schedule_villager",
						"gather_schedule_villager",
						"wander_schedule_villager",
						"bed_schedule_villager",
						"job_specific_goals",
						"play_schedule_villager"
					]
				},
				add: {
					component_groups: [
						"make_and_receive_love",
						"work_schedule_fisher"
					]
				}
			},
			"minecraft:schedule_work_librarian": {
				remove: {
					component_groups: [
						"home_schedule_villager",
						"gather_schedule_villager",
						"wander_schedule_villager",
						"bed_schedule_villager",
						"job_specific_goals",
						"play_schedule_villager"
					]
				},
				add: {
					component_groups: [
						"make_and_receive_love",
						"work_schedule_librarian"
					]
				}
			},
			"minecraft:resupply_trades": {
				add: {
					component_groups: [
						"trade_resupply_component_group"
					]
				}
			},
			"minecraft:start_celebrating": {
				add: {
					component_groups: [
						"minecraft:celebrate"
					]
				}
			},
			"minecraft:stop_celebrating": {
				remove: {
					component_groups: [
						"minecraft:celebrate"
					]
				}
			}
		}
	}
},
	"minecraft:vindicator": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:vindicator",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:celebrate": {
				"minecraft:behavior.celebrate": {
					priority: 5,
					celebration_sound: "celebrate",
					sound_interval: {
						range_min: 2,
						range_max: 7
					},
					jump_interval: {
						range_min: 1,
						range_max: 3.5
					},
					duration: 30,
					on_celebration_end_event: {
						event: "minecraft:stop_celebrating",
						target: "self"
					}
				}
			},
			"minecraft:vindicator_aggro": {
				"minecraft:angry": {
					duration: -1,
					broadcast_anger: false,
					calm_event: {
						event: "minecraft:stop_aggro",
						target: "self"
					}
				}
			},
			"minecraft:vindicator_johnny": {
				"minecraft:behavior.nearest_attackable_target": {
					priority: 2,
					must_see: true,
					within_radius: 12,
					must_see_forget_duration: 40,
					entity_types: [
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										operator: "!=",
										value: "illager"
									}
								]
							},
							max_dist: 12
						}
					]
				}
			},
			"minecraft:default_targeting": {
				"minecraft:behavior.nearest_attackable_target": {
					priority: 2,
					must_see: true,
					within_radius: 12,
					must_see_forget_duration: 40,
					entity_types: [
						{
							filters: {
								any_of: [
									{
										test: "is_family",
										subject: "other",
										value: "player"
									},
									{
										test: "is_family",
										subject: "other",
										value: "snowgolem"
									},
									{
										test: "is_family",
										subject: "other",
										value: "irongolem"
									},
									{
										test: "is_family",
										subject: "other",
										value: "wandering_trader"
									}
								]
							},
							max_dist: 12
						},
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "villager"
									},
									{
										test: "has_component",
										subject: "other",
										operator: "!=",
										value: "minecraft:is_baby"
									}
								]
							},
							max_dist: 12
						}
					]
				}
			},
			"minecraft:raid_configuration": {
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "hostile",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: false,
					can_migrate: true,
					first_founding_reward: 0
				},
				"minecraft:behavior.move_to_village": {
					priority: 4,
					speed_multiplier: 1,
					goal_radius: 2
				},
				"minecraft:loot": {
					table: "loot_tables/entities/vindicator_raid.json"
				},
				"minecraft:navigation.walk": {
					can_path_over_water: true,
					can_pass_doors: true,
					can_break_doors: true
				},
				"minecraft:annotation.break_door": {
					break_time: 30,
					min_difficulty: "normal"
				},
				"minecraft:ambient_sound_interval": {
					value: 2,
					range: 4,
					event_name: "ambient.in.raid"
				}
			},
			"minecraft:raid_persistence": {
				"minecraft:persistent": {
				}
			},
			"minecraft:raid_despawn": {
				"minecraft:despawn": {
					despawn_from_distance: {
					}
				}
			},
			"minecraft:illager_squad_captain": {
				"minecraft:is_illager_captain": {
				},
				"minecraft:variant": {
					value: 1
				},
				"minecraft:equipment": {
					table: "loot_tables/entities/vindicator_captain_equipment.json",
					slot_drop_chance: [
						{
							slot: "slot.armor.chest",
							drop_chance: 1
						}
					]
				},
				"minecraft:damage_sensor": {
					triggers: {
						on_damage: {
							filters: {
								all_of: [
									{
										test: "has_damage",
										value: "fatal"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									}
								]
							},
							event: "minecraft:gain_bad_omen",
							target: "other"
						}
					}
				}
			},
			"minecraft:patrol_captain": {
				"minecraft:is_illager_captain": {
				},
				"minecraft:variant": {
					value: 1
				},
				"minecraft:equipment": {
					table: "loot_tables/entities/vindicator_captain_equipment.json",
					slot_drop_chance: [
						{
							slot: "slot.armor.chest",
							drop_chance: 1
						}
					]
				},
				"minecraft:damage_sensor": {
					triggers: {
						on_damage: {
							filters: {
								all_of: [
									{
										test: "has_damage",
										value: "fatal"
									},
									{
										test: "is_family",
										subject: "other",
										value: "player"
									}
								]
							},
							event: "minecraft:gain_bad_omen",
							target: "other"
						}
					}
				},
				"minecraft:behavior.move_to_random_block": {
					priority: 5,
					speed_multiplier: 0.55,
					within_radius: 8,
					block_distance: 512
				}
			},
			"minecraft:patrol_follower": {
				"minecraft:behavior.follow_target_captain": {
					priority: 5,
					speed_multiplier: 0.8,
					within_radius: 64,
					follow_distance: 5
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? (query.is_baby ? 12 : 5) + (Math.die_roll(query.equipment_count,1,3)) : 0"
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:nameable": {
				default_trigger: {
					event: "minecraft:stop_johnny",
					target: "self"
				},
				name_actions: [
					{
						name_filter: "Johnny",
						on_named: {
							event: "minecraft:start_johnny",
							target: "self"
						}
					}
				]
			},
			"minecraft:type_family": {
				family: [
					"vindicator",
					"monster",
					"illager",
					"mob"
				]
			},
			"minecraft:variant": {
				value: 0
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:health": {
				value: 24,
				max: 24
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:attack": {
				damage: 8
			},
			"minecraft:movement": {
				value: 0.35
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:follow_range": {
				value: 64
			},
			"minecraft:loot": {
				table: "loot_tables/entities/vindication_illager.json"
			},
			"minecraft:equipment": {
				table: "loot_tables/entities/vindicator_gear.json"
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.melee_attack": {
				priority: 3
			},
			"minecraft:behavior.random_stroll": {
				priority: 9,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 10,
				look_distance: 8,
				probability: 0.02
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:on_target_acquired": {
				event: "minecraft:become_aggro",
				target: "self"
			},
			"minecraft:on_target_escape": {
				event: "minecraft:stop_aggro",
				target: "self"
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			}
		},
		events: {
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"minecraft:default_targeting"
					]
				}
			},
			"minecraft:spawn_as_patrol_follower": {
				add: {
					component_groups: [
						"minecraft:default_targeting",
						"minecraft:patrol_follower"
					]
				}
			},
			"minecraft:become_aggro": {
				add: {
					component_groups: [
						"minecraft:vindicator_aggro"
					]
				}
			},
			"minecraft:stop_aggro": {
				remove: {
					component_groups: [
						"minecraft:vindicator_aggro"
					]
				}
			},
			"minecraft:start_johnny": {
				add: {
					component_groups: [
						"minecraft:vindicator_johnny"
					]
				}
			},
			"minecraft:stop_johnny": {
				remove: {
					component_groups: [
						"minecraft:vindicator_johnny"
					]
				},
				add: {
					component_groups: [
						"minecraft:default_targeting"
					]
				}
			},
			"minecraft:spawn_for_raid": {
				add: {
					component_groups: [
						"minecraft:default_targeting",
						"minecraft:raid_configuration",
						"minecraft:raid_persistence",
						"minecraft:raid_despawn"
					]
				}
			},
			"minecraft:spawn_as_illager_captain": {
				add: {
					component_groups: [
						"minecraft:default_targeting",
						"minecraft:illager_squad_captain"
					]
				}
			},
			"minecraft:promote_to_illager_captain": {
				add: {
					component_groups: [
						"minecraft:default_targeting",
						"minecraft:illager_squad_captain"
					]
				},
				remove: {
					component_groups: [
						"minecraft:patrol_follower"
					]
				}
			},
			"minecraft:promote_to_patrol_captain": {
				add: {
					component_groups: [
						"minecraft:default_targeting",
						"minecraft:patrol_captain"
					]
				},
				remove: {
					component_groups: [
						"minecraft:patrol_follower"
					]
				}
			},
			"minecraft:start_celebrating": {
				sequence: [
					{
						add: {
							component_groups: [
								"minecraft:celebrate"
							]
						}
					},
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			},
			"minecraft:stop_celebrating": {
				remove: {
					component_groups: [
						"minecraft:celebrate"
					]
				}
			},
			"minecraft:raid_expired": {
				sequence: [
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:wandering_trader": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:wandering_trader",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			managed: {
				"minecraft:managed_wandering_trader": {
				}
			},
			despawning: {
				"minecraft:type_family": {
					family: [
						"wandering_trader",
						"wandering_trader_despawning",
						"mob"
					]
				}
			},
			"minecraft:scared": {
				"minecraft:angry": {
					duration: 5,
					broadcastAnger: true,
					broadcastRange: 10,
					broadcast_targets: [
						"llama",
						"trader_llama"
					],
					broadcast_filters: {
						test: "is_leashed_to",
						subject: "other",
						value: true
					},
					calm_event: {
						event: "minecraft:become_calm",
						target: "self"
					}
				}
			}
		},
		components: {
			"minecraft:type_family": {
				family: [
					"wandering_trader",
					"mob"
				]
			},
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:timer": {
				looping: false,
				random_time_choices: [
					{
						weight: 50,
						value: 2400
					},
					{
						weight: 50,
						value: 3600
					}
				],
				time_down_event: {
					event: "minecraft:start_despawn",
					target: "self"
				}
			},
			"minecraft:spawn_entity": {
				entities: [
					{
						min_wait_time: 0,
						max_wait_time: 0,
						spawn_entity: "trader_llama",
						spawn_event: "minecraft:from_wandering_trader",
						single_use: true,
						num_to_spawn: 2,
						should_leash: true
					}
				]
			},
			"minecraft:economy_trade_table": {
				display_name: "entity.wandering_trader.name",
				table: "trading/economy_trades/wandering_trader_trades.json",
				new_screen: true
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:movement": {
				value: 0.5
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				can_pass_doors: true,
				can_open_doors: false,
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:home": {
				restriction_radius: 16
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:despawn": {
				remove_child_entities: true,
				filters: {
					all_of: [
						{
							any_of: [
								{
									test: "is_family",
									subject: "self",
									value: "wandering_trader_despawning"
								},
								{
									test: "has_trade_supply",
									subject: "self",
									value: false
								}
							]
						},
						{
							test: "distance_to_nearest_player",
							operator: ">",
							value: 24
						}
					]
				}
			},
			"minecraft:damage_sensor": {
				triggers: [
					{
						cause: "entity_attack",
						deals_damage: true,
						on_damage: {
							event: "minecraft:become_scared"
						}
					},
					{
						cause: "projectile",
						deals_damage: true,
						on_damage: {
							event: "minecraft:become_scared"
						}
					},
					{
						cause: "magic",
						deals_damage: true,
						on_damage: {
							event: "minecraft:become_scared"
						}
					}
				]
			},
			"minecraft:behavior.trade_with_player": {
				priority: 1
			},
			"minecraft:behavior.trade_interest": {
				priority: 3,
				within_radius: 6,
				interest_time: 45,
				remove_item_time: 1,
				carried_item_switch_time: 2,
				cooldown: 2
			},
			"minecraft:behavior.look_at_trading_player": {
				priority: 4
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.drink_potion": {
				priority: 1,
				speed_modifier: -0.2,
				potions: [
					{
						id: 7,
						chance: 1,
						filters: {
							all_of: [
								{
									any_of: [
										{
											test: "hourly_clock_time",
											operator: ">=",
											value: 18000
										},
										{
											test: "hourly_clock_time",
											operator: "<",
											value: 12000
										}
									]
								},
								{
									test: "is_visible",
									subject: "self",
									value: true
								},
								{
									any_of: [
										{
											test: "is_avoiding_mobs",
											subject: "self",
											value: true
										},
										{
											all_of: [
												{
													test: "has_component",
													subject: "self",
													value: "minecraft:angry"
												},
												{
													test: "is_family",
													subject: "target",
													operator: "!=",
													value: "player"
												}
											]
										}
									]
								}
							]
						}
					},
					{
						id: 8,
						chance: 1,
						filters: {
							all_of: [
								{
									test: "hourly_clock_time",
									operator: ">=",
									value: 12000
								},
								{
									test: "hourly_clock_time",
									operator: "<",
									value: 18000
								},
								{
									test: "is_visible",
									subject: "self",
									value: true
								},
								{
									any_of: [
										{
											test: "is_avoiding_mobs",
											subject: "self",
											value: true
										},
										{
											test: "has_component",
											subject: "self",
											value: "minecraft:angry"
										}
									]
								}
							]
						}
					}
				]
			},
			"minecraft:behavior.avoid_mob_type": {
				priority: 2,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "zombie"
								},
								{
									test: "is_family",
									subject: "other",
									value: "zombie_villager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "zombie_pigman"
								},
								{
									test: "is_family",
									subject: "other",
									value: "illager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "vex"
								},
								{
									test: "is_family",
									subject: "other",
									value: "zoglin"
								}
							]
						},
						walk_speed_multiplier: 0.6,
						sprint_speed_multiplier: 0.6
					}
				],
				max_dist: 6
			},
			"minecraft:behavior.drink_milk": {
				priority: 5,
				filters: {
					all_of: [
						{
							test: "is_daytime",
							value: true
						},
						{
							test: "is_visible",
							subject: "self",
							value: false
						},
						{
							test: "is_avoiding_mobs",
							subject: "self",
							value: false
						}
					]
				}
			},
			"minecraft:behavior.move_towards_home_restriction": {
				priority: 6,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 0.6
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 8,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:nameable": {
			}
		},
		events: {
			"minecraft:scheduled": {
				add: {
					component_groups: [
						"managed"
					]
				}
			},
			"minecraft:start_despawn": {
				add: {
					component_groups: [
						"despawning"
					]
				}
			},
			"minecraft:become_scared": {
				add: {
					component_groups: [
						"minecraft:scared"
					]
				}
			},
			"minecraft:become_calm": {
				remove: {
					component_groups: [
						"minecraft:scared"
					]
				}
			}
		}
	}
},
	"minecraft:warden": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:warden",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			emerging: {
				"minecraft:behavior.emerge": {
					duration: 7,
					on_done: {
						event: "minecraft:emerged",
						target: "self"
					}
				}
			},
			pushable: {
				"minecraft:pushable": {
					is_pushable: true,
					is_pushable_by_piston: true
				}
			}
		},
		components: {
			"minecraft:movement_sound_distance_offset": {
				value: 0.55
			},
			"minecraft:experience_reward": {
				on_bred: "Math.Random(1,7)",
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:attack": {
				damage: 30
			},
			"minecraft:vibration_listener": {
			},
			"minecraft:vibration_damper": {
			},
			"minecraft:suspect_tracking": {
			},
			"minecraft:anger_level": {
				max_anger: 150,
				angry_threshold: 80,
				remove_targets_below_angry_threshold: true,
				angry_boost: 20,
				anger_decrement_interval: 1,
				default_annoyingness: 35,
				default_projectile_annoyingness: 10,
				on_increase_sounds: [
					{
						sound: "listening_angry",
						condition: "query.anger_level(this) >= 40"
					},
					{
						sound: "listening",
						condition: "query.anger_level(this) >= 0"
					}
				],
				nuisance_filter: {
					all_of: [
						{
							test: "is_family",
							subject: "other",
							operator: "not",
							value: "warden"
						},
						{
							test: "is_family",
							subject: "other",
							operator: "not",
							value: "inanimate"
						}
					]
				}
			},
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"warden",
					"monster",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				can_path_over_lava: true,
				avoid_damage_blocks: true
			},
			"minecraft:preferred_path": {
				max_fall_blocks: 20
			},
			"minecraft:ambient_sound_interval": {
				value: 2,
				range: 4,
				event_name: "ambient",
				event_names: [
					{
						event_name: "angry",
						condition: "query.anger_level(this) >= 80"
					},
					{
						event_name: "agitated",
						condition: "query.anger_level(this) >= 40"
					}
				]
			},
			"minecraft:heartbeat": {
				interval: "2.0 - math.clamp(query.anger_level / 80 * 1.5, 0, 1.5)"
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:collision_box": {
				width: 0.9,
				height: 2.9
			},
			"minecraft:health": {
				value: 500,
				max: 500
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:knockback_resistance": {
				value: 1
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.dig": {
				priority: 1,
				duration: 5.5,
				idle_time: 60,
				vibration_is_disturbance: true,
				suspicion_is_disturbance: true,
				digs_in_daylight: false,
				on_start: {
					event: "on_digging_event",
					target: "self"
				}
			},
			"minecraft:behavior.roar": {
				priority: 2,
				duration: 4.2
			},
			"minecraft:behavior.sonic_boom": {
				priority: 3,
				duration: 3,
				speed_multiplier: 1.2,
				attack_damage: 10,
				attack_range_horizontal: 15,
				attack_range_vertical: 20,
				attack_cooldown: 2,
				knockback_vertical_strength: 0.5,
				knockback_horizontal_strength: 2.5,
				knockback_height_cap: 0.5,
				duration_until_attack_sound: 1.7,
				charge_sound: "sonic_charge",
				attack_sound: "sonic_boom"
			},
			"minecraft:behavior.melee_attack": {
				priority: 4,
				speed_multiplier: 1.2,
				melee_fov: 360
			},
			"minecraft:behavior.investigate_suspicious_location": {
				priority: 5,
				speed_multiplier: 0.7
			},
			"minecraft:behavior.sniff": {
				priority: 6,
				duration: 4.16,
				sniffing_radius: 24,
				suspicion_radius_horizontal: 6,
				suspicion_radius_vertical: 20,
				cooldown_range: [
					5,
					10
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 9,
				speed_multiplier: 0.5
			},
			"minecraft:behavior.random_look_around": {
				priority: 11
			},
			"minecraft:physics": {
			},
			"minecraft:mob_effect": {
				effect_range: 20,
				effect_time: 13,
				mob_effect: "darkness",
				cooldown_time: 6,
				entity_filter: {
					all_of: [
						{
							test: "is_family",
							subject: "other",
							value: "player"
						},
						{
							operator: "not",
							test: "has_ability",
							subject: "other",
							value: "invulnerable"
						}
					]
				}
			},
			"minecraft:follow_range": 30,
			"minecraft:fire_immune": {
			},
			"minecraft:nameable": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/warden.json"
			}
		},
		events: {
			"minecraft:spawn_emerging": {
				add: {
					component_groups: [
						"emerging"
					]
				}
			},
			"minecraft:emerged": {
				add: {
					component_groups: [
						"pushable"
					]
				},
				remove: {
					component_groups: [
						"emerging"
					]
				}
			},
			"minecraft:entity_spawned": {
				add: {
					component_groups: [
						"pushable"
					]
				}
			},
			on_digging_event: {
				remove: {
					component_groups: [
						"pushable"
					]
				}
			}
		}
	}
},
	"minecraft:witch": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:witch",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:celebrate": {
				"minecraft:behavior.celebrate": {
					priority: 5,
					celebration_sound: "celebrate",
					sound_interval: {
						range_min: 2,
						range_max: 7
					},
					jump_interval: {
						range_min: 1,
						range_max: 3.5
					},
					duration: 30,
					on_celebration_end_event: {
						event: "minecraft:stop_celebrating",
						target: "self"
					}
				}
			},
			"minecraft:raid_configuration": {
				"minecraft:dweller": {
					dwelling_type: "village",
					dweller_role: "hostile",
					update_interval_base: 60,
					update_interval_variant: 40,
					can_find_poi: false,
					can_migrate: true,
					first_founding_reward: 0
				},
				"minecraft:behavior.move_to_village": {
					priority: 3,
					speed_multiplier: 1.2,
					goal_radius: 2
				},
				"minecraft:ambient_sound_interval": {
					value: 2,
					range: 4,
					event_name: "ambient.in.raid"
				}
			},
			"minecraft:raid_persistence": {
				"minecraft:persistent": {
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? (query.is_baby ? 12 : 5) + (Math.die_roll(query.equipment_count,1,3)) : 0"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:nameable": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/witch.json"
			},
			"minecraft:health": {
				value: 26,
				max: 26
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: false
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 1
			},
			"minecraft:behavior.ranged_attack": {
				priority: 2,
				speed_multiplier: 1,
				attack_interval_min: 3,
				attack_interval_max: 3,
				attack_radius: 10
			},
			"minecraft:behavior.random_stroll": {
				priority: 4,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 5,
				look_distance: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 5,
				look_distance: 8
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "snowgolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								}
							]
						},
						max_dist: 10
					}
				],
				must_reach: true
			},
			"minecraft:type_family": {
				family: [
					"witch",
					"monster",
					"mob"
				]
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:follow_range": {
				value: 64
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:spawn_for_raid": {
				add: {
					component_groups: [
						"minecraft:raid_configuration",
						"minecraft:raid_persistence"
					]
				}
			},
			"minecraft:start_celebrating": {
				sequence: [
					{
						add: {
							component_groups: [
								"minecraft:celebrate"
							]
						}
					},
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			},
			"minecraft:stop_celebrating": {
				remove: {
					component_groups: [
						"minecraft:celebrate"
					]
				}
			},
			"minecraft:raid_expired": {
				sequence: [
					{
						filters: {
							test: "has_nametag",
							value: false
						},
						remove: {
							component_groups: [
								"minecraft:raid_persistence"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:wither": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:wither",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "50"
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:boss": {
				should_darken_sky: true,
				hud_range: 55
			},
			"minecraft:damage_sensor": {
				triggers: {
					on_damage: {
						filters: {
							test: "is_family",
							subject: "other",
							value: "undead"
						}
					},
					deals_damage: false
				}
			},
			"minecraft:health": {
				value: 600,
				max: 600
			},
			"minecraft:collision_box": {
				width: 1,
				height: 3
			},
			"minecraft:fire_immune": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/wither_boss.json"
			},
			"minecraft:nameable": {
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_water: true
			},
			"minecraft:movement.basic": {
				max_turn: 180
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:can_fly": {
			},
			"minecraft:behavior.float": {
				priority: 1
			},
			"minecraft:behavior.wither_random_attack_pos_goal": {
				priority: 3
			},
			"minecraft:behavior.wither_target_highest_damage": {
				priority: 1
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 2
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 3,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 70
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "undead"
								},
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "inanimate"
								}
							]
						},
						max_dist: 70
					}
				],
				must_see: true
			},
			"minecraft:behavior.random_stroll": {
				priority: 5,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_target": {
				priority: 5
			},
			"minecraft:behavior.look_at_player": {
				priority: 6,
				look_distance: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 7
			},
			"minecraft:type_family": {
				family: [
					"wither",
					"skeleton",
					"monster",
					"undead",
					"mob"
				]
			},
			"minecraft:persistent": {
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
			}
		}
	}
},
	"minecraft:wither_skeleton": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:wither_skeleton",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:experience_reward": {
				on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
			},
			"minecraft:nameable": {
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:equip_item": {
			},
			"minecraft:collision_box": {
				width: 0.72,
				height: 2.01
			},
			"minecraft:attack": {
				damage: 4,
				effect_name: "wither",
				effect_duration: 10
			},
			"minecraft:loot": {
				table: "loot_tables/entities/wither_skeleton.json"
			},
			"minecraft:equipment": {
				table: "loot_tables/entities/wither_skeleton_gear.json"
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				avoid_sun: true,
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:netherite_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:stone_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:wooden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:wooden_shovel",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:stone_shovel",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:golden_shovel",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:iron_shovel",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:diamond_shovel",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:netherite_shovel",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:wooden_pickaxe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:stone_pickaxe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:golden_pickaxe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:iron_pickaxe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:diamond_pickaxe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:netherite_pickaxe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:wooden_axe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:stone_axe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:golden_axe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:iron_axe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:diamond_axe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:netherite_axe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:wooden_hoe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:stone_hoe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:golden_hoe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:iron_hoe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:diamond_hoe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:netherite_hoe",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:netherite_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					}
				]
			},
			"minecraft:scale": {
				value: 1.2
			},
			"minecraft:fire_immune": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				reselect_targets: true,
				must_see: true,
				entity_types: [
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "player"
						},
						max_dist: 16
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "piglin"
								},
								{
									test: "is_difficulty",
									operator: "!=",
									value: "peaceful"
								}
							]
						},
						max_dist: 16
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "irongolem"
						},
						max_dist: 16
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "baby_turtle"
								},
								{
									test: "in_water",
									subject: "other",
									operator: "!=",
									value: true
								}
							]
						},
						max_dist: 16
					}
				]
			},
			"minecraft:behavior.equip_item": {
				priority: 3
			},
			"minecraft:behavior.melee_attack": {
				priority: 4,
				track_target: true,
				speed_multiplier: 1.25
			},
			"minecraft:behavior.pickup_items": {
				priority: 5,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1,
				pickup_based_on_chance: true
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 8
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:type_family": {
				family: [
					"wither",
					"monster",
					"undead",
					"skeleton",
					"mob"
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
			}
		}
	}
},
	"minecraft:wither_skull": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:wither_skull",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		component_groups: {
			"minecraft:exploding": {
				"minecraft:explode": {
					fuse_length: 0,
					fuse_lit: true,
					power: 1,
					causes_fire: false,
					destroy_affected_by_griefing: true
				}
			}
		},
		components: {
			"minecraft:collision_box": {
				width: 0.15,
				height: 0.15
			},
			"minecraft:projectile": {
				on_hit: {
					definition_event: {
						affect_projectile: true,
						event_trigger: {
							event: "minecraft:explode",
							target: "self"
						}
					},
					mob_effect: {
						effect: "wither",
						durationeasy: 0,
						durationnormal: 200,
						durationhard: 800,
						amplifier: 1
					}
				},
				power: 1.2,
				gravity: 0,
				uncertainty_base: 7.5,
				uncertainty_multiplier: 1,
				shoot_sound: "bow",
				hit_sound: "bow.hit",
				anchor: 1,
				offset: [
					0,
					-0.1,
					0
				],
				inertia: 1,
				liquid_inertia: 1,
				shoot_target: false
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		},
		events: {
			"minecraft:explode": {
				add: {
					component_groups: [
						"minecraft:exploding"
					]
				}
			}
		}
	}
},
	"minecraft:wither_skull_dangerous": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:wither_skull_dangerous",
			is_spawnable: false,
			is_summonable: false,
			is_experimental: false
		},
		component_groups: {
			"minecraft:exploding": {
				"minecraft:explode": {
					fuse_length: 0,
					fuse_lit: true,
					power: 1,
					causes_fire: false,
					max_resistance: 4,
					destroy_affected_by_griefing: true
				}
			}
		},
		components: {
			"minecraft:collision_box": {
				width: 0.15,
				height: 0.15
			},
			"minecraft:projectile": {
				on_hit: {
					definition_event: {
						affect_projectile: true,
						event_trigger: {
							event: "minecraft:explode",
							target: "self"
						}
					},
					mob_effect: {
						effect: "wither",
						durationeasy: 0,
						durationnormal: 200,
						durationhard: 800,
						amplifier: 1
					}
				},
				power: 0.6,
				gravity: 0,
				uncertainty_base: 7.5,
				uncertainty_multiplier: 1,
				shoot_sound: "bow",
				hit_sound: "bow.hit",
				anchor: 1,
				offset: [
					0,
					-0.1,
					0
				],
				is_dangerous: true,
				inertia: 1,
				liquid_inertia: 1,
				shoot_target: false,
				reflect_on_hurt: true
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 7,
					use_motion_prediction_hints: true
				}
			}
		},
		events: {
			"minecraft:explode": {
				add: {
					component_groups: [
						"minecraft:exploding"
					]
				}
			}
		}
	}
},
	"minecraft:wolf": {
	format_version: "1.18.10",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:wolf",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:wolf_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:ageable": {
					duration: 1200,
					feed_items: [
						"chicken",
						"cooked_chicken",
						"beef",
						"cooked_beef",
						"muttonRaw",
						"muttonCooked",
						"porkchop",
						"cooked_porkchop",
						"rabbit",
						"cooked_rabbit",
						"rotten_flesh"
					],
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				}
			},
			"minecraft:wolf_adult": {
				"minecraft:experience_reward": {
					on_bred: "Math.Random(1,7)",
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/wolf.json"
				},
				"minecraft:breedable": {
					require_tame: true,
					require_full_health: true,
					breeds_with: {
						mate_type: "minecraft:wolf",
						baby_type: "minecraft:wolf",
						breed_event: {
							event: "minecraft:entity_born",
							target: "baby"
						}
					},
					breed_items: [
						"chicken",
						"cooked_chicken",
						"beef",
						"cooked_beef",
						"muttonRaw",
						"muttonCooked",
						"porkchop",
						"cooked_porkchop",
						"rabbit",
						"cooked_rabbit",
						"rotten_flesh"
					]
				}
			},
			"minecraft:wolf_angry": {
				"minecraft:angry": {
					duration: 25,
					broadcast_anger: true,
					broadcast_range: 20,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				},
				"minecraft:on_target_acquired": {
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							0.675,
							-0.1
						]
					}
				}
			},
			"minecraft:wolf_wild": {
				"minecraft:behavior.avoid_mob_type": {
					priority: 3,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "llama"
							},
							max_dist: 24,
							walk_speed_multiplier: 1.5,
							sprint_speed_multiplier: 1.5
						}
					],
					probability_per_strength: 0.14
				},
				"minecraft:tameable": {
					probability: 0.33,
					tame_items: "bone",
					tame_event: {
						event: "minecraft:on_tame",
						target: "self"
					}
				},
				"minecraft:behavior.nearest_attackable_target": {
					priority: 4,
					reselect_targets: true,
					must_see: true,
					entity_types: [
						{
							filters: {
								any_of: [
									{
										test: "is_family",
										subject: "other",
										value: "skeleton"
									},
									{
										test: "is_family",
										subject: "other",
										value: "sheep"
									},
									{
										test: "is_family",
										subject: "other",
										value: "rabbit"
									},
									{
										test: "is_family",
										subject: "other",
										value: "fox"
									}
								]
							},
							max_dist: 16
						},
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "baby_turtle"
									},
									{
										test: "in_water",
										subject: "other",
										operator: "!=",
										value: true
									}
								]
							},
							max_dist: 16
						},
						{
							filters: {
								all_of: [
									{
										test: "is_family",
										subject: "other",
										value: "skeleton"
									},
									{
										test: "is_underwater",
										subject: "other",
										operator: "!=",
										value: true
									}
								]
							},
							max_dist: 16
						}
					]
				},
				"minecraft:on_target_acquired": {
					event: "minecraft:become_angry",
					target: "self"
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							0.675,
							-0.1
						]
					}
				}
			},
			"minecraft:wolf_tame": {
				"minecraft:is_tamed": {
				},
				"minecraft:health": {
					value: 20,
					max: 20
				},
				"minecraft:color": {
					value: 14
				},
				"minecraft:behavior.follow_owner": {
					priority: 6,
					speed_multiplier: 1,
					start_distance: 10,
					stop_distance: 2
				},
				"minecraft:attack": {
					damage: 4
				},
				"minecraft:behavior.breed": {
					priority: 2,
					speed_multiplier: 1
				},
				"minecraft:behavior.owner_hurt_by_target": {
					priority: 1
				},
				"minecraft:behavior.owner_hurt_target": {
					priority: 2
				},
				"minecraft:behavior.nearest_attackable_target": {
					priority: 5,
					must_see: true,
					entity_types: [
						{
							filters: {
								test: "is_family",
								subject: "other",
								value: "skeleton"
							},
							max_dist: 16
						}
					]
				},
				"minecraft:sittable": {
				},
				"minecraft:is_dyeable": {
					interact_text: "action.interact.dye"
				}
			}
		},
		components: {
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10,
				on_leash: {
					event: "minecraft:on_leash",
					target: "self"
				},
				on_unleash: {
					event: "minecraft:on_unleash",
					target: "self"
				}
			},
			"minecraft:balloonable": {
				mass: 0.8
			},
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"wolf",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 0.8
			},
			"minecraft:health": {
				value: 8,
				max: 8
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.3
			},
			"minecraft:navigation.walk": {
				can_path_over_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:attack": {
				damage: 3
			},
			"minecraft:healable": {
				items: [
					{
						item: "porkchop",
						heal_amount: 3
					},
					{
						item: "cooked_porkchop",
						heal_amount: 8
					},
					{
						item: "fish",
						heal_amount: 2
					},
					{
						item: "salmon",
						heal_amount: 2
					},
					{
						item: "clownfish",
						heal_amount: 1
					},
					{
						item: "pufferfish",
						heal_amount: 1
					},
					{
						item: "cooked_fish",
						heal_amount: 5
					},
					{
						item: "cooked_salmon",
						heal_amount: 6
					},
					{
						item: "beef",
						heal_amount: 3
					},
					{
						item: "cooked_beef",
						heal_amount: 8
					},
					{
						item: "chicken",
						heal_amount: 2
					},
					{
						item: "cooked_chicken",
						heal_amount: 6
					},
					{
						item: "muttonRaw",
						heal_amount: 2
					},
					{
						item: "muttonCooked",
						heal_amount: 6
					},
					{
						item: "rotten_flesh",
						heal_amount: 4
					},
					{
						item: "rabbit",
						heal_amount: 3
					},
					{
						item: "cooked_rabbit",
						heal_amount: 5
					},
					{
						item: "rabbit_stew",
						heal_amount: 10
					}
				]
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.float": {
				priority: 0
			},
			"minecraft:behavior.mount_pathing": {
				priority: 1,
				speed_multiplier: 1.25,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.stay_while_sitting": {
				priority: 3
			},
			"minecraft:behavior.leap_at_target": {
				priority: 4,
				target_dist: 0.4
			},
			"minecraft:behavior.melee_attack": {
				priority: 5
			},
			"minecraft:behavior.random_stroll": {
				priority: 8,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 6,
				target_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.beg": {
				priority: 9,
				look_distance: 8,
				look_time: [
					2,
					4
				],
				items: [
					"bone",
					"porkchop",
					"cooked_porkchop",
					"chicken",
					"cooked_chicken",
					"beef",
					"cooked_beef",
					"rotten_flesh",
					"muttonraw",
					"muttoncooked",
					"rabbit",
					"cooked_rabbit"
				]
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 3
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 9,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:wolf_adult",
								"minecraft:wolf_wild"
							]
						}
					},
					{
						weight: 1,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:wolf_baby",
								"minecraft:wolf_wild"
							]
						}
					}
				]
			},
			"minecraft:entity_born": {
				remove: {
				},
				add: {
					component_groups: [
						"minecraft:wolf_baby",
						"minecraft:wolf_tame"
					]
				}
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:wolf_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:wolf_adult"
					]
				}
			},
			"minecraft:ageable_set_baby": {
				remove: {
					component_groups: [
						"minecraft:wolf_adult"
					]
				},
				add: {
					component_groups: [
						"minecraft:wolf_baby"
					]
				}
			},
			"minecraft:on_tame": {
				remove: {
					component_groups: [
						"minecraft:wolf_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:wolf_tame"
					]
				}
			},
			"minecraft:become_angry": {
				remove: {
					component_groups: [
						"minecraft:wolf_wild"
					]
				},
				add: {
					component_groups: [
						"minecraft:wolf_angry"
					]
				}
			},
			"minecraft:on_calm": {
				remove: {
					component_groups: [
						"minecraft:wolf_angry"
					]
				},
				add: {
					component_groups: [
						"minecraft:wolf_wild"
					]
				}
			}
		}
	}
},
	"minecraft:xp_bottle": {
	format_version: "1.12.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:xp_bottle",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:projectile": {
				on_hit: {
					grant_xp: {
						minXP: 3,
						maxXP: 11
					},
					remove_on_hit: {
					}
				},
				power: 0.5,
				gravity: 0.05,
				angle_offset: -20,
				hit_sound: "glass"
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 5,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:xp_orb": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:xp_orb",
			is_spawnable: false,
			is_summonable: true,
			is_experimental: false
		},
		components: {
			"minecraft:collision_box": {
				width: 0.25,
				height: 0.25
			},
			"minecraft:type_family": {
				family: [
					"inanimate"
				]
			},
			"minecraft:health": {
				value: 5,
				max: 5
			},
			"minecraft:buoyant": {
				apply_gravity: false,
				liquid_blocks: [
					"minecraft:flowing_water",
					"minecraft:water"
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
				default_values: {
					max_optimized_distance: 80,
					max_dropped_ticks: 10,
					use_motion_prediction_hints: true
				}
			}
		}
	}
},
	"minecraft:zoglin": {
	format_version: "1.18.30",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:zoglin",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			zoglin_baby: {
				"minecraft:type_family": {
					family: [
						"zoglin",
						"zoglin_baby",
						"undead",
						"mob"
					]
				},
				"minecraft:is_baby": {
				},
				"minecraft:attack": {
					damage: 0.5
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:collision_box": {
					width: 0.85,
					height: 0.85
				},
				"minecraft:custom_hit_test": {
					hitboxes: [
						{
							width: 1,
							height: 0.85,
							pivot: [
								0,
								0.5,
								0
							]
						}
					]
				}
			},
			zoglin_adult: {
				"minecraft:type_family": {
					family: [
						"zoglin",
						"zoglin_adult",
						"undead",
						"mob"
					]
				},
				"minecraft:collision_box": {
					width: 1.4,
					height: 1.4
				},
				"minecraft:custom_hit_test": {
					hitboxes: [
						{
							width: 2,
							height: 1.75,
							pivot: [
								0,
								1,
								0
							]
						}
					]
				},
				"minecraft:behavior.hurt_by_target": {
					priority: 1
				},
				"minecraft:attack": {
					damage: [
						3,
						8
					]
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:nameable": {
			},
			"minecraft:loot": {
				table: "loot_tables/entities/zoglin.json"
			},
			"minecraft:experience_reward": {
				on_bred: "Math.Random(1,7)",
				on_death: "query.last_hit_by_player ? 5 : 0"
			},
			"minecraft:health": {
				value: 40,
				max: 40
			},
			"minecraft:knockback_resistance": {
				value: 0.6
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 3,
				within_radius: 16,
				entity_types: [
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "zoglin"
								},
								{
									test: "is_family",
									subject: "other",
									operator: "!=",
									value: "creeper"
								}
							]
						},
						max_dist: 16
					}
				],
				must_see: true
			},
			"minecraft:behavior.melee_attack": {
				priority: 4,
				reach_multiplier: 2.15,
				speed_multiplier: 1.4,
				track_target: true
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:movement": {
				value: 0.25
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				can_path_over_water: false,
				avoid_water: true,
				avoid_damage_blocks: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:fire_immune": {
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:despawn": {
				filters: {
					any_of: [
						{
							all_of: [
								{
									test: "is_persistent",
									value: false
								},
								{
									test: "distance_to_nearest_player",
									operator: ">",
									value: 54
								}
							]
						},
						{
							all_of: [
								{
									test: "is_persistent",
									value: false
								},
								{
									test: "inactivity_timer",
									subject: "self",
									value: 30
								},
								{
									test: "random_chance",
									value: 800
								},
								{
									test: "distance_to_nearest_player",
									operator: ">",
									value: 32
								}
							]
						}
					]
				}
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 1
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_transformed": {
				sequence: [
					{
						filters: {
							test: "has_component",
							subject: "other",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"zoglin_baby"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							subject: "other",
							operator: "!=",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"zoglin_adult"
							]
						}
					}
				]
			},
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						add: {
							component_groups: [
								"zoglin_adult"
							]
						}
					},
					{
						weight: 5,
						add: {
							component_groups: [
								"zoglin_baby"
							]
						}
					}
				]
			},
			"minecraft:as_adult": {
				add: {
					component_groups: [
						"zoglin_adult"
					]
				}
			},
			"minecraft:as_baby": {
				add: {
					component_groups: [
						"zoglin_baby"
					]
				}
			}
		}
	}
},
	"minecraft:zombie": {
	format_version: "1.17.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:zombie",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:look_to_start_drowned_transformation": {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "is_underwater",
							subject: "self",
							operator: "==",
							value: true
						},
						event: "minecraft:start_transforming"
					}
				}
			},
			"minecraft:start_drowned_transformation": {
				"minecraft:environment_sensor": {
					triggers: {
						filters: {
							test: "is_underwater",
							subject: "self",
							operator: "==",
							value: false
						},
						event: "minecraft:stop_transforming"
					}
				},
				"minecraft:timer": {
					looping: false,
					time: 30,
					time_down_event: {
						event: "minecraft:convert_to_drowned"
					}
				}
			},
			"minecraft:convert_to_drowned": {
				"minecraft:transformation": {
					into: "minecraft:drowned<minecraft:as_adult>",
					transformation_sound: "convert_to_drowned",
					drop_equipment: true,
					delay: {
						value: 15
					}
				},
				"minecraft:is_shaking": {
				}
			},
			"minecraft:convert_to_baby_drowned": {
				"minecraft:transformation": {
					into: "minecraft:drowned<minecraft:as_baby>",
					transformation_sound: "convert_to_drowned",
					drop_equipment: true,
					delay: {
						value: 15
					}
				},
				"minecraft:is_shaking": {
				}
			},
			"minecraft:zombie_baby": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 12 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:movement": {
					value: 0.35
				}
			},
			"minecraft:zombie_adult": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:movement": {
					value: 0.23
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							1.1,
							-0.35
						],
						lock_rider_rotation: 0
					}
				},
				"minecraft:behavior.mount_pathing": {
					priority: 2,
					speed_multiplier: 1.25,
					target_dist: 0,
					track_target: true
				}
			},
			"minecraft:zombie_jockey": {
				"minecraft:behavior.find_mount": {
					priority: 1,
					within_radius: 16,
					start_delay: 15,
					max_failed_attempts: 20
				}
			},
			"minecraft:can_have_equipment": {
				"minecraft:equipment": {
					table: "loot_tables/entities/zombie_equipment.json"
				}
			},
			"minecraft:can_break_doors": {
				"minecraft:annotation.break_door": {
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:nameable": {
			},
			"minecraft:type_family": {
				family: [
					"zombie",
					"undead",
					"monster",
					"mob"
				]
			},
			"minecraft:equip_item": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:burns_in_daylight": {
			},
			"minecraft:movement.basic": {
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				can_pass_doors: true,
				can_walk: true,
				can_break_doors: true
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_air: true,
				breathes_water: true
			},
			"minecraft:attack": {
				damage: 3
			},
			"minecraft:loot": {
				table: "loot_tables/entities/zombie.json"
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:netherite_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:stone_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:wooden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					}
				]
			},
			"minecraft:environment_sensor": {
				triggers: {
					filters: {
						test: "is_underwater",
						operator: "==",
						value: true
					},
					event: "minecraft:start_transforming"
				}
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.equip_item": {
				priority: 2
			},
			"minecraft:behavior.melee_attack": {
				priority: 3
			},
			"minecraft:behavior.stomp_turtle_egg": {
				priority: 4,
				speed_multiplier: 1,
				search_range: 10,
				search_height: 2,
				goal_radius: 1.14,
				interval: 20
			},
			"minecraft:behavior.pickup_items": {
				priority: 6,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1,
				pickup_based_on_chance: true,
				can_pickup_any_item: true,
				excluded_items: [
					"minecraft:glow_ink_sac"
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				must_see: true,
				reselect_targets: true,
				within_radius: 25,
				must_see_forget_duration: 17,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "snowgolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								}
							]
						},
						max_dist: 35
					},
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "villager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "wandering_trader"
								}
							]
						},
						max_dist: 35,
						must_see: false
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "baby_turtle"
								},
								{
									test: "in_water",
									subject: "other",
									operator: "!=",
									value: true
								}
							]
						},
						max_dist: 35
					}
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				sequence: [
					{
						randomize: [
							{
								weight: 380,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:zombie_adult",
										"minecraft:can_have_equipment"
									]
								}
							},
							{
								weight: 17,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:zombie_baby",
										"minecraft:can_have_equipment"
									]
								}
							},
							{
								weight: 3,
								remove: {
								},
								add: {
									component_groups: [
										"minecraft:zombie_baby",
										"minecraft:zombie_jockey",
										"minecraft:can_have_equipment"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 10,
								add: {
									component_groups: [
										"minecraft:can_break_doors"
									]
								}
							},
							{
								weight: 90
							}
						]
					}
				]
			},
			"minecraft:as_adult": {
				add: {
					component_groups: [
						"minecraft:zombie_adult"
					]
				}
			},
			"minecraft:as_baby": {
				add: {
					component_groups: [
						"minecraft:zombie_baby"
					]
				}
			},
			"minecraft:start_transforming": {
				add: {
					component_groups: [
						"minecraft:start_drowned_transformation"
					]
				},
				remove: {
					component_groups: [
						"minecraft:look_to_start_drowned_transformation"
					]
				}
			},
			"minecraft:stop_transforming": {
				add: {
					component_groups: [
						"minecraft:look_to_start_drowned_transformation"
					]
				},
				remove: {
					component_groups: [
						"minecraft:start_drowned_transformation"
					]
				}
			},
			"minecraft:convert_to_drowned": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"minecraft:convert_to_drowned"
							]
						},
						remove: {
							component_groups: [
								"minecraft:start_drowned_transformation"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"minecraft:convert_to_baby_drowned"
							]
						},
						remove: {
							component_groups: [
								"minecraft:start_drowned_transformation"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:zombie_horse": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:zombie_horse",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:horse_baby": {
				"minecraft:is_baby": {
				},
				"minecraft:scale_by_age": {
					start_scale: 0.5,
					end_scale: 1
				},
				"minecraft:ageable": {
					duration: 1200,
					grow_up: {
						event: "minecraft:ageable_grow_up",
						target: "self"
					}
				},
				"minecraft:behavior.follow_parent": {
					priority: 4,
					speed_multiplier: 1
				}
			},
			"minecraft:horse_adult": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? Math.Random(1,3) : 0"
				},
				"minecraft:loot": {
					table: "loot_tables/entities/zombie_horse.json"
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					interact_text: "action.interact.ride.horse",
					seats: {
						position: [
							0,
							1.2,
							-0.2
						]
					}
				},
				"minecraft:behavior.mount_pathing": {
					priority: 2,
					speed_multiplier: 1.5,
					target_dist: 0,
					track_target: true
				},
				"minecraft:behavior.player_ride_tamed": {
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:type_family": {
				family: [
					"zombiehorse",
					"undead",
					"mob"
				]
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:collision_box": {
				width: 1.4,
				height: 1.6
			},
			"minecraft:health": {
				value: 15,
				max: 15
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:movement": {
				value: 0.2
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				avoid_water: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:nameable": {
			},
			"minecraft:is_tamed": {
			},
			"minecraft:horse.jump_strength": {
				value: {
					range_min: 0.4,
					range_max: 1
				}
			},
			"minecraft:leashable": {
				soft_distance: 4,
				hard_distance: 6,
				max_distance: 10
			},
			"minecraft:balloonable": {
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.panic": {
				priority: 1,
				speed_multiplier: 1.2
			},
			"minecraft:behavior.random_stroll": {
				priority: 6,
				speed_multiplier: 0.7
			},
			"minecraft:behavior.look_at_player": {
				priority: 7,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 8
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 36,
						add: {
							component_groups: [
								"minecraft:horse_adult"
							]
						}
					},
					{
						weight: 9,
						add: {
							component_groups: [
								"minecraft:horse_baby"
							]
						}
					}
				]
			},
			"minecraft:ageable_grow_up": {
				remove: {
					component_groups: [
						"minecraft:horse_baby"
					]
				},
				add: {
					component_groups: [
						"minecraft:horse_adult"
					]
				}
			}
		}
	}
},
	"minecraft:zombie_pigman": {
	format_version: "1.16.0",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:zombie_pigman",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			"minecraft:pig_zombie_baby": {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 12 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				}
			},
			"minecraft:pig_zombie_adult": {
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							1.1,
							-0.35
						],
						lock_rider_rotation: 0
					}
				},
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
				}
			},
			"minecraft:pig_zombie_angry": {
				"minecraft:angry": {
					duration: 25,
					broadcast_anger: true,
					broadcast_range: 20,
					calm_event: {
						event: "minecraft:on_calm",
						target: "self"
					}
				}
			},
			"minecraft:pig_zombie_calm": {
				"minecraft:on_target_acquired": {
					event: "minecraft:become_angry",
					target: "self"
				}
			},
			"minecraft:strider_jockey": {
				"minecraft:equipment": {
					table: "loot_tables/entities/zombified_piglin_rider_gear.json"
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:equip_item": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:nameable": {
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				can_pass_doors: true,
				can_open_doors: true,
				avoid_water: true,
				avoid_portals: true
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:fire_immune": {
			},
			"minecraft:type_family": {
				family: [
					"zombie_pigman",
					"undead",
					"monster",
					"mob"
				]
			},
			"minecraft:loot": {
				table: "loot_tables/entities/zombie_pigman.json"
			},
			"minecraft:equipment": {
				table: "loot_tables/entities/zombie_pigman_gear.json"
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:movement": {
				value: 0.23
			},
			"minecraft:attack": {
				damage: 5
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:netherite_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:iron_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:stone_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:golden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:wooden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:netherite_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					}
				]
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.mount_pathing": {
				priority: 2,
				speed_multiplier: 1.25,
				target_dist: 0,
				track_target: true
			},
			"minecraft:behavior.equip_item": {
				priority: 3
			},
			"minecraft:behavior.melee_attack": {
				priority: 4,
				speed_multiplier: 1.5
			},
			"minecraft:behavior.stomp_turtle_egg": {
				priority: 5,
				speed_multiplier: 1,
				search_range: 10,
				search_height: 2,
				goal_radius: 1.14,
				interval: 20
			},
			"minecraft:behavior.pickup_items": {
				priority: 6,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1,
				pickup_based_on_chance: true,
				can_pickup_any_item: true
			},
			"minecraft:behavior.random_stroll": {
				priority: 7,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 8,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 9
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			"minecraft:entity_transformed": {
				sequence: [
					{
						filters: {
							test: "has_component",
							subject: "other",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"minecraft:pig_zombie_baby",
								"minecraft:pig_zombie_calm"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							subject: "other",
							operator: "!=",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"minecraft:pig_zombie_adult",
								"minecraft:pig_zombie_calm"
							]
						}
					}
				]
			},
			"minecraft:entity_spawned": {
				randomize: [
					{
						weight: 95,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:pig_zombie_adult",
								"minecraft:pig_zombie_calm"
							]
						}
					},
					{
						weight: 5,
						remove: {
						},
						add: {
							component_groups: [
								"minecraft:pig_zombie_baby",
								"minecraft:pig_zombie_calm"
							]
						}
					}
				]
			},
			"minecraft:on_calm": {
				remove: {
					component_groups: [
						"minecraft:pig_zombie_angry"
					]
				},
				add: {
					component_groups: [
						"minecraft:pig_zombie_calm"
					]
				}
			},
			"minecraft:become_angry": {
				remove: {
					component_groups: [
						"minecraft:pig_zombie_calm"
					]
				},
				add: {
					component_groups: [
						"minecraft:pig_zombie_angry"
					]
				}
			},
			"minecraft:spawn_as_strider_jockey": {
				add: {
					component_groups: [
						"minecraft:strider_jockey"
					]
				}
			}
		}
	}
},
	"minecraft:zombie_villager": {
	format_version: "1.17.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:zombie_villager",
			is_spawnable: true,
			is_summonable: true,
			is_experimental: false
		},
		component_groups: {
			become_zombie_villager_v2: {
				"minecraft:transformation": {
					into: "minecraft:zombie_villager_v2",
					keep_level: false
				}
			},
			baby: {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 12 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:movement": {
					value: 0.35
				}
			},
			adult: {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:movement": {
					value: 0.23
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							1.1,
							-0.35
						]
					}
				},
				"minecraft:behavior.mount_pathing": {
					priority: 5,
					speed_multiplier: 1.25,
					target_dist: 0,
					track_target: true
				}
			},
			jockey: {
				"minecraft:behavior.find_mount": {
					priority: 1,
					within_radius: 16
				}
			},
			can_break_doors: {
				"minecraft:annotation.break_door": {
				}
			},
			from_abandoned_village: {
				"minecraft:navigation.walk": {
					is_amphibious: true,
					can_pass_doors: true,
					can_open_doors: true,
					avoid_water: true,
					avoid_sun: true
				},
				"minecraft:behavior.flee_sun": {
					priority: 4,
					speed_multiplier: 1
				}
			},
			to_villager: {
				"minecraft:transformation": {
					into: "minecraft:villager",
					begin_transform_sound: "remedy",
					transformation_sound: "unfect",
					delay: {
						value: 100,
						block_assist_chance: 0.01,
						block_radius: 4,
						block_chance: 0.3,
						block_types: [
							"minecraft:bed",
							"minecraft:iron_bars"
						]
					}
				},
				"minecraft:spell_effects": {
					add_effects: [
						{
							effect: "strength",
							duration: 100
						},
						{
							effect: "heal",
							duration: 100
						}
					],
					remove_effects: "weakness"
				},
				"minecraft:is_shaking": {
				}
			},
			farmer: {
				"minecraft:type_family": {
					family: [
						"farmer",
						"zombie",
						"zombie_villager",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			fisherman: {
				"minecraft:type_family": {
					family: [
						"fisherman",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			shepherd: {
				"minecraft:type_family": {
					family: [
						"shepherd",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			fletcher: {
				"minecraft:type_family": {
					family: [
						"fletcher",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			librarian: {
				"minecraft:type_family": {
					family: [
						"librarian",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 1
				}
			},
			cartographer: {
				"minecraft:type_family": {
					family: [
						"cartographer",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 1
				}
			},
			cleric: {
				"minecraft:type_family": {
					family: [
						"cleric",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 2
				}
			},
			armorer: {
				"minecraft:type_family": {
					family: [
						"armorer",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 3
				}
			},
			weaponsmith: {
				"minecraft:type_family": {
					family: [
						"weaponsmith",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 3
				}
			},
			toolsmith: {
				"minecraft:type_family": {
					family: [
						"toolsmith",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 3
				}
			},
			butcher: {
				"minecraft:type_family": {
					family: [
						"butcher",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 4
				}
			},
			leatherworker: {
				"minecraft:type_family": {
					family: [
						"leatherworker",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 4
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				can_pass_doors: true,
				can_break_doors: true,
				avoid_sun: false
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:loot": {
				table: "loot_tables/entities/zombie.json"
			},
			"minecraft:equip_item": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:burns_in_daylight": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:attack": {
				damage: 3
			},
			"minecraft:nameable": {
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:netherite_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:stone_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:wooden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					}
				]
			},
			"minecraft:interact": {
				interactions: {
					on_interact: {
						filters: {
							all_of: [
								{
									test: "has_equipment",
									domain: "hand",
									subject: "other",
									value: "golden_apple"
								},
								{
									test: "has_component",
									subject: "self",
									value: "minecraft:effect.weakness"
								}
							]
						},
						event: "villager_converted",
						target: "self"
					},
					use_item: true,
					interact_text: "action.interact.cure"
				}
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.melee_attack": {
				priority: 6
			},
			"minecraft:behavior.equip_item": {
				priority: 3
			},
			"minecraft:behavior.stomp_turtle_egg": {
				priority: 4,
				speed_multiplier: 1,
				search_range: 10,
				search_height: 2,
				goal_radius: 1.14,
				interval: 20
			},
			"minecraft:behavior.pickup_items": {
				priority: 8,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1,
				pickup_based_on_chance: true,
				can_pickup_any_item: true,
				excluded_items: [
					"minecraft:glow_ink_sac"
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 9,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 10,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 11
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				must_see: true,
				reselect_targets: true,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "snowgolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								}
							]
						},
						max_dist: 35
					},
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "villager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "wandering_trader"
								}
							]
						},
						max_dist: 35,
						must_see: false
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "baby_turtle"
								},
								{
									test: "in_water",
									subject: "other",
									operator: "!=",
									value: true
								}
							]
						},
						max_dist: 35
					}
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			},
			"minecraft:conditional_bandwidth_optimization": {
			}
		},
		events: {
			villager_converted: {
				remove: {
				},
				add: {
					component_groups: [
						"to_villager"
					]
				}
			},
			"minecraft:entity_spawned": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 9500,
								remove: {
								},
								add: {
									component_groups: [
										"adult"
									]
								}
							},
							{
								weight: 425,
								remove: {
								},
								add: {
									component_groups: [
										"baby"
									]
								}
							},
							{
								weight: 75,
								remove: {
								},
								add: {
									component_groups: [
										"baby",
										"jockey"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 5,
								add: {
									component_groups: [
										"farmer"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"fisherman"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"shepherd"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"fletcher"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"librarian"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"cartographer"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"cleric"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"armorer"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"weaponsmith"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"toolsmith"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"butcher"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"leatherworker"
									]
								}
							}
						]
					},
					{
						randomize: [
							{
								weight: 10,
								add: {
									component_groups: [
										"can_break_doors"
									]
								}
							},
							{
								weight: 90
							}
						]
					}
				]
			},
			"minecraft:entity_transformed": {
				filters: {
					test: "has_component",
					operator: "!=",
					value: "minecraft:variant"
				},
				sequence: [
					{
						filters: {
							test: "has_component",
							subject: "other",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"baby"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							subject: "other",
							operator: "!=",
							value: "minecraft:is_baby"
						},
						add: {
							component_groups: [
								"adult"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "farmer"
						},
						add: {
							component_groups: [
								"farmer"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "fisherman"
						},
						add: {
							component_groups: [
								"fisherman"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "shepherd"
						},
						add: {
							component_groups: [
								"shepherd"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "fletcher"
						},
						add: {
							component_groups: [
								"fletcher"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "librarian"
						},
						add: {
							component_groups: [
								"librarian"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "cartographer"
						},
						add: {
							component_groups: [
								"cartographer"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "cleric"
						},
						add: {
							component_groups: [
								"cleric"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "armorer"
						},
						add: {
							component_groups: [
								"armorer"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "weaponsmith"
						},
						add: {
							component_groups: [
								"weaponsmith"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "toolsmith"
						},
						add: {
							component_groups: [
								"toolsmith"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "butcher"
						},
						add: {
							component_groups: [
								"butcher"
							]
						}
					},
					{
						filters: {
							test: "is_family",
							subject: "other",
							value: "leatherworker"
						},
						add: {
							component_groups: [
								"leatherworker"
							]
						}
					}
				]
			},
			"minecraft:become_cleric": {
				add: {
					component_groups: [
						"cleric"
					]
				}
			},
			from_village: {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 9500,
								remove: {
								},
								add: {
									component_groups: [
										"adult"
									]
								}
							},
							{
								weight: 425,
								remove: {
								},
								add: {
									component_groups: [
										"baby"
									]
								}
							},
							{
								weight: 75,
								remove: {
								},
								add: {
									component_groups: [
										"baby",
										"jockey"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 5,
								add: {
									component_groups: [
										"farmer"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"fisherman"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"shepherd"
									]
								}
							},
							{
								weight: 5,
								add: {
									component_groups: [
										"fletcher"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"librarian"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"cartographer"
									]
								}
							},
							{
								weight: 20,
								add: {
									component_groups: [
										"cleric"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"armorer"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"weaponsmith"
									]
								}
							},
							{
								weight: 6,
								add: {
									component_groups: [
										"toolsmith"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"butcher"
									]
								}
							},
							{
								weight: 10,
								add: {
									component_groups: [
										"leatherworker"
									]
								}
							}
						]
					},
					{
						add: {
							component_groups: [
								"from_abandoned_village"
							]
						}
					}
				]
			}
		}
	}
},
	"minecraft:zombie_villager_v2": {
	format_version: "1.17.20",
	"minecraft:entity": {
		description: {
			identifier: "minecraft:zombie_villager_v2",
			is_spawnable: true,
			is_summonable: false,
			is_experimental: false
		},
		component_groups: {
			baby: {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 12 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:is_baby": {
				},
				"minecraft:scale": {
					value: 0.5
				},
				"minecraft:movement": {
					value: 0.35
				}
			},
			adult: {
				"minecraft:experience_reward": {
					on_death: "query.last_hit_by_player ? 5 + (query.equipment_count * Math.Random(1,3)) : 0"
				},
				"minecraft:movement": {
					value: 0.23
				},
				"minecraft:rideable": {
					seat_count: 1,
					family_types: [
						"zombie"
					],
					seats: {
						position: [
							0,
							1.1,
							-0.35
						]
					}
				},
				"minecraft:behavior.mount_pathing": {
					priority: 5,
					speed_multiplier: 1.25,
					target_dist: 0,
					track_target: true
				}
			},
			jockey: {
				"minecraft:behavior.find_mount": {
					priority: 1,
					within_radius: 16
				}
			},
			can_break_doors: {
				"minecraft:annotation.break_door": {
				}
			},
			from_abandoned_village: {
				"minecraft:navigation.walk": {
					is_amphibious: true,
					can_pass_doors: true,
					can_open_doors: true,
					avoid_water: true,
					avoid_sun: true
				},
				"minecraft:behavior.flee_sun": {
					priority: 4,
					speed_multiplier: 1
				}
			},
			to_villager: {
				"minecraft:transformation": {
					into: "minecraft:villager_v2",
					begin_transform_sound: "remedy",
					transformation_sound: "unfect",
					keep_level: true,
					delay: {
						value: 100,
						block_assist_chance: 0.01,
						block_radius: 4,
						block_chance: 0.3,
						block_types: [
							"minecraft:bed",
							"minecraft:iron_bars"
						]
					}
				},
				"minecraft:spell_effects": {
					add_effects: [
						{
							effect: "strength",
							duration: 100
						},
						{
							effect: "heal",
							duration: 100
						}
					],
					remove_effects: "weakness"
				},
				"minecraft:is_shaking": {
				}
			},
			unskilled: {
				"minecraft:type_family": {
					family: [
						"unskilled",
						"zombie",
						"zombie_villager",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			nitwit: {
				"minecraft:type_family": {
					family: [
						"nitwit",
						"zombie",
						"zombie_villager",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			farmer: {
				"minecraft:type_family": {
					family: [
						"farmer",
						"zombie",
						"zombie_villager",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			fisherman: {
				"minecraft:type_family": {
					family: [
						"fisherman",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			shepherd: {
				"minecraft:type_family": {
					family: [
						"shepherd",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			fletcher: {
				"minecraft:type_family": {
					family: [
						"fletcher",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			librarian: {
				"minecraft:type_family": {
					family: [
						"librarian",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			cartographer: {
				"minecraft:type_family": {
					family: [
						"cartographer",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			cleric: {
				"minecraft:type_family": {
					family: [
						"cleric",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			armorer: {
				"minecraft:type_family": {
					family: [
						"armorer",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			weaponsmith: {
				"minecraft:type_family": {
					family: [
						"weaponsmith",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			toolsmith: {
				"minecraft:type_family": {
					family: [
						"toolsmith",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			butcher: {
				"minecraft:type_family": {
					family: [
						"butcher",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			leatherworker: {
				"minecraft:type_family": {
					family: [
						"leatherworker",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			mason: {
				"minecraft:type_family": {
					family: [
						"stone_mason",
						"zombie_villager",
						"zombie",
						"undead",
						"monster",
						"mob"
					]
				},
				"minecraft:variant": {
					value: 0
				}
			},
			desert_villager: {
				"minecraft:mark_variant": {
					value: 1
				}
			},
			jungle_villager: {
				"minecraft:mark_variant": {
					value: 2
				}
			},
			savanna_villager: {
				"minecraft:mark_variant": {
					value: 3
				}
			},
			snow_villager: {
				"minecraft:mark_variant": {
					value: 4
				}
			},
			swamp_villager: {
				"minecraft:mark_variant": {
					value: 5
				}
			},
			taiga_villager: {
				"minecraft:mark_variant": {
					value: 6
				}
			},
			villager_skin_0: {
				"minecraft:skin_id": {
					value: 0
				}
			},
			villager_skin_1: {
				"minecraft:skin_id": {
					value: 1
				}
			},
			villager_skin_2: {
				"minecraft:skin_id": {
					value: 2
				}
			},
			villager_skin_3: {
				"minecraft:skin_id": {
					value: 3
				}
			},
			villager_skin_4: {
				"minecraft:skin_id": {
					value: 4
				}
			},
			villager_skin_5: {
				"minecraft:skin_id": {
					value: 5
				}
			}
		},
		components: {
			"minecraft:is_hidden_when_invisible": {
			},
			"minecraft:navigation.walk": {
				is_amphibious: true,
				can_pass_doors: true,
				can_break_doors: true,
				avoid_sun: false
			},
			"minecraft:movement.basic": {
			},
			"minecraft:jump.static": {
			},
			"minecraft:can_climb": {
			},
			"minecraft:breathable": {
				total_supply: 15,
				suffocate_time: 0,
				breathes_water: true
			},
			"minecraft:loot": {
				table: "loot_tables/entities/zombie.json"
			},
			"minecraft:equip_item": {
			},
			"minecraft:conditional_bandwidth_optimization": {
			},
			"minecraft:collision_box": {
				width: 0.6,
				height: 1.9
			},
			"minecraft:burns_in_daylight": {
			},
			"minecraft:health": {
				value: 20,
				max: 20
			},
			"minecraft:hurt_on_condition": {
				damage_conditions: [
					{
						filters: {
							test: "in_lava",
							subject: "self",
							operator: "==",
							value: true
						},
						cause: "lava",
						damage_per_tick: 4
					}
				]
			},
			"minecraft:attack": {
				damage: 3
			},
			"minecraft:nameable": {
			},
			"minecraft:shareables": {
				items: [
					{
						item: "minecraft:netherite_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:stone_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:wooden_sword",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:turtle_helmet",
						want_amount: 1,
						surplus_amount: 1,
						priority: 6
					},
					{
						item: "minecraft:skull:0",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:skull:1",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:carved_pumpkin",
						want_amount: 1,
						surplus_amount: 1,
						priority: 7
					},
					{
						item: "minecraft:netherite_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_chestplate",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_leggings",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					},
					{
						item: "minecraft:netherite_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 0
					},
					{
						item: "minecraft:diamond_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 1
					},
					{
						item: "minecraft:iron_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 2
					},
					{
						item: "minecraft:chainmail_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 3
					},
					{
						item: "minecraft:golden_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 4
					},
					{
						item: "minecraft:leather_boots",
						want_amount: 1,
						surplus_amount: 1,
						priority: 5
					}
				]
			},
			"minecraft:interact": {
				interactions: {
					on_interact: {
						filters: {
							all_of: [
								{
									test: "has_equipment",
									domain: "hand",
									subject: "other",
									value: "golden_apple"
								},
								{
									test: "has_component",
									subject: "self",
									value: "minecraft:effect.weakness"
								}
							]
						},
						event: "villager_converted",
						target: "self"
					},
					use_item: true,
					interact_text: "action.interact.cure"
				}
			},
			"minecraft:despawn": {
				despawn_from_distance: {
				}
			},
			"minecraft:behavior.melee_attack": {
				priority: 6
			},
			"minecraft:behavior.equip_item": {
				priority: 3
			},
			"minecraft:behavior.stomp_turtle_egg": {
				priority: 4,
				speed_multiplier: 1,
				search_range: 10,
				search_height: 2,
				goal_radius: 1.14,
				interval: 20
			},
			"minecraft:behavior.pickup_items": {
				priority: 8,
				max_dist: 3,
				goal_radius: 2,
				speed_multiplier: 1,
				pickup_based_on_chance: true,
				can_pickup_any_item: true,
				excluded_items: [
					"minecraft:glow_ink_sac"
				]
			},
			"minecraft:behavior.random_stroll": {
				priority: 9,
				speed_multiplier: 1
			},
			"minecraft:behavior.look_at_player": {
				priority: 10,
				look_distance: 6,
				probability: 0.02
			},
			"minecraft:behavior.random_look_around": {
				priority: 11
			},
			"minecraft:behavior.hurt_by_target": {
				priority: 1
			},
			"minecraft:behavior.nearest_attackable_target": {
				priority: 2,
				must_see: true,
				reselect_targets: true,
				entity_types: [
					{
						filters: {
							any_of: [
								{
									test: "is_family",
									subject: "other",
									value: "player"
								},
								{
									test: "is_family",
									subject: "other",
									value: "snowgolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "irongolem"
								},
								{
									test: "is_family",
									subject: "other",
									value: "villager"
								},
								{
									test: "is_family",
									subject: "other",
									value: "wandering_trader"
								}
							]
						},
						max_dist: 35
					},
					{
						filters: {
							all_of: [
								{
									test: "is_family",
									subject: "other",
									value: "baby_turtle"
								},
								{
									test: "in_water",
									subject: "other",
									operator: "!=",
									value: true
								}
							]
						},
						max_dist: 35
					}
				]
			},
			"minecraft:physics": {
			},
			"minecraft:pushable": {
				is_pushable: true,
				is_pushable_by_piston: true
			}
		},
		events: {
			villager_converted: {
				remove: {
				},
				add: {
					component_groups: [
						"to_villager"
					]
				}
			},
			"minecraft:entity_spawned": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 9500,
								remove: {
								},
								add: {
									component_groups: [
										"adult"
									]
								}
							},
							{
								weight: 425,
								remove: {
								},
								add: {
									component_groups: [
										"baby"
									]
								}
							},
							{
								weight: 75,
								remove: {
								},
								add: {
									component_groups: [
										"baby",
										"jockey"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"unskilled"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"nitwit"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"farmer"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"fisherman"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"shepherd"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"fletcher"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"librarian"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"cartographer"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"cleric"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"armorer"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"weaponsmith"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"toolsmith"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"butcher"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"leatherworker"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"mason"
									]
								}
							}
						]
					},
					{
						trigger: "minecraft:add_biome_and_skin"
					},
					{
						randomize: [
							{
								weight: 10,
								add: {
									component_groups: [
										"can_break_doors"
									]
								}
							},
							{
								weight: 90
							}
						]
					}
				]
			},
			"minecraft:spawn_skilled_adult": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						add: {
							component_groups: [
								"adult"
							]
						}
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"farmer"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"fisherman"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"shepherd"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"fletcher"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"librarian"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"cartographer"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"cleric"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"armorer"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"weaponsmith"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"toolsmith"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"butcher"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"leatherworker"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"mason"
									]
								}
							}
						]
					},
					{
						trigger: "minecraft:add_biome_and_skin"
					}
				]
			},
			"minecraft:entity_transformed": {
				sequence: [
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:variant"
						},
						sequence: [
							{
								filters: {
									test: "has_component",
									subject: "other",
									value: "minecraft:is_baby"
								},
								add: {
									component_groups: [
										"baby"
									]
								}
							},
							{
								filters: {
									test: "has_component",
									subject: "other",
									operator: "!=",
									value: "minecraft:is_baby"
								},
								add: {
									component_groups: [
										"adult"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "unskilled"
								},
								add: {
									component_groups: [
										"unskilled"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "nitwit"
								},
								add: {
									component_groups: [
										"nitwit"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "farmer"
								},
								add: {
									component_groups: [
										"farmer"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "fisherman"
								},
								add: {
									component_groups: [
										"fisherman"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "shepherd"
								},
								add: {
									component_groups: [
										"shepherd"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "fletcher"
								},
								add: {
									component_groups: [
										"fletcher"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "librarian"
								},
								add: {
									component_groups: [
										"librarian"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "cartographer"
								},
								add: {
									component_groups: [
										"cartographer"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "cleric"
								},
								add: {
									component_groups: [
										"cleric"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "armorer"
								},
								add: {
									component_groups: [
										"armorer"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "weaponsmith"
								},
								add: {
									component_groups: [
										"weaponsmith"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "toolsmith"
								},
								add: {
									component_groups: [
										"toolsmith"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "butcher"
								},
								add: {
									component_groups: [
										"butcher"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "leatherworker"
								},
								add: {
									component_groups: [
										"leatherworker"
									]
								}
							},
							{
								filters: {
									test: "is_family",
									subject: "other",
									value: "stone_mason"
								},
								add: {
									component_groups: [
										"mason"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:mark_variant"
						},
						sequence: [
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 1
								},
								add: {
									component_groups: [
										"desert_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 2
								},
								add: {
									component_groups: [
										"jungle_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 3
								},
								add: {
									component_groups: [
										"savanna_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 4
								},
								add: {
									component_groups: [
										"snow_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 5
								},
								add: {
									component_groups: [
										"swamp_villager"
									]
								}
							},
							{
								filters: {
									test: "is_mark_variant",
									subject: "other",
									value: 6
								},
								add: {
									component_groups: [
										"taiga_villager"
									]
								}
							}
						]
					},
					{
						filters: {
							test: "has_component",
							operator: "!=",
							value: "minecraft:skin_id"
						},
						sequence: [
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 0
								},
								add: {
									component_groups: [
										"villager_skin_0"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 1
								},
								add: {
									component_groups: [
										"villager_skin_1"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 2
								},
								add: {
									component_groups: [
										"villager_skin_2"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 3
								},
								add: {
									component_groups: [
										"villager_skin_3"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 4
								},
								add: {
									component_groups: [
										"villager_skin_4"
									]
								}
							},
							{
								filters: {
									test: "is_skin_id",
									subject: "other",
									value: 5
								},
								add: {
									component_groups: [
										"villager_skin_5"
									]
								}
							}
						]
					}
				]
			},
			"minecraft:become_cleric": {
				add: {
					component_groups: [
						"cleric"
					]
				}
			},
			from_village: {
				sequence: [
					{
						trigger: "minecraft:entity_spawned"
					},
					{
						add: {
							component_groups: [
								"from_abandoned_village"
							]
						}
					}
				]
			},
			"minecraft:add_biome_and_skin": {
				sequence: [
					{
						randomize: [
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_0"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_1"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_2"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_3"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_4"
									]
								}
							},
							{
								weight: 1,
								add: {
									component_groups: [
										"villager_skin_5"
									]
								}
							}
						]
					},
					{
						filters: {
							any_of: [
								{
									test: "has_biome_tag",
									value: "desert"
								},
								{
									test: "has_biome_tag",
									value: "mesa"
								}
							]
						},
						add: {
							component_groups: [
								"desert_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "jungle"
						},
						add: {
							component_groups: [
								"jungle_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "savanna"
						},
						add: {
							component_groups: [
								"savanna_villager"
							]
						}
					},
					{
						filters: {
							any_of: [
								{
									all_of: [
										{
											test: "has_biome_tag",
											value: "cold"
										},
										{
											test: "has_biome_tag",
											operator: "!=",
											value: "ocean"
										}
									]
								},
								{
									test: "has_biome_tag",
									value: "frozen"
								}
							]
						},
						add: {
							component_groups: [
								"snow_villager"
							]
						}
					},
					{
						filters: {
							test: "has_biome_tag",
							value: "swamp"
						},
						add: {
							component_groups: [
								"swamp_villager"
							]
						}
					},
					{
						filters: {
							all_of: [
								{
									any_of: [
										{
											test: "has_biome_tag",
											value: "taiga"
										},
										{
											test: "has_biome_tag",
											value: "extreme_hills"
										}
									]
								},
								{
									test: "has_biome_tag",
									operator: "!=",
									value: "cold"
								}
							]
						},
						add: {
							component_groups: [
								"taiga_villager"
							]
						}
					}
				]
			}
		}
	}
}
};

var mcBehaviorPacks = /*#__PURE__*/Object.freeze({
  __proto__: null,
  default: data_bp
});

class NativeEntityData {
    static getDataById(type, id) {
        if (type === 'res' || type === 'resource') {
            return this.getResource(id);
        }
        return this.getBehavior(id);
    }
    static getBehavior(id) {
        return mcBehaviorPacks?.[id];
    }
    static getResource(id) {
        return mcResourcePacks?.[id];
    }
}

class NativeEntity {
    constructor(identifier, proto_id, options = {}) {
        try {
            // 获取行为数据
            const behData = NativeEntityData.getDataById("beh", proto_id)?.["minecraft:entity"];
            if (!behData) {
                throw new Error(`Behavior data not found for proto_id: ${proto_id}`);
            }

            // 获取资源数据
            const resData = NativeEntityData.getDataById("res", proto_id)?.["minecraft:client_entity"]?.["description"];
            if (!resData) {
                throw new Error(`Resource data not found for proto_id: ${proto_id}`);
            }
            options["runtime_identifier"] = proto_id;

            // 创建行为实体和客户端实体
            this.identifier = identifier;
            this.behavior = new BasicEntity(identifier, options, behData);
            this.resource = new ClientEntity(identifier, resData);
            
        } catch (error) {
            console.error(`Failed to create NativeEntity ${identifier}:`, error);
            throw error; // 抛出错误，避免继续执行
        }
    }
}

class Projectile extends NativeEntity{
    constructor(identifier, texture_path, options = {}) {
        super(identifier, "minecraft:snowball",  options);
        this.client_entity.addTexture("default",texture_path);
    }
}

const registerEntity = (behData, resData) => {
    // 如果 behData 存在且不为空，则注册行为数据
    if (behData && Object.keys(behData).length > 0) {
        GRegistry.register(behData.identifier.replace(":", "_"), "behavior", "entities/", behData);
    }

    // 如果 resData 存在且不为空，则注册资源数据
    if (resData && Object.keys(resData).length > 0) {
        GRegistry.register(resData.identifier.replace(":", "_"), "resource", "entity/", resData);
    }
};

const EntityAPI = {
    /**
     * 创建一个原生实体。
     * @param {string} identifier - 实体的唯一标识符。
     * @param {string} proto_id - 实体的原型 ID。
     * @param {string} texture - 实体的纹理。
     * @param {Object} options - 额外选项。
     * @returns {{ behavior: BasicEntity, resource: ClientEntity }} 包含行为数据和资源数据的对象。
     */
    createNativeEntity: function (identifier, proto_id, options = {}) {
        if (!identifier || !proto_id ) {
            throw new Error("必须提供 identifier、proto_id 和 texture。");
        }

        const nativeEntity = new NativeEntity(identifier, proto_id, options);
        registerEntity(nativeEntity.behavior, nativeEntity.resource);
        return {
            behavior: nativeEntity.behavior,
            resource: nativeEntity.resource,
        };
    },

    /**
     * 创建一个普通实体。
     * @param {string} identifier - 实体的唯一标识符。
     * @param {string} texture - 实体的纹理。
     * @param {Object} behData - 实体的行为数据。
     * @param {Object} resData - 实体的资源数据。
     * @param {Object} options - 额外选项。
     * @returns {{ behavior: BasicEntity, resource: ClientEntity }} 包含行为数据和资源数据的对象。
     */
    createEntity: function (identifier, texture, behData, resData, options = {}) {
        if (!identifier || !texture) {
            throw new Error("必须提供 identifier 和 texture。");
        }

        const entity = new Entity(identifier, texture, behData, resData, options);
        registerEntity(entity.behavior, entity.resource);
        return {
            behavior: entity.behavior,
            resource: entity.resource,
        };
    },


    /**
     * 创建一个投射物实体。
     * @param {string} identifier - 投射物的唯一标识符。
     * @param {string} texture - 投射物的纹理。
     * @param {Object} options - 额外选项。
     * @returns {{ behavior: BasicEntity, resource: ClientEntity }} 包含行为数据和资源数据的对象。
     */
    createProjectile: function (identifier, texture, options = {}) {
        if (!identifier || !texture) {
            throw new Error("必须提供 identifier 和 texture。");
        }

        const entity = new Projectile(identifier, texture, options);
        registerEntity(entity.behavior, entity.resource);
        return {
            behavior: entity.behavior,
            resource: entity.resource,
        };
    },

    /**
     * 创建一个虚拟实体。
     * @param {string} identifier - 实体的唯一标识符。
     * @param {string} texture - 实体的纹理。
     * @param {Object} options - 额外选项。
     * @param {Object} behData - 实体的行为数据。
     * @param {Object} resData - 实体的资源数据。
     * @returns {{ behavior: BasicEntity, resource: ClientEntity }} 包含行为数据和资源数据的对象。
     */
    createDummyEntity: function (identifier, texture, options = {}, behData, resData) {
        if (!identifier || !texture) {
            throw new Error("必须提供 identifier 和 texture。");
        }

        const entity = new DummyEntity(identifier, texture, options);
        registerEntity(entity.behavior, entity.resource);
        return {
            behavior: entity.behavior,
            resource: entity.resource,
        };
    },
};

const registerFeature = (feature)=>{
    const feature_name = feature.identifier.split(":")[feature.identifier.split(":").length - 1];
    GRegistry.register(feature_name,"behavior","features/",feature);
};

const registerFeatureRule = (feature_rule)=>{
    const feature_rule_name = feature_rule.identifier.split(":")[feature_rule.identifier.split(":").length - 1];
    GRegistry.register(feature_rule_name,"behavior","feature_rules/",feature_rule);
};

const FeatureAPI = {
    createOreFeature: function(identifier,count,replace_rules) {
        const feature = new OreFeature(identifier,count,replace_rules);
        registerFeature(feature);
        return feature;
    },
    createFeatureRules: function(identifier,places_feature) {
        const feature_rules = new FeatureRule(identifier,places_feature);
        registerFeatureRule(feature_rules);
        return feature_rules;
    }
};

class AddonAttachable {
      /**
     * 可附着物类 继承客户端实体
     * @param {string} format_version 格式版本
     * @param {AddonAttachableDefinition} definitions 实体定义
     */
      constructor(format_version, definitions) {
        this.format_version = format_version;
        this.definitions = definitions;
    }

    /**
     * 将对象转换为 JSON 格式
     * @returns {Object} JSON 对象
     */
    @Serializer
    toObject() {
        return {
            format_version: this.format_version,
            ["minecraft:attachable"]: this.definitions
        };
    }
}

class AddonAttachableDefinition {
    /**
     * 客户端实体定义类
     * @param {Description} description 实体描述
     */
    constructor(description) {
        this.description = description;
    }
}

class AddonAttachableDescription {
    /**
     * 可附着物描述类
     * @param {string} identifier 标识符
     */
    constructor(identifier) {
        this.identifier = identifier;
    }

    /**
     * 添加材质
     * @param {string} name 材质名称
     * @param {string} material 材质路径
     * @returns {AddonAttachableDescription} 返回当前实例以支持链式调用
     */
    addMaterial(name, material) {
        if (this.materials == undefined) this.materials = {};
        this.materials[name] = material;
        return this;
    }

    /**
     * 添加纹理
     * @param {string} name 纹理名称
     * @param {string} texture 纹理路径
     * @returns {AddonAttachableDescription} 返回当前实例以支持链式调用
     */
    addTexture(name, texture) {
        if (this.textures == undefined) this.textures = {};
        this.textures[name] = texture;
        return this;
    }

    /**
     * 添加几何体
     * @param {string} name 几何体名称
     * @param {string} geometry 几何体路径
     * @returns {AddonAttachableDescription} 返回当前实例以支持链式调用
     */
    addGeometry(name, geometry) {
        if (this.geometry == undefined) this.geometry = {};
        this.geometry[name] = geometry;
        return this;
    }

    /**
     * 添加动画
     * @param {string} name 动画名称
     * @param {string} animation 动画路径
     * @returns {AddonAttachableDescription} 返回当前实例以支持链式调用
     */
    addAnimation(name, animation) {
        if (this.animations == undefined) this.animations = {};
        this.animations[name] = animation;
        return this;
    }

    /**
     * 添加动画控制器
     * @param {string} name 控制器名称
     * @param {string} controller 控制器路径
     * @returns {AddonAttachableDescription} 返回当前实例以支持链式调用
     */
    addAnimationController(name, controller) {
        if (this.animation_controllers == undefined) this.animation_controllers = [];
        this.animation_controllers.push({ [name]: controller });
        return this;
    }

    /**
     * 添加渲染控制器
     * @param {string} controller 渲染控制器路径
     * @returns {AddonAttachableDescription} 返回当前实例以支持链式调用
     */
    addRenderController(controller) {
        if (this.render_controllers == undefined) this.render_controllers = [];
        this.render_controllers.push(controller);
        return this;
    }

    /**
     * 添加定位器
     * @param {string} name 定位器名称
     * @param {Object} locator 定位器数据
     * @returns {AddonAttachableDescription} 返回当前实例以支持链式调用
     */
    addLocator(name, locator) {
        if (this.locators == undefined) this.locators = {};
        this.locators[name] = locator;
        return this;
    }

    /**
     * 设置脚本
     * @param {string} key 脚本键
     * @param {string} value 脚本值
     * @returns {AddonAttachableDescription} 返回当前实例以支持链式调用
     */
    setScript(key, value) {
        if (this.scripts == undefined) this.scripts = {};
        this.scripts[key] = value;
        return this;
    }
}

class Attachable extends AddonAttachableDescription{
    constructor(identifier){
        super(identifier);
    }

    getId() {
        return this.identifier;
    }
    
    @Serializer
    toObject() {
        const entity = new AddonAttachable(
            "1.8.0",
            new AddonAttachableDefinition(this)
        );
        return serialize(entity);
    }
}

/*
const attachable = new Attachable("test")
      attachable.addMaterial("default", "armor")
      attachable.addMaterial("enchanted","armor_enchanted")
      attachable.addTexture("default","textures/models/armor/custom_main")
      attachable.addTexture("enchanted", "textures/misc/enchanted_actor_glint")
      attachable.addGeometry("default", "geometry.player.armor.chestplate")
      attachable.addRenderController("controller.render.armor")
      attachable.setScript("parent_setup","v.chest_layer_visible = 0.0;")

      console.log(JSON.stringify(attachable.@Serializer
    toObject(),null,2))
debugger
*/

class ItemComponent {
  /**
   * 物品的耐久度组件
   * @param {number} max_durability 最大耐久
   * @param {number} damage_chance_min 损坏最小几率
   * @param {number} damage_chance_max 损坏最大几率
   * @returns {ItemComponent}
   */
  static setDurability(max_durability,damage_chance_min = 0, damage_chance_max = 100){
    return new Map().set("minecraft:durability", {
      "damage_chance": {
          "min": damage_chance_min,
          "max": damage_chance_max
      },
      "max_durability": max_durability
    })
  }
  static setBlockPlacer(block,replace_block_item, use_on){
    return new Map().set("minecraft:block_placer",{
      block:block,
      replace_block_item: replace_block_item,
      use_on:use_on
    })
  }
    /**
  * 
  * @param {Array} custom_components 
  * @returns 
  */
  static setCustomComponents(custom_components){
    return new Map().set("minecraft:custom_components",[...custom_components])
  }
  /**
   * 设置物品的可投掷组件。
   * @param {Boolean} doSwingAnimation - 是否使用挥动动画。
   * @param {Number} launchPowerScale - 投掷力量的缩放比例。
   * @param {Number} maxDrawDuration - 最大蓄力时间。
   * @param {Number} maxLaunchPower - 最大投掷力量。
   * @param {Number} minDrawDuration - 最小蓄力时间。
   * @param {Boolean} scalePowerByDrawDuration - 投掷力量是否随蓄力时间增加。
   * @returns {Map} - 新的组件集合。
   */
  static setThrowable(
    doSwingAnimation = false,
    launchPowerScale = 1.0,
    maxDrawDuration = 0.0,
    maxLaunchPower = 1.0,
    minDrawDuration = 0.0,
    scalePowerByDrawDuration = false
  ) {
    return new Map().set("minecraft:throwable", {
      do_swing_animation: doSwingAnimation,
      launch_power_scale: launchPowerScale,
      max_draw_duration: maxDrawDuration,
      max_launch_power: maxLaunchPower,
      min_draw_duration: minDrawDuration,
      scale_power_by_draw_duration: scalePowerByDrawDuration,
    });
  }
  /**
   * 设置物品的显示名称。
   * @param {String} displayName - 显示名称或本地化键。
   * @returns {Map} - 新的组件集合。
   */
  static setDisplayName(displayName) {
    if (typeof displayName !== "string") {
      throw new Error('显示名称必须是字符串类型');
    }
    return new Map().set("minecraft:display_name", { value: displayName });
  }

  /**
   * 设置物品的食物组件。
   * @param {Boolean} canAlwaysEat - 是否随时可以食用。
   * @param {Number} nutrition - 营养值。
   * @param {Number} saturationModifier - 饱和度修正值。
   * @param {String} [usingConvertsTo] - 食用后转换的目标物品。
   * @returns {Map} - 新的组件集合。
   */
  static setFoodComponent(canAlwaysEat, nutrition, saturationModifier, usingConvertsTo) {
    return new Map().set("minecraft:food", {
      can_always_eat: canAlwaysEat,
      nutrition: nutrition || 0,
      saturation_modifier: saturationModifier || 0.6,
      using_converts_to: usingConvertsTo || undefined,
    });
  }

  /**
   * 设置物品的燃料组件。
   * @param {Number} duration - 燃料燃烧的持续时间（秒），最小值为 0.05。
   * @returns {Map} - 新的组件集合。
   */
  static setFuel(duration) {
    if (typeof duration !== "number" || duration < 0.05) {
      throw new Error('燃料持续时间必须是一个大于或等于 0.05 的数字');
    }
    return new Map().set("minecraft:fuel", { duration });
  }

  /**
   * 设置物品的附魔光效组件。
   * @param {Boolean} hasGlint - 是否显示附魔光效。
   * @returns {Map} - 新的组件集合。
   */
  static setGlint(hasGlint) {
    if (typeof hasGlint !== "boolean") {
      throw new Error('附魔光效值必须是布尔类型');
    }
    return new Map().set("minecraft:glint", hasGlint);
  }

  /**
   * 设置物品的手持渲染方式组件。
   * @param {Boolean} isHandEquipped - 是否像工具一样渲染。
   * @returns {Map} - 新的组件集合。
   */
  static setHandEquipped(isHandEquipped) {
    if (typeof isHandEquipped !== "boolean") {
      throw new Error('手持渲染方式值必须是布尔类型');
    }
    return new Map().set("minecraft:hand_equipped", isHandEquipped);
  }

  /**
   * 设置物品的图标组件。
   * @param {String} texture - 图标纹理名称。
   * @returns {Map} - 新的组件集合。
   */
  static setIcon(texture) {
    if (typeof texture !== "string") {
      throw new Error('图标纹理必须是字符串类型');
    }
    return new Map().set("minecraft:icon", texture);
  }

  /**
   * 设置物品的最大堆叠数量组件。
   * @param {Number} maxStackSize - 最大堆叠数量，默认值为 64。
   * @returns {Map} - 新的组件集合。
   */
  static setMaxStackSize(maxStackSize = 64) {
    if (typeof maxStackSize !== "number" || maxStackSize <= 0 || !Number.isInteger(maxStackSize)) {
      throw new Error('最大堆叠数量必须是正整数');
    }
    return new Map().set("minecraft:max_stack_size", maxStackSize);
  }

  /**
   * 设置物品的投射物组件。
   * @param {Number} [minimumCriticalPower] - 投射物需要蓄力多久才能造成暴击。
   * @param {String} [projectileEntity] - 作为投射物发射的实体名称。
   * @returns {Map} - 新的组件集合。
   */
  static setProjectile(minimumCriticalPower, projectileEntity) {
    const projectileComponent = {};

    if (minimumCriticalPower !== undefined) {
      if (typeof minimumCriticalPower !== "number" || minimumCriticalPower < 0) {
        throw new Error('minimumCriticalPower 必须是非负数');
      }
      projectileComponent.minimum_critical_power = minimumCriticalPower;
    }

    if (projectileEntity !== undefined) {
      if (typeof projectileEntity !== "string") {
        throw new Error('projectileEntity 必须是字符串类型');
      }
      projectileComponent.projectile_entity = projectileEntity;
    }

    return new Map().set("minecraft:projectile", projectileComponent);
  }

  /**
   * 设置物品的使用修饰组件。
   * @param {Number} [movementModifier] - 使用物品时玩家移动速度的缩放值。
   * @param {Number} [useDuration] - 物品使用所需的时间（秒）。
   * @returns {Map} - 新的组件集合。
   */
  static setUseModifiers(movementModifier, useDuration) {
    const useModifiersComponent = {};

    if (movementModifier !== undefined) {
      if (typeof movementModifier !== "number") {
        throw new Error('movementModifier 必须是数字类型');
      }
      useModifiersComponent.movement_modifier = movementModifier;
    }

    if (useDuration !== undefined) {
      if (typeof useDuration !== "number" || useDuration < 0) {
        throw new Error('useDuration 必须是非负数');
      }
      useModifiersComponent.use_duration = useDuration;
    }

    return new Map().set("minecraft:use_modifiers", useModifiersComponent);
  }

  /**
   * 设置物品的可穿戴组件。
   * @param {Number} [protection=0] - 物品提供的保护值。
   * @param {String} [slot] - 物品可以穿戴的槽位（如 "head"、"chest" 等）。
   * @returns {Map} - 新的组件集合。
   */
  static setWearable(protection = 0, slot) {
    const wearableComponent = { protection };

    if (slot !== undefined) {
      if (typeof slot !== "string") {
        throw new Error('slot 必须是字符串类型');
      }
      wearableComponent.slot = slot;
    }

    return new Map().set("minecraft:wearable", wearableComponent);
  }
  /**
  * 设置物品的使用动画组件。
  * @param {String} animation - 物品使用时的动画类型（如 "eat"、"drink" 等）。
  * @returns {Map} - 新的组件集合。
  * @throws {Error} - 如果 animation 不是字符串类型。
  */
  static setUseAnimation(animation) {
    // 检查 animation 是否为字符串
    if (typeof animation !== "string") {
      throw new Error('animation 必须是字符串类型');
    }

    // 返回包含动画设置的 Map 对象
    return new Map().set("minecraft:use_animation", animation);
  }

  /**
   * 将多个组件集合合并为一个。
   * @param {...Map} componentMaps - 多个组件集合。
   * @returns {Map} - 合并后的组件集合。
   */
  static combineComponents(...componentMaps) {
    return new Map(componentMaps.flatMap(map => [...map]));
  }

  /**
   * 获取当前组件的 JSON 表示。
   * @param {Map} components - 组件集合。
   * @returns {Object} - 组件的 JSON 对象。
   */
  static toJSON(components) {
    return Object.fromEntries(components);
  }
}

//item json的结构对应的class

class AddonItem {
    constructor(format_version,definitions){
        this.format_version = format_version;
        //键名为 ["minecfat:item"]
        this.definitions = definitions;
    }
    @Serializer
    toObject(){
        return {
            format_version:this.format_version,
            ["minecraft:item"]:this.definitions
        }
    }
}

class AddonItemDefinition{
    constructor(description,components){
        this.description = description;
        this.components = components;
    }
}

class AddonItemDescription{
    constructor(identifier,menu_category){
        this.identifier = identifier;
        this.menu_category = menu_category;
    }
}

class Item {
    /**
     * 物品类
     * @param {string} identifier 物品唯一标识符
     * @param {string} category 菜单栏分类 可选："construction", "nature", "equipment", "items", and "none"
     * @param {string} texture 物品纹理
     * @param {Object} options 可选参数
     * @param {string} options.group 分组 
     * @param {boolean} options.hide_in_command 是否在命令中隐藏，默认为 false
     */
    constructor(identifier, category, texture, options = {}) {
        // 参数校验
        if (!identifier || typeof identifier !== "string") {
            throw new Error("identifier is required and must be a string");
        }
        if (!category || typeof category !== "string") {
            throw new Error("category is required and must be a string");
        }
        if (!texture || typeof texture !== "string") {
            throw new Error("texture is required and must be a string");
        }

        const { 
            group,
            hide_in_command = false,
            max_stack_size = 64,
        } = options;

        this.identifier = identifier;
        this.category = category;
        this.texture = texture;
        this.group = group;
        this.hide_in_command = hide_in_command;
        this.components = new Map();

        // 初始化默认组件
        this.addComponent(
            ItemComponent.combineComponents(
                ItemComponent.setIcon(this.texture),
                ItemComponent.setMaxStackSize(max_stack_size)
            )
        );
    }
    

    /**
     * 添加组件
     * @param {Map} componentMap 组件 Map
     */
    addComponent(componentMap) {
        if (!componentMap || !(componentMap instanceof Map)) {
            throw new Error("componentMap is required and must be a Map");
        }
        for (const [key, value] of componentMap.entries()) {
            this.components.set(key, value);
        }
        return this;
    }

    /**
     * 移除组件
     * @param {string} key 组件名称
     */
    removeComponent(key) {
        if (!key || typeof key !== "string") {
            throw new Error("key is required and must be a string");
        }
        this.components.delete(key);
        return this;
    }

    /**
     * 将物品转换为 JSON 格式
     * @returns {Object} JSON 格式的物品对象
     */
    @Serializer
    toObject() {
        const item = new AddonItem(
            "1.21.40", // 格式版本
            new AddonItemDefinition(
                new AddonItemDescription(
                    this.identifier,
                    new AddonMenuCategory(
                        this.category,
                        this.group,
                        this.hide_in_command
                    )
                ),
                Object.fromEntries(this.components) // 将 Map 转换为普通对象
            )
        );
        return serialize(item);
    }
}

// 定义 Armor 基类
class Armor {
    constructor(identifier, category, item_texture, texture_path, options = {}) {
        this.identifier = identifier;
        //默认分组
        options["group"]= "minecraft:itemGroup.name.chestplate";
        // 创建物品
        this.item = new Item(identifier, category, item_texture, options);
        // 创建附加物
        this.attachable = new Attachable(identifier);
        // 配置附加物
        this.attachable
            .addTexture("default", texture_path) // 添加默认纹理
            .addMaterial("default", "armor") // 添加默认材质
            .addMaterial("enchanted", "armor_enchanted") // 添加附魔材质
            .addTexture("default",texture_path)
            .addTexture("enchanted", "textures/misc/enchanted_actor_glint") // 添加附魔纹理
            .addRenderController("controller.render.armor") // 添加渲染控制器
            //默认类型 胸甲
            .addGeometry("default", "geometry.player.armor.chestplate") // 添加几何模型
            .setScript("parent_setup", "v.chest_layer_visible = 0.0;"); // 设置脚本
    }
    setArrachableGeometry(key, geometry){
        this.attachable.addGeometry(key,geometry);
        return this;
    }
}

// 扩展 Armor 类，实现胸甲
class Chestplate extends Armor {
    constructor(identifier, item_texture, texture_path, options = {}) {
        super(identifier, "equipment", item_texture, texture_path, options);

        options["group"]= "minecraft:itemGroup.name.chestplate";

          //头盔专属
         this.attachable.addGeometry("default", "geometry.player.armor.chestplate") // 添加几何模型
         .setScript("parent_setup", "v.chest_layer_visible = 0.0;"); // 设置脚本

        // 自定义胸甲物品
        this.item.addComponent(
            ItemComponent.combineComponents(
                ItemComponent.setDisplayName("我的自定义胸甲"), // 设置显示名称
                ItemComponent.setMaxStackSize(1), // 设置最大堆叠数量
                ItemComponent.setWearable(5, "slot.armor.chest") // 设置为可穿戴，并指定装备槽
            )
        );
    }
}

// 扩展 Armor 类，实现靴子
class Boot extends Armor {
    constructor(identifier, item_texture, texture_path, options = {}) {
        super(identifier, "equipment", item_texture, texture_path, options);

        options["group"]= "minecraft:itemGroup.name.boots";

         //头盔专属
         this.attachable.addGeometry("default", "geometry.player.armor.boots") // 添加几何模型
         .setScript("parent_setup", "v.boot_layer_visible = 0.0;"); // 设置脚本

        // 自定义靴子物品
        this.item.addComponent(
            ItemComponent.combineComponents(
                ItemComponent.setDisplayName("我的自定义靴子"), // 设置显示名称
                ItemComponent.setMaxStackSize(1), // 设置最大堆叠数量
                ItemComponent.setWearable(4, "slot.armor.feet") // 设置为可穿戴，并指定装备槽
            )
        );
    }
}

// 扩展 Armor 类，实现裤子
class Leggings extends Armor {
    constructor(identifier, item_texture, texture_path, options = {}) {
        super(identifier, "equipment", item_texture, texture_path, options);

        options["group"]= "minecraft:itemGroup.name.leggings";

         //头盔专属
         this.attachable.addGeometry("default", "geometry.player.armor.leggings") // 添加几何模型
         .setScript("parent_setup", "v.leg_layer_visible = 0.0;"); // 设置脚本

        // 自定义裤子物品
        this.item.addComponent(
            ItemComponent.combineComponents(
                ItemComponent.setDisplayName("我的自定义裤子"), // 设置显示名称
                ItemComponent.setMaxStackSize(1), // 设置最大堆叠数量
                ItemComponent.setWearable(6, "slot.armor.legs") // 设置为可穿戴，并指定装备槽
            )
        );
    }
}

// 扩展 Armor 类，实现头盔
class Helmet extends Armor {
    constructor(identifier, item_texture, texture_path, options = {}) {
        super(identifier, "equipment", item_texture, texture_path, options);

        options["group"]= "minecraft:itemGroup.name.helmet";

        //头盔专属
        this.attachable.addGeometry("default", "geometry.player.armor.helmet") // 添加几何模型
        .setScript("parent_setup", "v.helmet_layer_visible = 0.0;"); // 设置脚本

        // 自定义头盔物品
        this.item.addComponent(
            ItemComponent.combineComponents(
                ItemComponent.setDisplayName("我的自定义头盔"), // 设置显示名称
                ItemComponent.setMaxStackSize(1), // 设置最大堆叠数量
                ItemComponent.setWearable(3, "slot.armor.head") // 设置为可穿戴，并指定装备槽
            )
        );
    }
}

class Food extends Item {
    /**
     * 物品类
     * @param {string} identifier 物品唯一标识符
     * @param {string} category 菜单栏分类 可选："construction", "nature", "equipment", "items", and "none"
     * @param {string} texture 物品纹理
     * @param {Object} options 可选参数
     * @param {string} options.group 分组 
     * @param {boolean} options.hide_in_command 是否在命令中隐藏，默认为 false
     * @param {string} options.animation 使用动画，默认为 "eat"
     * @param {boolean} options.canAlwaysEat 是否总是可以食用，默认为 false
     * @param {number} options.nutrition 营养价值，默认为 0
     * @param {number} options.saturationModifier 饱和度修正值，默认为 1
     */
    constructor(identifier, category, texture, options = {}) {
        // 继承父类
        super(identifier, category, texture, options);

        // 解构 options 并设置默认值
        const {
            animation = "eat",
            movement = 1,
            useDuration = 1,
            canAlwaysEat = false,
            nutrition = 0,
            saturationModifier = 1,
        } = options;

        // 参数验证
        if (typeof nutrition !== "number" || nutrition < 0) {
            throw new Error('nutrition 必须是一个非负数');
        }
        if (typeof saturationModifier !== "number" || saturationModifier <= 0) {
            throw new Error('saturationModifier 必须是一个正数');
        }
        if (typeof animation !== "string") {
            throw new Error('animation 必须是字符串类型');
        }
        if (typeof canAlwaysEat !== "boolean") {
            throw new Error('canAlwaysEat 必须是布尔类型');
        }

        // 添加组件
        this.addComponent(
            ItemComponent.combineComponents(
                ItemComponent.setUseModifiers(
                    movement,
                    useDuration
                ),
                ItemComponent.setFoodComponent(
                    canAlwaysEat,
                    nutrition,
                    saturationModifier
                ),
                ItemComponent.setUseAnimation(animation)
            )
        );
    }
}

const registerItem = (itemData, attachableData) => {
    // 如果 itemData 存在且不为空，则注册
    if (itemData && Object.keys(itemData).length > 0) {
        GRegistry.register(itemData.identifier.replace(":", "_"), "behavior", "items/", itemData);
    }

    // 如果 attachableData 存在且不为空，则注册
    if (attachableData && Object.keys(attachableData).length > 0) {
        GRegistry.register(attachableData.identifier.replace(":", "_"), "resource", "attachables/", attachableData);
    }
};

// 物品创建的工厂函数
const ItemAPI = {
    /**
     * 创建一个普通物品。
     * @param {string} identifier - 物品的唯一标识符。
     * @param {string} category - 物品在创造菜单中的分类（如 "construction", "nature"）。
     * @param {string} texture - 物品的纹理。
     * @param {Object} options - 额外选项。
     * @param {string} options.group - 物品的分组。
     * @param {boolean} options.hight_resolution -是否是高分辨率 
     * @param {boolean} options.hide_in_command - 是否在命令中隐藏物品。
     * @returns {Item} 创建的物品。
     */
    createItem: function (identifier, category, texture, options = {}) {
        if (!identifier || !category || !texture) {
            throw new Error("必须提供 identifier、category 和 texture。");
        }

        const item = new Item(identifier, category, texture, options);
        let attachable  = {};
        if (options.hide_in_command === true){
            attachable = new Attachable(identifier)
            .addMaterial("default", "entity_alphatest")
            .addMaterial("enchanted", "entity_alphatest_glint")
            .addTexture("default", `textures/items/${texture}`)
            .addTexture("enchanted","textures/misc/enchanted_item_glint")
            .addGeometry("default","geometry.large_item");
        }
        registerItem(item, attachable);
        return item;
    },

    /**
     * 创建一个食物物品。
     * @param {string} identifier - 食物的唯一标识符。
     * @param {string} category - 食物在创造菜单中的分类。
     * @param {string} texture - 食物的纹理。
     * @param {Object} options - 额外选项。
     * @param {string} options.group - 食物的分组。
     * @param {boolean} options.hide_in_command - 是否在命令中隐藏食物。
     * @param {string} options.animation - 食用时的动画（默认："eat"）。
     * @param {boolean} options.canAlwaysEat - 是否总是可以食用。
     * @param {number} options.nutrition - 食物的营养价值。
     * @param {number} options.saturationModifier - 饱和度修正值。
     * @returns {Food} 创建的食物物品。
     */
    createFood: function (identifier, category, texture, options = {}) {
        if (!identifier || !category || !texture) {
            throw new Error("必须提供 identifier、category 和 texture。");
        }

        const food = new Food(identifier, category, texture, {
            animation: "eat",
            canAlwaysEat: false,
            nutrition: 0,
            saturationModifier: 1,
            ...options, // 用传入的选项覆盖默认值
        });

        registerItem(food, {});
        return food;
    },

    /**
     * 创建一个可附着物品。
     * @param {string} identifier - 可附着物品的唯一标识符。
     * @param {string} texture - 可附着物品的纹理。
     * @param {string} material - 可附着物品的材质。
     * @param {Object} options - 额外选项。
     * @returns {Attachable} 创建的可附着物品。
     */
    createAttachable: function (identifier, texture, material, options = {}) {
        if (!identifier || !texture || !material) {
            throw new Error("必须提供 identifier、texture 和 material。");
        }

        const attachable = new Attachable(identifier);
        attachable.addTexture("default", texture);
        attachable.addMaterial("default", material);
        registerItem({}, attachable);
        return attachable;
    },
    createChestplateArmor: function (identifier, item_texture, texture_path, options = {}) {
        const item = new Chestplate(identifier, item_texture, texture_path, options);
        registerItem(item.item, item.attachable);
        return item;
    },
    createHelmetArmor: function (identifier, item_texture, texture_path, options = {}) {
        const item = new Helmet(identifier, item_texture, texture_path, options);
        registerItem(item.item, item.attachable);
        return item;
    },
    createBootArmor: function (identifier, item_texture, texture_path, options = {}) {
        const item = new Boot(identifier, item_texture, texture_path, options);
        registerItem(item.item, item.attachable);
        return item;
    },
    createLeggingsArmor: function (identifier, item_texture, texture_path, options = {}) {
        const item = new Leggings(identifier, item_texture, texture_path, options);
        registerItem(item.item, item.attachable);
        return item;
    },
};

/**
 * 原版可用于配方输入的标签列表 (1.19.50)
 */

/**
 * 原版可用于配方的标签列表
 */
const RecipeTags = {
	Furnace: "furnace",
	CraftingTable: "crafting_table"
};

/**
 * 原版可用于配方的类型列表
 */
const RecipeTypes = {
	Furnace: "minecraft:recipe_furnace",
	Shaped: "minecraft:recipe_shaped",
	Shapeless: "minecraft:recipe_shapeless"
};

class AddonRecipe {
	constructor(format_version, recipe_type, definitions = {}) {
		this.format_version = format_version;
		this.recipe_type = recipe_type;
		this.definitions = definitions;
	}
	
	getId() {
		return this.definitions.description.identifier;
	}

	identifier(identifier) {
		this.definitions.description = { identifier };
		return this;
	}

	tags(tags) {
		this.definitions.tags = tags;
		return this;
	}

	@Serializer
    toObject() {
		var json = { format_version: this.format_version };
		json[this.recipe_type] = this.definitions;
		return json;
	}
}

class AddonRecipeFurnace extends AddonRecipe {
	constructor(format_version, definitions) {
		super(format_version, RecipeTypes.Furnace, definitions);
	}

	/**
	 * @param {'1.12'|'1.17'} ver 
	 * @param {any} def 
	 */
	static create(ver, def) {
		return new AddonRecipeFurnace(ver, def)
	}

	input(item, data, count) {
		var input;
		if (!data && !count) {
			input = item;
		} else {
			input = { item };
			if (data) input.data = data;
			if (count) input.count = count;
		}
		this.definitions.input = input;
		return this;
	}

	output(item) {
		this.definitions.output = item;
		return this;
	}
}

class AddonRecipeFurnace_1_17 extends AddonRecipeFurnace {
	constructor(definitions = {}) {
		super("1.17", definitions);
	}
}

class AddonRecipeShaped extends AddonRecipe {
	constructor(format_version, definitions) {
		super(format_version, RecipeTypes.Shaped, definitions);
	}

	assumeSymmetry() {
		this.definitions.assume_symmetry = true;
	}

	key(key) {
		this.definitions.key = key;
		return this;
	}

	pattern(pattern) {
		this.definitions.pattern = pattern;
		return this;
	}

	priority(priority) {
		this.definitions.priority = priority;
		return this;
	}

	output(item) {
		this.definitions.result = typeof item == "string" ? { item } : item;
		return this;
	}

	/**
	 * @param {'1.12'|'1.17'|'1.19'|'1.20'} ver 
	 * @param {any} def 
	 */
	static create(ver, def) {
		return new AddonRecipeShaped(ver, def)
	}
}

class AddonRecipeShaped_1_20 extends AddonRecipeShaped {
	constructor(definitions) {
		super("1.20", RecipeTypes.Shaped, definitions);
	}
}

class AddonRecipeShapeless extends AddonRecipe {
	constructor(format_version, definitions) {
		super(format_version, RecipeTypes.Shapeless, definitions);
	}

	/**
	 * @param {'1.12'|'1.17'} ver 
	 * @param {any} def 
	 */
	static create(ver, def) {
		return new AddonRecipeShapeless(ver, def)
	}

	priority(priority) {
		this.definitions.priority = priority;
		return this;
	}

	ingredients(ingredients) {
		this.definitions.ingredients = ingredients;
		return this;
	}

	output(item) {
		this.definitions.result = typeof item == "string" ? { item } : item;
		return this;
	}
}

class AddonRecipeShapeless_1_17 extends AddonRecipeShapeless {
	constructor(definitions) {
		super("1.17", definitions);
	}
}

class RecipeRegistry  {
	/**
	 * 
	 * @param {AddonRecipeFurnace_1_17} recipe 
	 */
	registerRecipe(recipe) {
		GRegistry.register(recipe.getId().replace(":", "_"), "behavior", "recipes/", recipe);
	}
	registerSimpleFurnace(identifier, output, input) {
		return this.registerFurnace(identifier).tags([RecipeTags.Furnace]).input(input).output(output);
	}

	registerFurnace(identifier) {
		const recipe = new AddonRecipeFurnace_1_17().identifier(identifier);
		this.registerRecipe(recipe);
		return recipe;
	}

	registerSimpleShaped(identifier, output, pattern, key) {
		return this.registerShaped(identifier).tags([RecipeTags.CraftingTable]).pattern(pattern).key(key).output(output);
	}

	registerShaped(identifier) {
		const recipe = new AddonRecipeShaped_1_20().identifier(identifier);
		this.registerRecipe(recipe);
		return recipe;
	}

	registerSimpleShapeless(identifier, output, ingredients) {
		return this.registerShapeless(identifier).tags([RecipeTags.CraftingTable]).ingredients(ingredients).output(output);
	}

	registerShapeless(identifier) {
		const recipe = new AddonRecipeShapeless_1_17().identifier(identifier);
		this.registerRecipe(recipe);
		return recipe;
	}
}

const RecipeAPI = new RecipeRegistry();

class ItemTextureManager {
    static item_texture_sets = new Map();
    static getItemTextureSet(){
        return this.item_texture_sets;
    }
    static getItemTextures(){
        return Object.fromEntries(this.item_texture_sets);
    }
    static registerTextureData(texture_name,texture_data){
        this.item_texture_sets.set(texture_name,texture_data);
    }
    static registerTexture(texture_name,texture_path){
        this.registerTextureData(texture_name,{textures:texture_path});
    }
}

class terrainTextureManager {
    static terrain_texture_sets = new Map();
    static getTerrainTextureSet(){
        return this.terrain_texture_sets;
    }
    static getTerrainTextures(){
        return Object.fromEntries(this.terrain_texture_sets);
    }
    static registerTextureData(texture_name,texture_data){
        this.terrain_texture_sets.set(texture_name,texture_data);
    }
    static registerTexture(texture_name,texture_path){
        this.registerTextureData(texture_name,{textures:texture_path});
    }
}

const FlipbookTextures = {
    flipbook_textures: [],
    registerFlipbookTexture(atlas_tile,texture,ticks_per_frame,options = {}){
        const flipbook_texture = {"atlas_tile":atlas_tile,"flipbook_texture":texture,ticks_per_frame};
        Object.assign(flipbook_texture,options);
        this.flipbook_textures.push(flipbook_texture);
    }
};

var ItemCategory;
(function (ItemCategory) {
    ItemCategory["Commands"] = "commands";
    ItemCategory["Construction"] = "construction";
    ItemCategory["Equipment"] = "equipment";
    ItemCategory["Nature"] = "nature";
    ItemCategory["Items"] = "items";
    ItemCategory["None"] = "none";
})(ItemCategory || (ItemCategory = {}));

class ArrayEx extends Array {
    constructor(init) {
        super();
        if (Array.isArray(init)) {
            this.set(init);
        }
    }
    set(arr) {
        let i = 0;
        for (const el of arr) {
            this[i] = el;
            i++;
        }
    }
}

class Vec3 extends ArrayEx {
    x = 0;
    y = 0;
    z = 0;
    constructor(init) {
        super(init);
        this.x = init[0] || 0;
        this.y = init[1] || 0;
        this.z = init[2] || 0;
    }
    static fromXYZ(x, y, z) {
        return new Vec3([x, y, z]);
    }
    static fromVec3(vec3) {
        return new Vec3([vec3.x, vec3.y, vec3.z]);
    }
    static m(vec3) {
        const { x, y, z } = vec3;
        return Math.sqrt(x * x + y * y + z * z);
    }
    m() {
        return Vec3.m(this);
    }
    static isZero(vec) {
        return vec.x === 0 && vec.y === 0 && vec.z === 0;
    }
    isZero() {
        return Vec3.isZero(this);
    }
    static normalize(vec) {
        if (this.isZero(vec)) {
            return false;
        }
        const { x, y, z } = vec;
        const m = this.m(vec);
        vec.x = x / m;
        vec.y = y / m;
        vec.z = z / m;
    }
    n() {
        return Vec3.normalize(this);
    }
    static add(vec1, vec2) {
        return new Vec3([vec1.x + vec2.x, vec1.y + vec2.y, vec1.z + vec2.z]);
    }
    add(vec) {
        return Vec3.add(this, vec);
    }
    static sub(vec1, vec2) {
        return new Vec3([vec1.x - vec2.x, vec1.y - vec2.y, vec1.z - vec2.z]);
    }
    sub(vec) {
        return Vec3.sub(this, vec);
    }
    static mul(vec, scalar) {
        return new Vec3([vec.x * scalar, vec.y * scalar, vec.z * scalar]);
    }
    mul(scalar) {
        return Vec3.mul(this, scalar);
    }
    static div(vec, scalar) {
        return new Vec3([vec.x / scalar, vec.y / scalar, vec.z / scalar]);
    }
    div(scalar) {
        return Vec3.div(this, scalar);
    }
    static dot(vec1, vec2) {
        return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z;
    }
    dot(vec) {
        return Vec3.dot(this, vec);
    }
    static cross(vec1, vec2) {
        return new Vec3([
            vec1.y * vec2.z - vec1.z * vec2.y,
            vec1.z * vec2.x - vec1.x * vec2.z,
            vec1.x * vec2.y - vec1.y * vec2.x
        ]);
    }
    cross(vec) {
        return Vec3.cross(this, vec);
    }
    valueOf() {
        return new ArrayEx([this.x, this.y, this.z]);
    }
    toString() {
        return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)})`;
    }
}

class Vec4 extends ArrayEx {
    x = 0;
    y = 0;
    z = 0;
    w = 0;
    constructor(init) {
        super(init);
        this.x = init[0] || 0;
        this.y = init[1] || 0;
        this.z = init[2] || 0;
        this.w = init[3] || 0;
    }
    static fromXYZW(x, y, z, w) {
        return new Vec4([x, y, z, w]);
    }
    static fromVec3(vec3) {
        return new Vec4([vec3.x, vec3.y, vec3.z]);
    }
    static fromVec4(vec4) {
        return new Vec4([vec4.x, vec4.y, vec4.z, vec4.w]);
    }
    static m(vec) {
        const { x, y, z, w } = vec;
        return Math.sqrt(x * x + y * y + z * z + w * w);
    }
    m() {
        return Vec4.m(this);
    }
    static isZero(vec) {
        return vec.x === 0 && vec.y === 0 && vec.z === 0 && vec.w === 0;
    }
    isZero() {
        return Vec4.isZero(this);
    }
    static normalize(vec) {
        if (this.isZero(vec)) {
            return false;
        }
        const { x, y, z, w } = vec;
        const m = this.m(vec);
        vec.x = x / m;
        vec.y = y / m;
        vec.z = z / m;
        vec.w = w / m;
    }
    n() {
        return Vec4.normalize(this);
    }
    static add(vec1, vec2) {
        return new Vec4([vec1.x + vec2.x, vec1.y + vec2.y, vec1.z + vec2.z, vec1.w + vec2.w]);
    }
    add(vec) {
        return Vec4.add(this, vec);
    }
    static sub(vec1, vec2) {
        return new Vec4([vec1.x - vec2.x, vec1.y - vec2.y, vec1.z - vec2.z, vec1.w - vec2.w]);
    }
    sub(vec) {
        return Vec4.sub(this, vec);
    }
    static mul(vec, scalar) {
        return new Vec4([vec.x * scalar, vec.y * scalar, vec.z * scalar, vec.w * scalar]);
    }
    mul(scalar) {
        return Vec4.mul(this, scalar);
    }
    static div(vec, scalar) {
        return new Vec4([vec.x / scalar, vec.y / scalar, vec.z / scalar, vec.w / scalar]);
    }
    div(scalar) {
        return Vec4.div(this, scalar);
    }
    static dot(vec1, vec2) {
        return vec1.x * vec2.x + vec1.y * vec2.y + vec1.z * vec2.z + vec1.w * vec2.w;
    }
    dot(vec) {
        return Vec4.dot(this, vec);
    }
    static multiply(vec, mat) {
        return Matrix.multiply(mat, vec);
    }
    multiply(mat) {
        return Vec4.multiply(this, mat);
    }
    valueOf() {
        return new ArrayEx([this.x, this.y, this.z, this.w]);
    }
    toString() {
        return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)}, ${this.w.toFixed(2)})`;
    }
}

class Matrix extends ArrayEx {
    constructor() {
        super([].fill(0, 0, 16));
        this.fill(0);
    }
    get m11() {
        return this[0];
    }
    get m12() {
        return this[1];
    }
    get m13() {
        return this[2];
    }
    get m14() {
        return this[3];
    }
    get m21() {
        return this[4];
    }
    get m22() {
        return this[5];
    }
    get m23() {
        return this[6];
    }
    get m24() {
        return this[7];
    }
    get m31() {
        return this[8];
    }
    get m32() {
        return this[9];
    }
    get m33() {
        return this[10];
    }
    get m34() {
        return this[11];
    }
    get m41() {
        return this[12];
    }
    get m42() {
        return this[13];
    }
    get m43() {
        return this[14];
    }
    get m44() {
        return this[15];
    }
    set m11(v) {
        this[0] = v;
    }
    set m12(v) {
        this[1] = v;
    }
    set m13(v) {
        this[2] = v;
    }
    set m14(v) {
        this[3] = v;
    }
    set m21(v) {
        this[4] = v;
    }
    set m22(v) {
        this[5] = v;
    }
    set m23(v) {
        this[6] = v;
    }
    set m24(v) {
        this[7] = v;
    }
    set m31(v) {
        this[8] = v;
    }
    set m32(v) {
        this[9] = v;
    }
    set m33(v) {
        this[10] = v;
    }
    set m34(v) {
        this[11] = v;
    }
    set m41(v) {
        this[12] = v;
    }
    set m42(v) {
        this[13] = v;
    }
    set m43(v) {
        this[14] = v;
    }
    set m44(v) {
        this[15] = v;
    }
    get a() {
        return this.m11;
    }
    get b() {
        return this.m12;
    }
    get c() {
        return this.m21;
    }
    get d() {
        return this.m22;
    }
    get e() {
        return this.m41;
    }
    get f() {
        return this.m42;
    }
    set a(v) {
        this.m11 = v;
    }
    set b(v) {
        this.m12 = v;
    }
    set c(v) {
        this.m21 = v;
    }
    set d(v) {
        this.m22 = v;
    }
    set e(v) {
        this.m41 = v;
    }
    set f(v) {
        this.m42 = v;
    }
    static init(init, mapfn, thisArg) {
        const arr = ArrayEx.from(init, mapfn, thisArg);
        const m = new Matrix();
        m.set(arr);
        return m;
    }
    clone() {
        return Matrix.init(this.slice(), v => v);
    }
    setIdentity() {
        this.set([
            1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1
        ]);
        return this;
    }
    static identity() {
        const m = new Matrix();
        m.setIdentity();
        return m;
    }
    static add(m1, m2) {
        const m = new Matrix();
        m.set(m1.map((v, i) => v + m2[i]));
        return m;
    }
    add(m) {
        return Matrix.add(this, m);
    }
    static sub(m1, m2) {
        const m = new Matrix();
        m.set(m1.map((v, i) => v - m2[i]));
        return m;
    }
    sub(m) {
        return Matrix.sub(this, m);
    }
    setTranslation(x, y, z) {
        this.m14 = x;
        this.m24 = y;
        this.m34 = z;
        return this;
    }
    setRotation(angle, axis) {
        Vec3.normalize(axis);
        const sin = Math.sin(angle);
        const cos = Math.cos(angle);
        const x = axis.x;
        const y = axis.y;
        const z = axis.z;
        const t = 1 - cos;
        const a00 = t * x * x + cos;
        const a01 = t * x * y - sin * z;
        const a02 = t * x * z + sin * y;
        const a10 = t * x * y + sin * z;
        const a11 = t * y * y + cos;
        const a12 = t * y * z - sin * x;
        const a20 = t * x * z - sin * y;
        const a21 = t * y * z + sin * x;
        const a22 = t * z * z + cos;
        this.m11 = a00;
        this.m12 = a01;
        this.m13 = a02;
        this.m21 = a10;
        this.m22 = a11;
        this.m23 = a12;
        this.m31 = a20;
        this.m32 = a21;
        this.m33 = a22;
        return this;
    }
    setScale(x, y, z) {
        this.m11 *= x;
        this.m22 *= y;
        this.m33 *= z;
        return this;
    }
    setRotationX(angle) {
        const sin = Math.sin(angle);
        const cos = Math.cos(angle);
        this.m11 = 1;
        this.m12 = 0;
        this.m13 = 0;
        this.m21 = 0;
        this.m22 = cos;
        this.m23 = sin;
        this.m31 = 0;
        this.m32 = -sin;
        this.m33 = cos;
        return this;
    }
    setRotationY(angle) {
        const sin = Math.sin(angle);
        const cos = Math.cos(angle);
        this.m11 = cos;
        this.m12 = 0;
        this.m13 = -sin;
        this.m21 = 0;
        this.m22 = 1;
        this.m23 = 0;
        this.m31 = sin;
        this.m32 = 0;
        this.m33 = cos;
        return this;
    }
    setRotationZ(angle) {
        const sin = Math.sin(angle);
        const cos = Math.cos(angle);
        this.m11 = cos;
        this.m12 = sin;
        this.m13 = 0;
        this.m21 = -sin;
        this.m22 = cos;
        this.m23 = 0;
        this.m31 = 0;
        this.m32 = 0;
        this.m33 = 1;
        return this;
    }
    setRotationXYZ(yaw, pitch, roll) {
        const sinYaw = Math.sin(yaw);
        const cosYaw = Math.cos(yaw);
        const sinPitch = Math.sin(pitch);
        const cosPitch = Math.cos(pitch);
        const sinRoll = Math.sin(roll);
        const cosRoll = Math.cos(roll);
        this.m11 = cosYaw * cosRoll + sinYaw * sinPitch * sinRoll;
        this.m12 = cosYaw * sinRoll - sinYaw * sinPitch * cosRoll;
        this.m13 = sinYaw * cosPitch;
        this.m21 = sinYaw * cosRoll - cosYaw * sinPitch * sinRoll;
        this.m22 = cosYaw * cosRoll - sinYaw * sinPitch * cosRoll;
        this.m23 = cosYaw * sinPitch;
        this.m31 = sinYaw * sinRoll + cosYaw * sinPitch * cosRoll;
        this.m32 = -sinYaw * cosRoll + cosYaw * sinPitch * sinRoll;
        this.m33 = cosYaw * cosPitch;
        return this;
    }
    static translate(mat, vec) {
        const { x, y, z } = vec;
        const m = mat.clone();
        m.m14 = m.m11 * x + m.m21 * y + m.m31 * z + x;
        m.m24 = m.m21 * x + m.m22 * y + m.m32 * z + y;
        m.m34 = m.m31 * x + m.m32 * y + m.m33 * z + z;
        return m;
    }
    translate(vec) {
        return Matrix.translate(this, vec);
    }
    static transpose(mat) {
        return this.from([
            mat.m11, mat.m21, mat.m31, mat.m41,
            mat.m12, mat.m22, mat.m32, mat.m42,
            mat.m13, mat.m23, mat.m33, mat.m43,
            mat.m14, mat.m24, mat.m34, mat.m44
        ]);
    }
    transpose() {
        return Matrix.transpose(this);
    }
    static multiply(mat1, t) {
        if (t instanceof Matrix) {
            return this.from([
                mat1.m11 * t.m11 + mat1.m12 * t.m21 + mat1.m13 * t.m31 + mat1.m14 * t.m41,
                mat1.m11 * t.m12 + mat1.m12 * t.m22 + mat1.m13 * t.m32 + mat1.m14 * t.m42,
                mat1.m11 * t.m13 + mat1.m12 * t.m23 + mat1.m13 * t.m33 + mat1.m14 * t.m43,
                mat1.m11 * t.m14 + mat1.m12 * t.m24 + mat1.m13 * t.m34 + mat1.m14 * t.m44,
                mat1.m21 * t.m11 + mat1.m22 * t.m21 + mat1.m23 * t.m31 + mat1.m24 * t.m41,
                mat1.m21 * t.m12 + mat1.m22 * t.m22 + mat1.m23 * t.m32 + mat1.m24 * t.m42,
                mat1.m21 * t.m13 + mat1.m22 * t.m23 + mat1.m23 * t.m33 + mat1.m24 * t.m43,
                mat1.m21 * t.m14 + mat1.m22 * t.m24 + mat1.m23 * t.m34 + mat1.m24 * t.m44,
                mat1.m31 * t.m11 + mat1.m32 * t.m21 + mat1.m33 * t.m31 + mat1.m34 * t.m41,
                mat1.m31 * t.m12 + mat1.m32 * t.m22 + mat1.m33 * t.m32 + mat1.m34 * t.m42,
                mat1.m31 * t.m13 + mat1.m32 * t.m23 + mat1.m33 * t.m33 + mat1.m34 * t.m43,
                mat1.m31 * t.m14 + mat1.m32 * t.m24 + mat1.m33 * t.m34 + mat1.m34 * t.m44,
                mat1.m41 * t.m11 + mat1.m42 * t.m21 + mat1.m43 * t.m31 + mat1.m44 * t.m41,
                mat1.m41 * t.m12 + mat1.m42 * t.m22 + mat1.m43 * t.m32 + mat1.m44 * t.m42,
                mat1.m41 * t.m13 + mat1.m42 * t.m23 + mat1.m43 * t.m33 + mat1.m44 * t.m43,
                mat1.m41 * t.m14 + mat1.m42 * t.m24 + mat1.m43 * t.m34 + mat1.m44 * t.m44
            ]);
        }
        return new Vec4([
            mat1.m11 * t.x + mat1.m12 * t.y + mat1.m13 * t.z + mat1.m14 * t.w,
            mat1.m21 * t.x + mat1.m22 * t.y + mat1.m23 * t.z + mat1.m24 * t.w,
            mat1.m31 * t.x + mat1.m32 * t.y + mat1.m33 * t.z + mat1.m34 * t.w,
            mat1.m41 * t.x + mat1.m42 * t.y + mat1.m43 * t.z + mat1.m44 * t.w
        ]);
    }
    multiply(t) {
        return Matrix.multiply(this, t);
    }
    //@ts-ignore
    valueOf() {
        return new ArrayEx(this);
    }
    toString() {
        return `${this.m11.toFixed(2)}\t${this.m12.toFixed(2)}\t${this.m13.toFixed(2)}\t${this.m14.toFixed(2)}\n` +
            `${this.m21.toFixed(2)}\t${this.m22.toFixed(2)}\t${this.m23.toFixed(2)}\t${this.m24.toFixed(2)}\n` +
            `${this.m31.toFixed(2)}\t${this.m32.toFixed(2)}\t${this.m33.toFixed(2)}\t${this.m34.toFixed(2)}\n` +
            `${this.m41.toFixed(2)}\t${this.m42.toFixed(2)}\t${this.m43.toFixed(2)}\t${this.m44.toFixed(2)}\n`;
    }
    static perspective(fov, aspect, near, far) {
        const tan = Math.tan(fov / 2);
        const r = tan * aspect;
        return Matrix.from([
            near / r, 0, 0, 0,
            0, 1 / tan, 0, 0,
            0, 0, -(near + far) / (far - near), -2 * far * near / (far - near),
            0, 0, -1, 0
        ]);
    }
    static orthographic(right, top, near, far) {
        return Matrix.from([
            1 / right, 0, 0, 0,
            0, 1 / top, 0, 0,
            0, 0, -2 / (far - near), -(far + near) / (far - near),
            0, 0, 0, 1
        ]);
    }
    static lookAt(eye, target, up) {
        const look = Vec3.sub(target, eye);
        look.n();
        const right = Vec3.cross(up, look);
        right.n();
        const newUp = Vec3.cross(look, right);
        newUp.n();
        return Matrix.from([
            right.x, right.y, right.z, -Vec3.dot(right, eye),
            newUp.x, newUp.y, newUp.z, -Vec3.dot(newUp, eye),
            look.x, look.y, look.z, -Vec3.dot(look, eye),
            0, 0, 0, 1
        ]);
    }
}

/**
 * Control Class
 * 
 * This class represents a UI control element with various properties and methods to manipulate its state.
 * 
 * Properties:
 * - visible: boolean - If the UI element should be visible (default: true)
 * - enabled: boolean - If true and if the UI element or any of its children have the locked state then they will be in the locked (default: true)
 * - layer: int - Z-Index/Layer (like zindex in CSS) relative to parent element. Higher layers will render above (default: 0)
 * - alpha: float - Alpha/transparency of the element. It will only affect the UI element. Its children will be unaffected. (default: 1.0)
 * - propagate_alpha: boolean - If alpha should not only apply to the parent if possible but also all its children (default: false)
 * - clips_children: boolean - Cuts off visually and interactively everything beyond the boundaries of the UI element (default: false)
 * - allow_clipping: boolean - If clips_children works in the UI element. Otherwise, it won't have any effect (default: true)
 * - clip_offset: Vector [x, y] - Offset from the start of the clipping (default: [0, 0])
 * - clip_state_change_event: string - Event triggered when the clip state changes
 * - enable_scissor_test: boolean - Enables scissor test for clipping (default: false)
 * - property_bag: object - Property bag contains properties/variables that are more related with the data than the actual structure and look of the UI element
 * - selected: boolean - If the text box is selected by default
 * - use_child_anchors: boolean - Use the anchor_from and anchor_to of the child of the UI element (default: false)
 * - controls: array - For adding children to the element
 * - anims: string[] - Array of the animation names
 * - disable_anim_fast_forward: boolean - Disables fast-forwarding animations
 * - animation_reset_name: string - Name of the animation to reset to
 * - ignored: boolean - If the UI element should be ignored (default: false)
 * - variables: array or object - A bunch of conditions that change the variables values
 * - modifications: array - Allows to modify the UI files of resource packs below (vanilla being the most bottom one)
 * - grid_position: Vector [row, column] - Position that the control will take inside the grid. This also allows to modify specific grid items of a hardcoded grid
 * - collection_index: int - Index that the control takes in the collection
 */
/**
 * Control 类
 * 
 * 该类表示一个具有各种属性和方法的 UI 控件元素，用于操作其状态。
 * 
 * 属性：
 * - visible: boolean - 控制 UI 元素是否可见（默认值：true）
 * - enabled: boolean - 如果为 true，且 UI 元素或其任何子元素处于锁定状态，则它们将被锁定（默认值：true）
 * - layer: int - 相对于父元素的 Z-Index/层级（类似于 CSS 中的 zindex）。较高的层级将渲染在上方（默认值：0）
 * - alpha: float - 元素的透明度。仅影响 UI 元素本身，其子元素不受影响。如果希望透明度同时应用于父元素和子元素，请使用 propagate_alpha（默认值：1.0）
 * - propagate_alpha: boolean - 透明度是否应同时应用于父元素及其所有子元素（默认值：false）
 * - clips_children: boolean - 是否在视觉上和交互上裁剪超出 UI 元素边界的内容（默认值：false）
 * - allow_clipping: boolean - 是否允许在 UI 元素中启用裁剪。否则，clips_children 将无效（默认值：true）
 * - clip_offset: Vector [x, y] - 裁剪起始点的偏移量（默认值：[0, 0]）
 * - clip_state_change_event: string - 裁剪状态更改时触发的事件
 * - enable_scissor_test: boolean - 是否启用裁剪测试（默认值：false）
 * - property_bag: object - 属性包，包含与数据相关的属性/变量，而不是 UI 元素的实际结构和外观
 * - selected: boolean - 文本框是否默认被选中
 * - use_child_anchors: boolean - 是否使用 UI 元素子元素的 anchor_from 和 anchor_to（默认值：false）
 * - controls: array - 用于向元素添加子元素
 * - anims: string[] - 动画名称数组
 * - disable_anim_fast_forward: boolean - 是否禁用动画快进
 * - animation_reset_name: string - 重置动画的名称
 * - ignored: boolean - 是否忽略该 UI 元素（默认值：false）
 * - variables: array 或 object - 一组条件，用于更改变量的值
 * - modifications: array - 允许修改资源包中的 UI 文件（最底层为原版资源包）
 * - grid_position: Vector [row, column] - 控件在网格中的位置。此属性还允许修改硬编码网格中的特定网格项
 * - collection_index: int - 控件在集合中的索引
 */

class Control {
    constructor() {
        /*
        this.visible = true;
        this.enabled = true;
        this.layer = 0;
        this.alpha = 1.0;
        this.propagate_alpha = false;
        this.clips_children = false;
        this.allow_clipping = true;
        this.clip_offset = [0, 0];
        this.clip_state_change_event = '';
        this.enable_scissor_test = false;
        this.property_bag = {};
        this.selected = false;
        this.use_child_anchors = false;
        this.controls = [];
        this.anims = [];
        this.disable_anim_fast_forward = false;
        this.animation_reset_name = '';
        this.ignored = false;
        this.variables = {};
        this.modifications = [];
        this.grid_position = [0, 0];
        this.collection_index = 0;
        */
    }

    /**
     * 设置控件的可见性。
     * @param {boolean} visible - 控件是否可见（默认值：true）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setVisible(visible = true) {
        this.visible = visible;
        return this;
    }

    /**
     * 设置控件的启用状态。
     * @param {boolean} enabled - 控件是否启用（默认值：true）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setEnabled(enabled = true) {
        this.enabled = enabled;
        return this;
    }

    /**
     * 设置控件的层级（z-index）。
     * @param {number} layer - 要设置的层级（默认值：0）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setLayer(layer = 0) {
        this.layer = layer;
        return this;
    }

    /**
     * 设置控件的透明度。
     * @param {number} alpha - 要设置的透明度值（默认值：1.0）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setAlpha(alpha = 1.0) {
        this.alpha = alpha;
        return this;
    }

    /**
     * 设置透明度是否应传播到子元素。
     * @param {boolean} propagate - 透明度是否应传播（默认值：false）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setPropagateAlpha(propagate = false) {
        this.propagate_alpha = propagate;
        return this;
    }

    /**
     * 设置控件是否应裁剪其子元素。
     * @param {boolean} clips - 控件是否应裁剪其子元素（默认值：false）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setClipsChildren(clips = false) {
        this.clips_children = clips;
        return this;
    }

    /**
     * 设置控件是否允许裁剪。
     * @param {boolean} allow - 是否允许裁剪（默认值：true）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setAllowClipping(allow = true) {
        this.allow_clipping = allow;
        return this;
    }

    /**
     * 设置控件的裁剪偏移量。
     * @param {number[]} offset - 裁剪偏移量，格式为 [x, y]（默认值：[0, 0]）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setClipOffset(offset = [0, 0]) {
        this.clip_offset = offset;
        return this;
    }

    /**
     * 设置裁剪状态更改事件。
     * @param {string} event - 裁剪状态更改时触发的事件名称
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setClipStateChangeEvent(event) {
        this.clip_state_change_event = event;
        return this;
    }

    /**
     * 设置是否启用裁剪测试。
     * @param {boolean} enable - 是否启用裁剪测试（默认值：false）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setEnableScissorTest(enable = false) {
        this.enable_scissor_test = enable;
        return this;
    }

    /**
     * 设置控件的属性包。
     * @param {object} bag - 要设置的属性包
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setPropertyBag(bag) {
        this.property_bag = bag;
        return this;
    }

    /**
     * 设置控件是否被选中。
     * @param {boolean} selected - 控件是否被选中（默认值：false）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setSelected(selected = false) {
        this.selected = selected;
        return this;
    }

    /**
     * 设置控件是否使用子元素的锚点。
     * @param {boolean} use - 是否使用子元素的锚点（默认值：false）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setUseChildAnchors(use = false) {
        this.use_child_anchors = use;
        return this;
    }

    /**
     * 向控件添加子控件。
     * @param {Control} control - 要添加的子控件
     * @returns {Control} 返回当前实例以支持链式调用
     */
    addControl(control) {
        if (!this.controls) this.controls = [];
        this.controls.push(control);
        return this;
    }

    /**
     * 设置控件的动画。
     * @param {string[]} anims - 动画名称数组
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setAnimations(anims) {
        this.anims = anims;
        return this;
    }

    /**
     * 设置是否禁用动画快进。
     * @param {boolean} disable - 是否禁用动画快进（默认值：false）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setDisableAnimFastForward(disable = false) {
        this.disable_anim_fast_forward = disable;
        return this;
    }

    /**
     * 设置动画重置名称。
     * @param {string} name - 要重置的动画名称
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setAnimationResetName(name) {
        this.animation_reset_name = name;
        return this;
    }

    /**
     * 设置是否忽略该控件。
     * @param {boolean} ignored - 是否忽略该控件（默认值：false）
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setIgnored(ignored = false) {
        this.ignored = ignored;
        return this;
    }

    /**
     * 设置控件的变量。
     * @param {object} variables - 要设置的变量
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setVariables(variables) {
        this.variables = variables;
        return this;
    }

    /**
     * 设置控件的修改项。
     * @param {array} modifications - 要设置的修改项
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setModifications(modifications) {
        this.modifications = modifications;
        return this;
    }

    /**
     * 设置控件在网格中的位置。
     * @param {number[]} position - 网格位置，格式为 [行, 列]
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setGridPosition(position) {
        this.grid_position = position;
        return this;
    }

    /**
     * 设置控件在集合中的索引。
     * @param {number} index - 要设置的索引
     * @returns {Control} 返回当前实例以支持链式调用
     */
    setCollectionIndex(index) {
        this.collection_index = index;
        return this;
    }
}

class DataBinding{
    constructor(){
    }
    setBinding(binding){
        if(!this.bindings) this.bindings = [];
        this.binding = binding;
        return this;
    }
    addDataBinding(dataBindingObject){
        if(!this.bindings) this.bindings = [];
        this.bindings.push(dataBindingObject);
        return this;
    }
}

/**
 * Factory 类
 * 
 * 该类表示一个工厂控件，用于管理子控件的名称和 ID。
 * 
 * 属性：
 * - control_name: string - 工厂的子控件名
 * - control_ids: object - 工厂的子控件 ID 对象组
 */

class Factory {
    constructor() {
        
        /*
        this.control_name = '';
        this.control_ids = {};
        */
    }
    /**
     * 设置工厂的名。
     * @param {string} name - 名（格式：name）
     * @returns {Factory} 返回当前实例以支持链式调用
     */
    setName(name) {
        if(!this.factory) this.factory = {};
        this.factory.name = name;
        return this;
    }

    /**
     * 设置工厂的子控件名。
     * @param {string} name - 子控件名（格式：namespace.controls_name）
     * @returns {Factory} 返回当前实例以支持链式调用
     */
    setControlName(name) {
        if(!this.factory) this.factory = {};
        this.factory.control_name = name;
        return this;
    }

    /**
     * 设置工厂的子控件 ID 对象组。
     * @param {object} ids - 子控件 ID 对象组
     * @returns {Factory} 返回当前实例以支持链式调用
     */
    setControlIds(ids) {
        if(!this.factory) this.factory = {};
        this.factory.control_ids = ids;
        return this;
    }

    /**
     * 添加一个子控件 ID。
     * @param {string} key - 子控件的键名
     * @param {string} value - 子控件的 ID 值
     * @returns {Factory} 返回当前实例以支持链式调用
     */
    addControlId(key, value) {
        if(!this.factory) this.factory = {};
        this.factory.control_ids[key] = value;
        return this;
    }
}

/**
 * Input 类
 * 
 * 该类表示输入配置，用于管理 UI 元素的输入行为。
 * 
 * 属性：
 * - button_mappings: Array of mapping objects - 按钮映射配置
 * - modal: boolean - 是否为模态输入
 * - inline_modal: boolean - 是否为内联模态输入
 * - always_listen_to_input: boolean - 是否始终监听输入
 * - always_handle_pointer: boolean - 是否始终处理指针事件
 * - always_handle_controller_direction: boolean - 是否始终处理控制器方向事件
 * - hover_enabled: boolean - 是否启用悬停事件
 * - prevent_touch_input: boolean - 是否阻止触摸输入
 * - consume_event: boolean - 是否消耗事件
 * - consume_hover_events: boolean - 是否消耗悬停事件
 * - gesture_tracking_button: string - 手势跟踪按钮
 */

class Input {
    constructor() {
        /*
        this.button_mappings = [];
        this.modal = false;
        this.inline_modal = false;
        this.always_listen_to_input = false;
        this.always_handle_pointer = false;
        this.always_handle_controller_direction = false;
        this.hover_enabled = false;
        this.prevent_touch_input = false;
        this.consume_event = false;
        this.consume_hover_events = false;
        this.gesture_tracking_button = '';
        */
    }

    /**
     * 设置按钮映射配置。
     * @param {ButtonMapping[]} mappings - 按钮映射配置数组
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setButtonMappings(mappings) {
        this.button_mappings = mappings;
        return this;
    }

    /**
     * 设置是否为模态输入。
     * @param {boolean} modal - 是否为模态输入
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setModal(modal = false) {
        this.modal = modal;
        return this;
    }

    /**
     * 设置是否为内联模态输入。
     * @param {boolean} inlineModal - 是否为内联模态输入
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setInlineModal(inlineModal = false) {
        this.inline_modal = inlineModal;
        return this;
    }

    /**
     * 设置是否始终监听输入。
     * @param {boolean} alwaysListen - 是否始终监听输入
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setAlwaysListenToInput(alwaysListen = false) {
        this.always_listen_to_input = alwaysListen;
        return this;
    }

    /**
     * 设置是否始终处理指针事件。
     * @param {boolean} alwaysHandle - 是否始终处理指针事件
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setAlwaysHandlePointer(alwaysHandle = false) {
        this.always_handle_pointer = alwaysHandle;
        return this;
    }

    /**
     * 设置是否始终处理控制器方向事件。
     * @param {boolean} alwaysHandle - 是否始终处理控制器方向事件
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setAlwaysHandleControllerDirection(alwaysHandle = false) {
        this.always_handle_controller_direction = alwaysHandle;
        return this;
    }

    /**
     * 设置是否启用悬停事件。
     * @param {boolean} enabled - 是否启用悬停事件
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setHoverEnabled(enabled = false) {
        this.hover_enabled = enabled;
        return this;
    }

    /**
     * 设置是否阻止触摸输入。
     * @param {boolean} prevent - 是否阻止触摸输入
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setPreventTouchInput(prevent = false) {
        this.prevent_touch_input = prevent;
        return this;
    }

    /**
     * 设置是否消耗事件。
     * @param {boolean} consume - 是否消耗事件
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setConsumeEvent(consume = false) {
        this.consume_event = consume;
        return this;
    }

    /**
     * 设置是否消耗悬停事件。
     * @param {boolean} consume - 是否消耗悬停事件
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setConsumeHoverEvents(consume = false) {
        this.consume_hover_events = consume;
        return this;
    }

    /**
     * 设置手势跟踪按钮。
     * @param {string} button - 手势跟踪按钮
     * @returns {Input} 返回当前实例以支持链式调用
     */
    setGestureTrackingButton(button) {
        this.gesture_tracking_button = button;
        return this;
    }
}

/**
 * Layout 类
 * 
 * 该类表示一个具有各种属性和方法的 UI 布局元素，用于操作其布局和大小。
 * 
 * 属性：
 * - size: Vector [width, height] - UI 元素的大小（默认值：["default", "default"]）
 * - max_size: Vector [width, height] - UI 元素的最大大小（默认值：["default", "default"]）
 * - min_size: Vector [width, height] - UI 元素的最小大小（默认值：["default", "default"]）
 * - offset: Vector [x, y] - UI 元素相对于父元素的位置（默认值：[0, 0]）
 * - anchor_from: enum - 父元素中的锚点（默认值：center）
 * - anchor_to: enum - 元素自身的锚点（默认值：center）
 * - inherit_max_sibling_width: boolean - 是否使用兄弟元素的最大宽度（默认值：false）
 * - inherit_max_sibling_height: boolean - 是否使用兄弟元素的最大高度（默认值：false）
 * - use_anchored_offset: boolean - 是否使用基于锚点的偏移（默认值：false）
 * - contained: boolean - 是否限制元素在父元素边界内（默认值：false）
 * - draggable: enum - 是否使元素可拖动（可能值：vertical, horizontal, both）
 * - follows_cursor: boolean - 是否使元素跟随光标（默认值：false）
 */

class Layout {
    constructor() {
        /*
        this.size = ["default", "default"];
        this.max_size = ["default", "default"];
        this.min_size = ["default", "default"];
        this.offset = [0, 0];
        this.anchor_from = "center";
        this.anchor_to = "center";
        this.inherit_max_sibling_width = false;
        this.inherit_max_sibling_height = false;
        this.use_anchored_offset = false;
        this.contained = false;
        this.draggable = null;
        this.follows_cursor = false;
        */
    }

    /**
     * 设置 UI 元素的大小。
     * @param {any[]} size - 大小，格式为 [width, height]（默认值：["default", "default"]）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setSize(size = ["default", "default"]) {
        this.size = size;
        return this;
    }

    /**
     * 设置 UI 元素的最大大小。
     * @param {string[]} maxSize - 最大大小，格式为 [width, height]（默认值：["default", "default"]）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setMaxSize(maxSize = ["default", "default"]) {
        this.max_size = maxSize;
        return this;
    }

    /**
     * 设置 UI 元素的最小大小。
     * @param {string[]} minSize - 最小大小，格式为 [width, height]（默认值：["default", "default"]）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setMinSize(minSize = ["default", "default"]) {
        this.min_size = minSize;
        return this;
    }

    /**
     * 设置 UI 元素相对于父元素的位置。
     * @param {number[]} offset - 偏移量，格式为 [x, y]（默认值：[0, 0]）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setOffset(offset = [0, 0]) {
        this.offset = offset;
        return this;
    }

    /**
     * 设置父元素中的锚点。
     * @param {string} anchorFrom - 锚点（可能值：top_left, top_middle, top_right, left_middle, center, right_middle, bottom_left, bottom_middle, bottom_right）（默认值：center）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setAnchorFrom(anchorFrom = "center") {
        this.anchor_from = anchorFrom;
        return this;
    }

    /**
     * 设置元素自身的锚点。
     * @param {string} anchorTo - 锚点（可能值：top_left, top_middle, top_right, left_middle, center, right_middle, bottom_left, bottom_middle, bottom_right）（默认值：center）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setAnchorTo(anchorTo = "center") {
        this.anchor_to = anchorTo;
        return this;
    }

    /**
     * 设置是否使用兄弟元素的最大宽度。
     * @param {boolean} inherit - 是否使用兄弟元素的最大宽度（默认值：false）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setInheritMaxSiblingWidth(inherit = false) {
        this.inherit_max_sibling_width = inherit;
        return this;
    }

    /**
     * 设置是否使用兄弟元素的最大高度。
     * @param {boolean} inherit - 是否使用兄弟元素的最大高度（默认值：false）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setInheritMaxSiblingHeight(inherit = false) {
        this.inherit_max_sibling_height = inherit;
        return this;
    }

    /**
     * 设置是否使用基于锚点的偏移。
     * @param {boolean} use - 是否使用基于锚点的偏移（默认值：false）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setUseAnchoredOffset(use = false) {
        this.use_anchored_offset = use;
        return this;
    }

    /**
     * 设置是否限制元素在父元素边界内。
     * @param {boolean} contained - 是否限制元素在父元素边界内（默认值：false）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setContained(contained = false) {
        this.contained = contained;
        return this;
    }

    /**
     * 设置是否使元素可拖动。
     * @param {string} draggable - 是否使元素可拖动（可能值：vertical, horizontal, both）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setDraggable(draggable) {
        this.draggable = draggable;
        return this;
    }

    /**
     * 设置是否使元素跟随光标。
     * @param {boolean} follows - 是否使元素跟随光标（默认值：false）
     * @returns {Layout} 返回当前实例以支持链式调用
     */
    setFollowsCursor(follows = false) {
        this.follows_cursor = follows;
        return this;
    }
}

/**
 * Sound 类
 * 
 * 该类表示一个声音控件，用于管理声音播放及其相关属性。
 * 
 * 属性：
 * - sound_name: string - 声音名称（定义在 RP/sounds/sound_definitions.json 文件中）
 * - sound_volume: float - 声音音量（默认值：1.0）
 * - sound_pitch: float - 声音音调（默认值：1.0）
 * - sounds: Array of sound objects - 触发事件时播放的声音数组
 */

class Sound {
    constructor() {
        /*
        this.sound_name = '';
        this.sound_volume = 1.0;
        this.sound_pitch = 1.0;
        this.sounds = [];
        */
    }

    /**
     * 设置声音名称。
     * @param {string} name - 声音名称（定义在 RP/sounds/sound_definitions.json 文件中）
     * @returns {Sound} 返回当前实例以支持链式调用
     */
    setSoundName(name) {
        this.sound_name = name;
        return this;
    }

    /**
     * 设置声音音量。
     * @param {number} volume - 音量（范围：0.0 到 1.0，默认值：1.0）
     * @returns {Sound} 返回当前实例以支持链式调用
     */
    setSoundVolume(volume = 1.0) {
        this.sound_volume = volume;
        return this;
    }

    /**
     * 设置声音音调。
     * @param {number} pitch - 音调（默认值：1.0）
     * @returns {Sound} 返回当前实例以支持链式调用
     */
    setSoundPitch(pitch = 1.0) {
        this.sound_pitch = pitch;
        return this;
    }

    /**
     * 设置触发事件时播放的声音数组。
     * @param {object[]} sounds - 声音对象数组
     * @returns {Sound} 返回当前实例以支持链式调用
     */
    setSounds(sounds) {
        this.sounds = sounds;
        return this;
    }

    /**
     * 添加一个声音对象到声音数组。
     * @param {object} sound - 声音对象
     * @returns {Sound} 返回当前实例以支持链式调用
     */
    addSound(sound) {
        this.sounds.push(sound);
        return this;
    }
}

// 基础元素类
class UIElement {
    constructor(name, type, template) {
        this.type = type;
        this.id = template ? `${name}@${template}` : name;
        this.name = name;
        this.control = new Control();
        this.properties = new Map().set("type",type);
        this.variables = new Map();
        this.modifications = [];
    }

    enableDebug(){
        this.control.addControl({
            "debug_board": {
                "type": "image",
                "texture": "textures/ui/focus_border_white",
                "nineslice_size": 1,
                "size": [ "100%", "100%" ]
            }
        });
        return this;
    }
    
    setControl(control){
        this.control = control;
        return this;
    }

    addControl(control){
        //console.log("control:  ", control)
        if(control instanceof UIElement) {
            this.control.addControl(control.serialize());
        }
        else {
            this.control.addControl(control);
        }
        return this;
    }

    addControls(controls){
        for(let i in controls){
            this.addControl(controls[i]);
        }
        return this;
    }

    addVariable(name,value){
        this.variables.set(`$${name}`,value);
        return this;
    }

    addProp(name, value) {
        this.properties.set(name,value);
        return this;
    }

    addModification(modification){
        this.modifications.push({
            array_name: modification.array_name,
            operation:modification.operation,
            value:modification.value
        });
        this.addProp("modifications",this.modifications);
        return this;
    }

    serialize() {
        const json = Object.fromEntries(this.properties);
        Object.assign(json,Object.fromEntries(this.variables));
        return {
            [this.id]:json
        };
    }
}


//Modifications ​方法
/**
 * Modifications ​
    To modify JSON UI in a non-intrusive way, you can use the modifications property to modify previously existing JSON UI elements from other packs (usually vanilla JSON UI files). Doing this makes sure only necessary parts are modified unless otherwise intended, to improve compatibility with other packs that modify the JSON UI.

    Modification	Description
    insert_back	insert at end of array
    insert_front	insert at start of array
    insert_after	insert after target in array
    insert_before	insert before target in array
    move_back	move target to end of array
    move_front	move target to start of array
    move_after	move target after second target
    move_before	move target before second target
    swap	swap first target with second target
    replace	replace first target with second target
    remove	remove target
 */
// Modifications操作类型常量类
class Modifications {
    static OPERATION = Object.freeze({
        INSERT_BACK: "insert_back",
        INSERT_FRONT: "insert_front",
        INSERT_AFTER: "insert_after",
        INSERT_BEFORE: "insert_before",
        MOVE_BACK: "move_back",
        MOVE_FRONT: "move_front",
        MOVE_AFTER: "move_after",
        MOVE_BEFORE: "move_before",
        SWAP: "swap",
        REPLACE: "replace",
        REMOVE: "remove"
    });
}

/**
 * Button ​
    Property Name	Type	Default Value	Description
    default_control	string		Name of the child control that will be displayed only in the default state
    hover_control	string		Name of the child control that will be displayed only in the hover state
    pressed_control	string		Name of the child control that will be displayed only in the pressed state
    locked_control	string		Name of the child control that will be displayed only in the locked state
 */


class Button extends UIElement{
    constructor(id,template){
        super(id,"button",template);
        this.input = new Input();
        this.sound = new Sound();
        this.control = new Control();
        this.layout = new Layout();
        this.dataBinding = new DataBinding();
        this.factory = new Factory();
    }
    setDefaultControl(default_control){
        this.addProp("default_control",default_control);
        return this;
    }
    setHoverControl(hover_control){
        this.addProp("hover_control",hover_control);
        return this;
    }
    setPressedControl(pressed_control){
        this.addProp("pressed_control",pressed_control);
        return this;
    }
    setLockedControl(locked_control){
        this.addProp("locked_control",locked_control);
        return this;
    }
    
    setInput(input){
        this.input = input;
        return this;
    }

    setSound(sound){
        this.sound = sound;
        return this;
    }

    setLayout(layout){
        this.layout = layout;
        return this;
    }

    serialize(){
        //序列化

        // 复制Layout的属性
        for (const key in this.layout) {
            if (this.layout.hasOwnProperty(key)) {
                this.properties.set(key, this.layout[key]);
            }
        }

        // 复制input的属性
        for (const key in this.input) {
            if (this.input.hasOwnProperty(key)) {
                this.properties.set(key, this.input[key]);
            }
        }

        // 复制sound的属性
        for (const key in this.sound) {
            if (this.sound.hasOwnProperty(key)) {
                this.properties.set(key, this.sound[key]);
            }
        }

        // 复制DataBinding的属性
        for (const key in this.dataBinding) {
            if (this.dataBinding.hasOwnProperty(key)) {
                this.properties.set(key, this.dataBinding[key]);
            }
        }

         // 复制Factory的属性
         for (const key in this.factory) {
            if (this.factory.hasOwnProperty(key)) {
                this.properties.set(key, this.factory[key]);
            }
        }

        // 复制Control的属性
        for (const key in this.control) {
            if (this.control.hasOwnProperty(key)) {
                this.properties.set(key, this.control[key]);
            }
        }

        // 调用父类的serialize方法
        return super.serialize();
    }
}

class CollectionPanel extends UIElement{
    constructor(id,template){
        super(id,"collection_panel",template);
        this.control = new Control();
        this.layout = new Layout();
        this.dataBinding = new DataBinding();
        this.factory = new Factory();
    }
    setCollectionName(collection_name){
        this.addProp("collection_name",collection_name);
        return this;
    }

    setLayout(layout){
        this.layout = layout;
        return this;
    }

    serialize(){
        //序列化

        // 复制Layout的属性
        for (const key in this.layout) {
            if (this.layout.hasOwnProperty(key)) {
                this.properties.set(key, this.layout[key]);
            }
        }

        // 复制DataBinding的属性
        for (const key in this.dataBinding) {
            if (this.dataBinding.hasOwnProperty(key)) {
                this.properties.set(key, this.dataBinding[key]);
            }
        }

         // 复制Factory的属性
         for (const key in this.factory) {
            if (this.factory.hasOwnProperty(key)) {
                this.properties.set(key, this.factory[key]);
            }
        }

        // 复制Control的属性
        for (const key in this.control) {
            if (this.control.hasOwnProperty(key)) {
                this.properties.set(key, this.control[key]);
            }
        }

        // 调用父类的serialize方法
        return super.serialize();
    }
}

/**
 * Grid 类
 * 
 * 该类表示一个网格控件属性，用于管理网格布局及其相关属性。
 * 
 * 属性：
 * - grid_dimensions: Vector [columns, rows] - 网格的列数和行数
 * - maximum_grid_items: int - 网格生成的最大项目数
 * - grid_dimension_binding: string - 网格尺寸的绑定名称
 * - grid_rescaling_type: enum - 网格重新缩放方向（可能值：vertical, horizontal, none，默认值：none）
 * - grid_fill_direction: enum - 网格填充方向（可能值：vertical, horizontal, none，默认值：none）
 * - grid_item_template: string - 处理集合的子元素名称（例如："common.container_item"）
 * - precached_grid_item_count: int - 预缓存的网格项目数量
 */

class GridProp {
    constructor() {
        /*
        this.grid_dimensions = null;
        this.maximum_grid_items = 0;
        this.grid_dimension_binding = '';
        this.grid_rescaling_type = 'none';
        this.grid_fill_direction = 'none';
        this.grid_item_template = '';
        this.precached_grid_item_count = 0;
        */
    }

    /**
     * 设置网格的列数和行数。
     * @param {number[]} dimensions - 格式为 [columns, rows]
     * @returns {GridProp} 返回当前实例以支持链式调用
     */
    setGridDimensions(dimensions) {
        this.grid_dimensions = dimensions;
        return this;
    }

    /**
     * 设置网格生成的最大项目数。
     * @param {number} maxItems - 最大项目数
     * @returns {GridProp} 返回当前实例以支持链式调用
     */
    setMaximumGridItems(maxItems) {
        this.maximum_grid_items = maxItems;
        return this;
    }

    /**
     * 设置网格尺寸的绑定名称。
     * @param {string} binding - 绑定名称
     * @returns {GridProp} 返回当前实例以支持链式调用
     */
    setGridDimensionBinding(binding) {
        this.grid_dimension_binding = binding;
        return this;
    }

    /**
     * 设置网格重新缩放方向。
     * @param {string} type - 可能值：vertical, horizontal, none（默认值：none）
     * @returns {GridProp} 返回当前实例以支持链式调用
     */
    setGridRescalingType(type = 'none') {
        this.grid_rescaling_type = type;
        return this;
    }

    /**
     * 设置网格填充方向。
     * @param {string} direction - 可能值：vertical, horizontal, none（默认值：none）
     * @returns {GridProp} 返回当前实例以支持链式调用
     */
    setGridFillDirection(direction = 'none') {
        this.grid_fill_direction = direction;
        return this;
    }

    /**
     * 设置处理集合的子元素名称。
     * @param {string} template - 元素名称（例如："common.container_item"）
     * @returns {GridProp} 返回当前实例以支持链式调用
     */
    setGridItemTemplate(template) {
        this.grid_item_template = template;
        return this;
    }

    /**
     * 设置预缓存的网格项目数量。
     * @param {number} count - 预缓存数量
     * @returns {GridProp} 返回当前实例以支持链式调用
     */
    setPrecachedGridItemCount(count) {
        this.precached_grid_item_count = count;
        return this;
    }
}

class Panel extends UIElement{
    constructor(id,template){
        super(id,"panel",template);
        this.control = new Control();
        this.layout = new Layout();
        this.dataBinding = new DataBinding();
        this.factory = new Factory();
    }

    setLayout(layout){
        this.layout = layout;
        return this;
    }

    serialize(){
        //序列化

        // 复制Layout的属性
        for (const key in this.layout) {
            if (this.layout.hasOwnProperty(key)) {
                this.properties.set(key, this.layout[key]);
            }
        }

        // 复制DataBinding的属性
        for (const key in this.dataBinding) {
            if (this.dataBinding.hasOwnProperty(key)) {
                this.properties.set(key, this.dataBinding[key]);
            }
        }

         // 复制Factory的属性
         for (const key in this.factory) {
            if (this.factory.hasOwnProperty(key)) {
                this.properties.set(key, this.factory[key]);
            }
        }

        // 复制Control的属性
        for (const key in this.control) {
            if (this.control.hasOwnProperty(key)) {
                this.properties.set(key, this.control[key]);
            }
        }

        // 调用父类的serialize方法
        return super.serialize();
    }
}

class Grid extends CollectionPanel{
    constructor(id, template){
        super(id,template);
        this.gridNum = 0;
        this.grid = new GridProp();
    }
    setGridProp(grid_prop){
        this.grid = grid_prop;
        return this;
    }
    addGridItem(grid_position,content){
        const grid_item = new Panel(`grid_item_${this.gridNum}`);
        grid_item.addProp("grid_position",grid_position);
        grid_item.addControl(content);
        this.addControl(grid_item);
        this.gridNum++;
        return this;
    }
    serialize(){
        
        // 复制grid的属性
        for (const key in this.grid) {
            if (this.grid.hasOwnProperty(key)) {
                this.properties.set(key, this.grid[key]);
            }
        }
        //类型修正
        this.properties.set("type", "grid");

        return super.serialize();
    }
}

/**
 * Sprite 类
 * 
 * 该类表示一个 Sprite 控件，用于管理图像纹理及其相关属性。
 * 
 * 属性：
 * - texture: string - 图像路径（从包根目录开始，例如："textures/ui/White"）
 * - allow_debug_missing_texture: boolean - 是否在纹理未找到时显示缺失纹理（默认值：true）
 * - uv: Vector [u, v] - 纹理映射的起始位置
 * - uv_size: Vector [width, height] - 纹理映射的大小
 * - texture_file_system: string - 纹理来源（默认值：InUserPackage）
 * - nineslice_size: int or Vector [x0, y0, x1, y1] - 9-slice 分割大小
 * - tiled: boolean or enum - 是否平铺纹理（可能值：true/false, x, y）
 * - tiled_scale: Vector [sX, sY] - 平铺纹理的缩放比例（默认值：false）
 * - clip_direction: enum - 裁剪方向的起始点（可能值：left, right, up, down, center）
 * - clip_ratio: float - 裁剪比例（范围：0.0 到 1.0）
 * - clip_pixelperfect: boolean - 是否尽可能保持像素精确裁剪
 * - keep_ratio: boolean - 是否在调整大小时保持比例（默认值：true）
 * - bilinear: boolean - 是否在调整大小时使用双线性函数（默认值：false）
 * - fill: boolean - 是否拉伸图像以适应大小（默认值：false）
 * - $fit_to_width: boolean - 是否适应宽度
 * - zip_folder: string - 压缩文件夹路径
 * - grayscale: boolean - 是否以黑白渲染图像（默认值：false）
 * - force_texture_reload: boolean - 是否在纹理路径更改时强制重新加载图像
 * - base_size: Vector [width, height] - 基础大小
 */

class Sprite {
    constructor() {
        /*
        this.texture = '';
        this.allow_debug_missing_texture = true;
        this.uv = null;
        this.uv_size = null;
        this.texture_file_system = 'InUserPackage';
        this.nineslice_size = null;
        this.tiled = false;
        this.tiled_scale = [1, 1];
        this.clip_direction = null;
        this.clip_ratio = null;
        this.clip_pixelperfect = false;
        this.keep_ratio = true;
        this.bilinear = false;
        this.fill = false;
        this.$fit_to_width = false;
        this.zip_folder = '';
        this.grayscale = false;
        this.force_texture_reload = false;
        this.base_size = null;
        */
    }

    /**
     * 设置图像纹理路径。
     * @param {string} texture - 图像路径（例如："textures/ui/White"）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setTexture(texture) {
        this.texture = texture;
        return this;
    }

    /**
     * 设置是否在纹理未找到时显示缺失纹理。
     * @param {boolean} allow - 是否显示缺失纹理（默认值：true）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setAllowDebugMissingTexture(allow = true) {
        this.allow_debug_missing_texture = allow;
        return this;
    }

    /**
     * 设置纹理映射的起始位置。
     * @param {number[]} uv - 起始位置，格式为 [u, v]
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setUV(uv) {
        this.uv = uv;
        return this;
    }

    /**
     * 设置纹理映射的大小。
     * @param {number[]} uvSize - 大小，格式为 [width, height]
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setUVSize(uvSize) {
        this.uv_size = uvSize;
        return this;
    }

    /**
     * 设置纹理来源。
     * @param {string} source - 纹理来源（可能值：InUserPackage, InAppPackage, RawPath, RawPersistent, InSettingsDir, InExternalDir, InServerPackage, InDataDir, InUserDir, InWorldDir, StoreCache, Usage is Unknown）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setTextureFileSystem(source = 'InUserPackage') {
        this.texture_file_system = source;
        return this;
    }

    /**
     * 设置 9-slice 分割大小。
     * @param {number|number[]} size - 9-slice 分割大小（可以是单个数字或 [x0, y0, x1, y1] 数组）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setNineSliceSize(size) {
        this.nineslice_size = size;
        return this;
    }

    /**
     * 设置是否平铺纹理。
     * @param {boolean|string} tiled - 是否平铺纹理（可能值：true/false, x, y）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setTiled(tiled) {
        this.tiled = tiled;
        return this;
    }

    /**
     * 设置平铺纹理的缩放比例。
     * @param {number[]} scale - 缩放比例，格式为 [sX, sY]（默认值：[1, 1]）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setTiledScale(scale = [1, 1]) {
        this.tiled_scale = scale;
        return this;
    }

    /**
     * 设置裁剪方向的起始点。
     * @param {string} direction - 裁剪方向（可能值：left, right, up, down, center）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setClipDirection(direction) {
        this.clip_direction = direction;
        return this;
    }

    /**
     * 设置裁剪比例。
     * @param {number} ratio - 裁剪比例（范围：0.0 到 1.0）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setClipRatio(ratio) {
        this.clip_ratio = ratio;
        return this;
    }

    /**
     * 设置是否尽可能保持像素精确裁剪。
     * @param {boolean} pixelPerfect - 是否保持像素精确裁剪
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setClipPixelPerfect(pixelPerfect = false) {
        this.clip_pixelperfect = pixelPerfect;
        return this;
    }

    /**
     * 设置是否在调整大小时保持比例。
     * @param {boolean} keep - 是否保持比例（默认值：true）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setKeepRatio(keep = true) {
        this.keep_ratio = keep;
        return this;
    }

    /**
     * 设置是否在调整大小时使用双线性函数。
     * @param {boolean} bilinear - 是否使用双线性函数（默认值：false）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setBilinear(bilinear = false) {
        this.bilinear = bilinear;
        return this;
    }

    /**
     * 设置是否拉伸图像以适应大小。
     * @param {boolean} fill - 是否拉伸图像（默认值：false）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setFill(fill = false) {
        this.fill = fill;
        return this;
    }

    /**
     * 设置是否适应宽度。
     * @param {boolean} fit - 是否适应宽度
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setFitToWidth(fit = false) {
        this.$fit_to_width = fit;
        return this;
    }

    /**
     * 设置压缩文件夹路径。
     * @param {string} folder - 压缩文件夹路径
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setZipFolder(folder) {
        this.zip_folder = folder;
        return this;
    }

    /**
     * 设置是否以黑白渲染图像。
     * @param {boolean} grayscale - 是否以黑白渲染图像（默认值：false）
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setGrayscale(grayscale = false) {
        this.grayscale = grayscale;
        return this;
    }

    /**
     * 设置是否在纹理路径更改时强制重新加载图像。
     * @param {boolean} force - 是否强制重新加载图像
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setForceTextureReload(force = false) {
        this.force_texture_reload = force;
        return this;
    }

    /**
     * 设置基础大小。
     * @param {number[]} size - 基础大小，格式为 [width, height]
     * @returns {Sprite} 返回当前实例以支持链式调用
     */
    setBaseSize(size) {
        this.base_size = size;
        return this;
    }
}

class Image extends UIElement{
    constructor(id,template){
        super(id,"image",template);
        this.sprite = new Sprite();
        this.control = new Control();
        this.layout = new Layout();
        this.dataBinding = new DataBinding();
        this.factory = new Factory();
    }
    setSprite(sprite){
        this.sprite = sprite;
        return this;
    }
    serialize(){
        //合并属性

        // 复制Sprite的属性
        for (const key in this.sprite) {
            if (this.sprite.hasOwnProperty(key)) {
                this.properties.set(key, this.sprite[key]);
            }
        }

        

        // 复制Layout的属性
        for (const key in this.layout) {
            if (this.layout.hasOwnProperty(key)) {
                this.properties.set(key, this.layout[key]);
            }
        }

        // 复制DataBinding的属性
        for (const key in this.dataBinding) {
            if (this.dataBinding.hasOwnProperty(key)) {
                this.properties.set(key, this.dataBinding[key]);
            }
        }

         // 复制Factory的属性
         for (const key in this.factory) {
            if (this.factory.hasOwnProperty(key)) {
                this.properties.set(key, this.factory[key]);
            }
        }

        // 复制Control的属性
        for (const key in this.control) {
            if (this.control.hasOwnProperty(key)) {
                this.properties.set(key, this.control[key]);
            }
        }

        // 调用父类的serialize方法
        return super.serialize();
    }
}

/**
 * Text 类
 * 
 * 该类表示一个文本控件，用于管理文本内容及其样式属性。
 * 
 * 属性：
 * - text: string - 文本内容（默认值：空字符串）
 * - color: Vector [r, g, b] - 文本颜色（RGB 值，范围 0.0 到 1.0，默认值：[1.0, 1.0, 1.0]）
 * - locked_color: Vector [r, g, b] - 父级禁用时的文本颜色
 * - shadow: boolean - 是否显示文本阴影（默认值：false）
 * - hide_hyphen: boolean - 是否隐藏断词连字符（默认值：false）
 * - notify_on_ellipses: string[] - 文本出现省略号时需通知的控件名称数组
 * - enable_profanity_filter: boolean - 是否启用脏话过滤（默认值：false）
 * - locked_alpha: float - 父级禁用时的透明度
 * - font_size: enum - 字体大小（可能值：small, normal, large, extra_large，默认值：normal）
 * - font_scale_factor: float - 字体缩放比例（默认值：1.0）
 * - localize: boolean - 是否启用本地化翻译（默认值：false）
 * - line_padding: number - 行间距
 * - font_type: enum - 字体类型（可能值：default, rune, unicode, smooth, MinecraftTen 或自定义字体，默认值：default）
 * - backup_font_type: enum - 备用字体类型（默认值：default）
 * - text_alignment: enum - 文本对齐方式（未定义时根据 anchor_from 和 anchor_to 自动调整）
 */

class Text {
    constructor() {
        /*
        this.text = '';
        this.color = [1.0, 1.0, 1.0];
        this.locked_color = null;
        this.shadow = false;
        this.hide_hyphen = false;
        this.notify_on_ellipses = [];
        this.enable_profanity_filter = false;
        this.locked_alpha = null;
        this.font_size = 'normal';
        this.font_scale_factor = 1.0;
        this.localize = false;
        this.line_padding = null;
        this.font_type = 'default';
        this.backup_font_type = 'default';
        this.text_alignment = null;
        */
    }

    /**
     * 设置文本内容。
     * @param {string} text - 文本内容
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setText(text = '') {
        this.text = text;
        return this;
    }

    /**
     * 设置文本颜色。
     * @param {number[]} color - RGB 颜色值（格式：[r, g, b]，默认值：[1.0, 1.0, 1.0]）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setColor(color = [1.0, 1.0, 1.0]) {
        this.color = color;
        return this;
    }

    /**
     * 设置父级禁用时的文本颜色。
     * @param {number[]} lockedColor - RGB 颜色值（格式：[r, g, b]）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setLockedColor(lockedColor) {
        this.locked_color = lockedColor;
        return this;
    }

    /**
     * 设置是否显示文本阴影。
     * @param {boolean} shadow - 是否显示阴影（默认值：false）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setShadow(shadow = false) {
        this.shadow = shadow;
        return this;
    }

    /**
     * 设置是否隐藏断词连字符。
     * @param {boolean} hide - 是否隐藏连字符（默认值：false）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setHideHyphen(hide = false) {
        this.hide_hyphen = hide;
        return this;
    }

    /**
     * 设置文本出现省略号时需通知的控件名称数组。
     * @param {string[]} controls - 控件名称数组
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setNotifyOnEllipses(controls) {
        this.notify_on_ellipses = controls;
        return this;
    }

    /**
     * 添加一个需通知省略号事件的控件名称。
     * @param {string} controlName - 控件名称
     * @returns {Text} 返回当前实例以支持链式调用
     */
    addNotifyOnEllipses(controlName) {
        this.notify_on_ellipses.push(controlName);
        return this;
    }

    /**
     * 设置是否启用脏话过滤。
     * @param {boolean} enable - 是否启用过滤（默认值：false）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setEnableProfanityFilter(enable = false) {
        this.enable_profanity_filter = enable;
        return this;
    }

    /**
     * 设置父级禁用时的透明度。
     * @param {number} alpha - 透明度（范围：0.0 到 1.0）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setLockedAlpha(alpha) {
        this.locked_alpha = alpha;
        return this;
    }

    /**
     * 设置字体大小。
     * @param {string} size - 字体大小（可能值：small, normal, large, extra_large，默认值：normal）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setFontSize(size = 'normal') {
        this.font_size = size;
        return this;
    }

    /**
     * 设置字体缩放比例。
     * @param {number} factor - 缩放比例（默认值：1.0）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setFontScaleFactor(factor = 1.0) {
        this.font_scale_factor = factor;
        return this;
    }

    /**
     * 设置是否启用本地化翻译。
     * @param {boolean} localize - 是否启用本地化（默认值：false）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setLocalize(localize = false) {
        this.localize = localize;
        return this;
    }

    /**
     * 设置行间距。
     * @param {number} padding - 行间距
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setLinePadding(padding) {
        this.line_padding = padding;
        return this;
    }

    /**
     * 设置字体类型。
     * @param {string} font - 字体类型（可能值：default, rune, unicode 等，默认值：default）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setFontType(font = 'default') {
        this.font_type = font;
        return this;
    }

    /**
     * 设置备用字体类型。
     * @param {string} backupFont - 备用字体类型（默认值：default）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setBackupFontType(backupFont = 'default') {
        this.backup_font_type = backupFont;
        return this;
    }

    /**
     * 设置文本对齐方式。
     * @param {string} alignment - 对齐方式（例如：left, right, center）
     * @returns {Text} 返回当前实例以支持链式调用
     */
    setTextAlignment(alignment) {
        this.text_alignment = alignment;
        return this;
    }
}

class Label extends UIElement{
    constructor(id,template){
        super(id,"label",template);
        this.text = new Text();
        this.control = new Control();
        this.layout = new Layout();
        this.dataBinding = new DataBinding();
        this.factory = new Factory();
    }
    setLayout(layout){
        this.layout = layout;
        return this;
    }
    
    setText(text){
        this.text = text;
        return this;
    }
    serialize(){
        //合并属性

        // 复制Text的属性
        for (const key in this.text) {
            if (this.text.hasOwnProperty(key)) {
                this.properties.set(key, this.text[key]);
            }
        }

        // 复制Layout的属性
        for (const key in this.layout) {
            if (this.layout.hasOwnProperty(key)) {
                this.properties.set(key, this.layout[key]);
            }
        }

        // 复制DataBinding的属性
        for (const key in this.dataBinding) {
            if (this.dataBinding.hasOwnProperty(key)) {
                this.properties.set(key, this.dataBinding[key]);
            }
        }

         // 复制Factory的属性
         for (const key in this.factory) {
            if (this.factory.hasOwnProperty(key)) {
                this.properties.set(key, this.factory[key]);
            }
        }

        // 复制Control的属性
        for (const key in this.control) {
            if (this.control.hasOwnProperty(key)) {
                this.properties.set(key, this.control[key]);
            }
        }

        // 调用父类的serialize方法
        return super.serialize();
    }
}

/**
 * ScrollView 类
 * 
 * 该类表示一个滚动视图控件，用于管理滚动行为及其相关属性。
 * 
 * 属性：
 * - scrollbar_track_button: string - 滚动条轨道按钮的 ID
 * - scrollbar_touch_button: string - 滚动条触摸按钮的 ID
 * - scroll_speed: number - 滚动速度
 * - gesture_control_enabled: boolean - 是否启用手势控制
 * - always_handle_scrolling: boolean - 是否始终处理滚动
 * - touch_mode: boolean - 是否启用触摸模式
 * - scrollbar_box: string - 滚动条滑块子元素的名称
 * - scrollbar_track: string - 滚动条轨道子元素的名称
 * - scroll_view_port: string - 视口子元素的名称
 * - scroll_content: string - 内容根父元素的名称
 * - scroll_box_and_track_panel: string - 包含滚动条滑块和轨道的子元素名称
 * - jump_to_bottom_on_update: boolean - 是否在更新时跳转到底部
 */

class ScrollView {
    constructor() {
        /*
        this.scrollbar_track_button = '';
        this.scrollbar_touch_button = '';
        this.scroll_speed = null;
        this.gesture_control_enabled = false;
        this.always_handle_scrolling = false;
        this.touch_mode = false;
        this.scrollbar_box = '';
        this.scrollbar_track = '';
        this.scroll_view_port = '';
        this.scroll_content = '';
        this.scroll_box_and_track_panel = '';
        this.jump_to_bottom_on_update = false;
        */
    }

    /**
     * 设置滚动条轨道按钮的 ID。
     * @param {string} buttonId - 滚动条轨道按钮的 ID
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setScrollbarTrackButton(buttonId) {
        this.scrollbar_track_button = buttonId;
        return this;
    }

    /**
     * 设置滚动条触摸按钮的 ID。
     * @param {string} buttonId - 滚动条触摸按钮的 ID
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setScrollbarTouchButton(buttonId) {
        this.scrollbar_touch_button = buttonId;
        return this;
    }

    /**
     * 设置滚动速度。
     * @param {number} speed - 滚动速度
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setScrollSpeed(speed) {
        this.scroll_speed = speed;
        return this;
    }

    /**
     * 设置是否启用手势控制。
     * @param {boolean} enabled - 是否启用手势控制（默认值：false）
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setGestureControlEnabled(enabled = false) {
        this.gesture_control_enabled = enabled;
        return this;
    }

    /**
     * 设置是否始终处理滚动。
     * @param {boolean} alwaysHandle - 是否始终处理滚动（默认值：false）
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setAlwaysHandleScrolling(alwaysHandle = false) {
        this.always_handle_scrolling = alwaysHandle;
        return this;
    }

    /**
     * 设置是否启用触摸模式。
     * @param {boolean} touchMode - 是否启用触摸模式（默认值：false）
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setTouchMode(touchMode = false) {
        this.touch_mode = touchMode;
        return this;
    }

    /**
     * 设置滚动条滑块子元素的名称。
     * @param {string} boxName - 滚动条滑块子元素的名称
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setScrollbarBox(boxName) {
        this.scrollbar_box = boxName;
        return this;
    }

    /**
     * 设置滚动条轨道子元素的名称。
     * @param {string} trackName - 滚动条轨道子元素的名称
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setScrollbarTrack(trackName) {
        this.scrollbar_track = trackName;
        return this;
    }

    /**
     * 设置视口子元素的名称。
     * @param {string} viewPortName - 视口子元素的名称
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setScrollViewPort(viewPortName) {
        this.scroll_view_port = viewPortName;
        return this;
    }

    /**
     * 设置内容根父元素的名称。
     * @param {string} contentName - 内容根父元素的名称
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setScrollContent(contentName) {
        this.scroll_content = contentName;
        return this;
    }

    /**
     * 设置包含滚动条滑块和轨道的子元素名称。
     * @param {string} panelName - 包含滚动条滑块和轨道的子元素名称
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setScrollBoxAndTrackPanel(panelName) {
        this.scroll_box_and_track_panel = panelName;
        return this;
    }

    /**
     * 设置是否在更新时跳转到底部。
     * @param {boolean} jump - 是否在更新时跳转到底部（默认值：false）
     * @returns {ScrollView} 返回当前实例以支持链式调用
     */
    setJumpToBottomOnUpdate(jump = false) {
        this.jump_to_bottom_on_update = jump;
        return this;
    }
}

class ScrollingPanel  extends UIElement{
    constructor(id,template){
        super(id,"scroll_view",template);
        this.input = new Input();
        this.scrollView = new ScrollView();
        this.control = new Control();
        this.layout = new Layout();
        this.dataBinding = new DataBinding();
        this.factory = new Factory();
    }
    serialize(){
        //合并属性

        // 复制Input的属性
        for (const key in this.input) {
            if (this.input.hasOwnProperty(key)) {
                this.properties.set(key, this.input[key]);
            }
        }

        // 复制scrollView的属性
        for (const key in this.scrollView) {
            if (this.scrollView.hasOwnProperty(key)) {
                this.properties.set(key, this.scrollView[key]);
            }
        }

        // 复制Layout的属性
        for (const key in this.layout) {
            if (this.layout.hasOwnProperty(key)) {
                this.properties.set(key, this.layout[key]);
            }
        }

        // 复制DataBinding的属性
        for (const key in this.dataBinding) {
            if (this.dataBinding.hasOwnProperty(key)) {
                this.properties.set(key, this.dataBinding[key]);
            }
        }

         // 复制Factory的属性
         for (const key in this.factory) {
            if (this.factory.hasOwnProperty(key)) {
                this.properties.set(key, this.factory[key]);
            }
        }

        // 复制Control的属性
        for (const key in this.control) {
            if (this.control.hasOwnProperty(key)) {
                this.properties.set(key, this.control[key]);
            }
        }

        // 调用父类的serialize方法
        return super.serialize();
    }
}

class StackPanel extends Panel{
    constructor(id, template){
        super(id, template);
        this.type = "stack_panel";
        this.orientation = "vertical";
        this.stackNum = 0;
        
        //init
        this.setLayout(new Layout().setSize(["100%","100%"]));
    }

    addStack(size,content,debug = false){
        const stack = new Panel(`stack${this.stackNum}`)
        .setLayout(new Layout().setSize(size))
        .addControl(content);
        if (debug ) stack.enableDebug();
        this.addControl(stack);
        this.stackNum++;
        return this;
    }
    /**
     * Possible values:
        vertical
        horizontal
     * @param {*} orientation 
     */
    setOrientation(orientation){
        this.orientation = orientation;
        return this;
    }
    
    serialize(){
        this.properties.set("type", "stack_panel");
        this.properties.set("orientation",this.orientation);
        return super.serialize();
    }
}

// UI 文件核心类
class UISystem {

    constructor(identifier, path) {
      this.identifier = identifier;
      this.namespace = identifier.split(':')[0];
      this.name = identifier.split(':')[1];
      this.path = path;
      this.elements = new Map();
      this.animations = new Map();

      UISystemRegistry.registerUISystem(this);
    }
  
    addElement(element) {
        this.elements.set(element.id, element);
        return this;
    }

    getElement(element_name){
        return this.elements.get(element_name);
    }


    addAnimation(name,value){
        this.animations.set(name,value);
    }

    getAnimation(animation_name){
        return this.animations.get(animation_name);
    }
  
    @Serializer
    toObject() {
        const ui = {namespace:this.namespace};
        //序列化
        this.elements.forEach((value,key)=>{
            //console.log("elements key:",key)
            //console.log("elements value:",value);
            ui[key] = value.serialize()[value.id];
        });
        //console.log("ui:",ui)
        return ui;
    }
}

const small_chest_screen = new UIElement("small_chest_screen",undefined,"common.inventory_screen_common");
      small_chest_screen.addVariable("new_container_title|default","$container_title");

class ChestUISystem{
    static chest_screen = new UISystem("chest:chest_screen","ui/");
    static registerContainerUI(new_container_title, ui_system_root_panel){
            small_chest_screen.addModification({
              array_name: "variables",
              operation:Modifications.OPERATION.INSERT_BACK,
              value:[
                {
                  requires: `($new_container_title = '${new_container_title}')`,
                  $root_panel: ui_system_root_panel,
                  $screen_content: ui_system_root_panel
                }
              ]
          });
        this.chest_screen.addElement(small_chest_screen);
    }
}

/**
 * 自定义容器 UI 系统类，用于创建和管理容器界面。
 * 支持动态添加网格项、设置标题、调整尺寸等功能。
 */
class ContainerUISystem {
  /** @private 网格项的数量 */
  #gridItemNum = 3;

  /**
   * 构造函数，初始化容器 UI 系统。
   * @param {string} identifier - 容器的唯一标识符。
   * @param {string} path - 资源路径。
   */
  constructor(identifier, path) {
    this.system = new UISystem(identifier, path);
    this.title = "自定义容器";
    this.root_panel_size = [200, 200];
    this.gridDimension = [3, 1];

    this.output_grids = []; // 记录输出槽

    this.main_panel = new Panel("main_panel");
    this.grids = new Grid("grids");

    // 初始化
    this.#register();
    this.#updateSystem();
  }

  setInputGrid(output_arr){
    this.output_grids = output_arr;
  }

  /**
   * 向网格中添加一个网格项。
   * @param {number[]} grid_position - 网格项的位置 [行, 列] 用于定位实体的背包槽。
   * @param {number[]} offset - 网格项的偏移量 [x, y]。
   * @param {Object} [options] - 可选参数，用于配置网格项。
   * @param {boolean} [options.enable=true] - 是否启用该网格项，默认为 true。
   * @param {number[]} [options.size] - 网格项的大小 [宽度, 高度]。
   * @param {UIElement[]} [options.background_images] - 网格项的背景图片控件。
   * @returns {ContainerUISystem} 返回当前实例以支持链式调用。
   */
  addGridItem(grid_position, offset, options) {

    const gridItem = new UIElement("grid_item",undefined, "chest.chest_grid_item");
    gridItem.addProp("offset",offset);
    gridItem.addProp("enable",options.enable);
    gridItem.addProp("size",options.size);
    gridItem.addVariable("background_images|default",options.background_images);

    this.grids.addGridItem(grid_position, gridItem);
    this.#updateSystem();
    return this;
  }

  addInputGrid(grid_position,offset,options){
    this.addGridItem(grid_position,offset,options);
  }

  addOutputGrid(grid_position,offset,options){
    //设置
    options.enable = false;
    this.addGridItem(grid_position,offset,options);
  }

  /**
   * 向主面板中添加一个 UI 元素。
   * @param {Object} element - 要添加的 UI 元素。
   * @returns {ContainerUISystem} 返回当前实例以支持链式调用。
   */
  addElementToMain(element) {
    this.main_panel.addControl(element);
    this.#updateSystem();
    return this;
  }

  /**
   * 设置网格的维度（行和列）。
   * @param {number[]} dimension - 网格的维度 [行数, 列数]。
   * @returns {ContainerUISystem} 返回当前实例以支持链式调用。
   */
  setGridDimension(dimension) {
    this.gridDimension = dimension;
    this.#gridItemNum = dimension[0] * dimension[1];
    this.#updateSystem();
    return this;
  }

  /**
   * 设置容器的标题。
   * @param {string} title - 容器的标题。
   * @returns {ContainerUISystem} 返回当前实例以支持链式调用。
   */
  setTitle(title) {
    this.title = title;
    this.#updateSystem();
    return this;
  }

  /**
   * 设置根面板的尺寸。
   * @param {number[]} size - 根面板的尺寸 [宽度, 高度]。
   * @returns {ContainerUISystem} 返回当前实例以支持链式调用。
   */
  setSize(size) {
    this.root_panel_size = size;
    this.#updateSystem();
    return this;
  }
  setItemMatrix(n,matrix){
    //5*5
    //设置
    this.setGridDimension([1,n]); //n*n列
    const offset_marix = [];
    for(let i = 0;i< n ;i++) offset_marix.push([(-18)*Math.floor(n/2),i*(-18)]);
    //现在他们在右上角了
    console.log("offoset:"+offset_marix);

    matrix.forEach((row, rowIndex) => {
      console.log("row:"+row);
      row.forEach((value, colIndex) => {
        if (value === 0) return;
        console.log("value:"+value);
        //y
        offset_marix[value-1][1] += rowIndex*(18);
        //x
        offset_marix[value-1][0] += colIndex*(18);

      });
    });

    offset_marix.forEach((v,i)=>{
      if(this.output_grids.indexOf(v)){
        this.addOutputGrid([0,i],v);
        return 
      }
      this.addGridItem([0,i],v);
    });
  }

  /**
   * 注册容器 UI 系统。
   * @private
   */
  #register() {
    ChestUISystem.registerContainerUI(this.system.name, `${this.system.namespace}.container_root_panel`);
  }

  /**
   * 更新 UI 系统，根据当前属性重新构建 UI。
   * @private
   */
  #updateSystem() {
    const container_root_panel = new Panel("container_root_panel");
    // 设置根面板的尺寸
    container_root_panel.setLayout(new Layout().setSize(this.root_panel_size));

    // 添加控件
    container_root_panel.addControls([
      // 通用面板
      {
        "common_panel@common.common_panel": {},
      },
      // 飞行动画图标按钮
      {
        "inventory_selected_icon_button@common.inventory_selected_icon_button": {},
      },
      // 主内容面板
      new StackPanel("container_panel")
        .setControl(new Control().setLayer(2))
        // 标题
        .addStack(
          ["100%", "10%"],
          new Label("title")
            .setControl(new Control().setLayer(12))
            .setText(new Text().setText(this.title).setColor([0, 0, 0]))
        )
        // 自定义网格
        .addStack(
          ["100%", "40%"],
          //有一丢丢bug
          this.main_panel.control =
            this.grids.setGridProp(
              new GridProp()
                .setGridDimensions(this.gridDimension)
                .setGridItemTemplate("chest.chest_grid_item")
            ).setCollectionName("container_items")
          
        )
        // 玩家库存面板
        .addStack(
          ["100%", "50%"],
          new Panel("inventory_panel").addControls([
            // 玩家背包
            {
              "inventory_panel_bottom_half_with_label@common.inventory_panel_bottom_half_with_label": {},
            },
            // 物品栏
            {
              "hotbar_grid@common.hotbar_grid_template": {},
            },
            {
              "inventory_take_progress_icon_button@common.inventory_take_progress_icon_button": {},
            },
          ])
        ),
    ]);

    // 更新系统
    this.system.addElement(container_root_panel);
  }
}


/**
 * 例子
 * 
 * // 创建一个新的容器 UI 系统
const containerUI = new ContainerUISystem("custom_container", "ui/");

// 设置标题和尺寸
containerUI.setTitle("我的自定义容器").setSize([300, 400]);

// 设置网格维度（2 行 1 列）
containerUI.setGridDimension([2, 1]);

// 添加网格项
containerUI.addGridItem([0, 0], [10, 10]); // 在将实体背包(0, 0) 项映射于此，偏移量为 [10, 10]
containerUI.addGridItem([1, 0], [20, 20]); // 在将实体背包(1, 0) 项映射于此，偏移量为 [20, 20]

// 向主面板添加自定义元素
const customElement = new Panel("custom_element");
containerUI.addElementToMain(customElement);
 */

/**
 * DataBinding 类
 * 
 * 该类表示数据绑定配置，用于将硬编码值或变量绑定到元素属性。
 * 
 * 属性：
 * - ignored: boolean - 是否忽略绑定（默认值：false）
 * - binding_type: enum - 绑定类型（可能值：global, view, collection, collection_details, none）
 * - binding_name: string - 数据绑定名称或条件的值
 * - binding_name_override: string - 应用 binding_name 值的 UI 元素属性名称
 * - binding_collection_name: string - 要使用的集合名称
 * - binding_collection_prefix: string - 集合前缀
 * - binding_condition: enum - 数据绑定的条件（可能值：always, always_when_visible, visible, once, none, visibility_changed）
 * - source_control_name: string - 要观察其属性值的 UI 元素名称
 * - source_property_name: string - 存储 source_control_name 引用的 UI 元素的属性值
 * - target_property_name: string - 应用 source_property_name 值的 UI 元素属性
 * - resolve_sibling_scope: boolean - 是否允许选择同级元素而非子元素（默认值：false）
 */

class DataBindingObject {
    constructor() {
        /*
        this.ignored = false;
        this.binding_type = null;
        this.binding_name = '';
        this.binding_name_override = '';
        this.binding_collection_name = '';
        this.binding_collection_prefix = '';
        this.binding_condition = null;
        this.source_control_name = '';
        this.source_property_name = '';
        this.target_property_name = '';
        this.resolve_sibling_scope = false;
        */
    }

    /**
     * 设置是否忽略绑定。
     * @param {boolean} ignored - 是否忽略绑定（默认值：false）
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setIgnored(ignored = false) {
        this.ignored = ignored;
        return this;
    }

    /**
     * 设置绑定类型。
     * @param {string} type - 绑定类型（可能值：global, view, collection, collection_details, none）
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setBindingType(type) {
        this.binding_type = type;
        return this;
    }

    /**
     * 设置数据绑定名称或条件的值。
     * @param {string} name - 数据绑定名称或条件的值
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setBindingName(name) {
        this.binding_name = name;
        return this;
    }

    /**
     * 设置应用 binding_name 值的 UI 元素属性名称。
     * @param {string} nameOverride - 应用 binding_name 值的 UI 元素属性名称
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setBindingNameOverride(nameOverride) {
        this.binding_name_override = nameOverride;
        return this;
    }

    /**
     * 设置要使用的集合名称。
     * @param {string} collectionName - 集合名称
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setBindingCollectionName(collectionName) {
        this.binding_collection_name = collectionName;
        return this;
    }

    /**
     * 设置集合前缀。
     * @param {string} prefix - 集合前缀
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setBindingCollectionPrefix(prefix) {
        this.binding_collection_prefix = prefix;
        return this;
    }

    /**
     * 设置数据绑定的条件。
     * @param {string} condition - 数据绑定的条件（可能值：always, always_when_visible, visible, once, none, visibility_changed）
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setBindingCondition(condition) {
        this.binding_condition = condition;
        return this;
    }

    /**
     * 设置要观察其属性值的 UI 元素名称。
     * @param {string} controlName - UI 元素名称
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setSourceControlName(controlName) {
        this.source_control_name = controlName;
        return this;
    }

    /**
     * 设置存储 source_control_name 引用的 UI 元素的属性值。
     * @param {string} propertyName - 属性名称
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setSourcePropertyName(propertyName) {
        this.source_property_name = propertyName;
        return this;
    }

    /**
     * 设置应用 source_property_name 值的 UI 元素属性。
     * @param {string} propertyName - 属性名称
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setTargetPropertyName(propertyName) {
        this.target_property_name = propertyName;
        return this;
    }

    /**
     * 设置是否允许选择同级元素而非子元素。
     * @param {boolean} resolve - 是否允许选择同级元素（默认值：false）
     * @returns {DataBindingObject} 返回当前实例以支持链式调用
     */
    setResolveSiblingScope(resolve = false) {
        this.resolve_sibling_scope = resolve;
        return this;
    }
}

const ServerFormSystem = new UISystem("server_form:server_form","ui/");


//表单按钮模板
const form_button_template$1 = new Button("sapdon_form_button_template","common.button");
      form_button_template$1.addVariable("pressed_button_name", "button.form_button_click");
      form_button_template$1.addVariable("default_texture|default","textures/gui/newgui/buttons/borderless/light");
      form_button_template$1.addVariable("hover_texture|default","textures/gui/newgui/buttons/borderless/lighthover");
      form_button_template$1.addVariable("pressed_texture|default","textures/gui/newgui/buttons/borderless/lightpressed");
      form_button_template$1.addVariable("binding_button_text|default","");
      form_button_template$1.dataBinding.addDataBinding(
        new DataBindingObject().setBindingType("collection_details")
        .setBindingCollectionName("form_buttons")
      );
      form_button_template$1.dataBinding.addDataBinding(
        new DataBindingObject().setBindingType("collection")
        .setBindingCollectionName("form_buttons")
        .setBindingName("#form_button_text")
      );
      form_button_template$1.dataBinding.addDataBinding(
        new DataBindingObject().setBindingType("view")
        .setSourcePropertyName("($binding_button_text = #form_button_text)")
        .setTargetPropertyName("#visible")
      );
      
      form_button_template$1.addControls([
        new Image("default").setSprite(
            new Sprite().setTexture("$default_texture")
        ),
        new Image("hover").setSprite(
            new Sprite().setTexture("$hover_texture")
        ),
        new Image("pressed").setSprite(
            new Sprite().setTexture("$pressed_texture")
        )
      ]);


//f
const form_button_panel$1 = new Panel("sapdon_form_button_factory");
      form_button_panel$1.addProp("type","collection_panel");
      form_button_panel$1.factory.setName("buttons").setControlName("sapdon_form_button_template");
      form_button_panel$1.addProp("collection_name","form_buttons");
      form_button_panel$1.dataBinding.addDataBinding(
        new DataBindingObject().setBindingName("#form_button_length")
        .setBindingNameOverride("#collection_length")
      );

ServerFormSystem.addElement(form_button_template$1);
ServerFormSystem.addElement(form_button_panel$1);


class ServerUISystem  {
  static #binding_map = new Map();

  static #binding_title_list = [];

  static addBindingTitle(title_name){
    this.#binding_title_list.push(title_name);
  }

  static getBindingTitleList(){
    //console.log("arrr:",Array.from(this.#binding_map.keys()))
    return  this.#binding_title_list.concat(Array.from(this.#binding_map.keys()));

  }

  static getBindingContentList(){
    return  Array.from(this.#binding_map.values());
  }

  static bindingTitlewithContent(title_name, content){
    //添加绑定
    this.#binding_map.set(title_name,content);
    this.#updateServerFormSystem();
  }

  static #updateServerFormSystem(){
     //文本化处理
    //console.log("ttttt:",this.getBindingTitleList())
    const user_custom_ui_text = this.getBindingTitleList().map((title_name)=>{
      console.log("title_name",title_name);
      return `'${title_name}'`;
    }).join('-');

    const long_form = new UIElement("long_form")
      .addModification({
          array_name: "bindings",
          operation:Modifications.OPERATION.INSERT_BACK,
          value:[
              new DataBindingObject().setBindingName("#title_text"),
              new DataBindingObject().setBindingType("view")
              .setSourcePropertyName(`((#title_text - ${user_custom_ui_text}) = #title_text)`)
              .setTargetPropertyName("#visible")
          ]
      });

    const custom_server_form_factory =  new Panel("custom_server_form_factory");
        custom_server_form_factory.factory.setName("server_form_factory") //工程名被绑定至表单，不可改动
        .setControlIds({"long_form": "@server_form.custom_root_panel"});

    //加入自定义表单内容
    const main_screen_content = new UIElement("main_screen_content")
      .addModification({
        array_name: "controls",
        operation:Modifications.OPERATION.INSERT_BACK,
        value:[
          custom_server_form_factory.serialize()
        ]
    });

    //自定义ui模板
    const custom_ui_template = new Panel("custom_ui_template");
        custom_ui_template.dataBinding.addDataBinding(
          new DataBindingObject().setBindingName("#title_text")
        ).addDataBinding(
          new DataBindingObject().setBindingType("view")
          .setSourcePropertyName("(#title_text = $binding_text)")
          .setTargetPropertyName("#visible")
        );
        custom_ui_template.control.addControl(
          new UIElement("main",undefined,"$main_content").serialize()
        );

    //类似于 root ，决定什么时候加载自定义界面 ，不可改动
    const custom_form_root = new Panel("custom_form_root");
        //custom_form_root.addVariable("title_needs_to_contain",user_custom_ui_text)
        custom_form_root.dataBinding.addDataBinding(
          new DataBindingObject().setBindingType("view")
          .setSourceControlName("custom_root_panel")
          .setSourcePropertyName(`(not ((#title_text - ${user_custom_ui_text}) = #title_text))`)
          .setTargetPropertyName("#visible")
        );

    //用户自定义ui内容绑定
    this.#binding_map.forEach((content,key)=>{
      //加入 root
      custom_form_root.control.addControl(
        new UIElement("custom_ui_"+key,undefined,"custom_ui_template")
        .addVariable("main_content",content)
        .addVariable("binding_text",key).serialize()
      );
    });

    //类似于 sreen，必要，不可改动
    const custom_root_panel = new Panel("custom_root_panel");
        custom_root_panel.dataBinding.addDataBinding(new DataBindingObject().setBindingName("#title_text"));
        custom_root_panel.control.addControl(custom_form_root.serialize());
    
    ServerFormSystem
    .addElement(custom_ui_template)   
    .addElement(long_form)
    .addElement(custom_root_panel)
    .addElement(main_screen_content);
  }
}

/**
 * ButtonMapping 类
 * 
 * 该类表示按钮映射配置，用于定义输入事件的映射关系。
 * 
 * 属性：
 * - ignored: boolean - 是否忽略映射（默认值：false）
 * - from_button_id: string - 触发事件的按钮 ID
 * - to_button_id: string - 事件触发时执行的按钮 ID
 * - mapping_type: enum - 映射类型（可能值：global, pressed, double_pressed, focused）
 * - scope: enum - 映射范围（可能值：view, controller）
 * - input_mode_condition: enum - 输入模式条件（可能值：not_gaze, not_gamepad, gamepad_and_not_gaze）
 * - ignore_input_scope: boolean - 是否忽略输入范围
 * - consume_event: boolean - 是否消耗事件
 * - handle_select: boolean - 是否处理选择事件
 * - handle_deselect: boolean - 是否处理取消选择事件
 * - button_up_right_of_first_refusal: boolean - 是否在首次拒绝后处理按钮释放事件
 */

class ButtonMapping {
    constructor() {
        this.ignored = false;
        this.from_button_id = '';
        this.to_button_id = '';
        this.mapping_type = null;
        this.scope = null;
        this.input_mode_condition = null;
        this.ignore_input_scope = false;
        this.consume_event = false;
        this.handle_select = false;
        this.handle_deselect = false;
        this.button_up_right_of_first_refusal = false;
    }

    /**
     * 设置是否忽略映射。
     * @param {boolean} ignored - 是否忽略映射（默认值：false）
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setIgnored(ignored = false) {
        this.ignored = ignored;
        return this;
    }

    /**
     * 设置触发事件的按钮 ID。
     * @param {string} fromButtonId - 触发事件的按钮 ID
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setFromButtonId(fromButtonId) {
        this.from_button_id = fromButtonId;
        return this;
    }

    /**
     * 设置事件触发时执行的按钮 ID。
     * @param {string} toButtonId - 事件触发时执行的按钮 ID
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setToButtonId(toButtonId) {
        this.to_button_id = toButtonId;
        return this;
    }

    /**
     * 设置映射类型。
     * @param {string} mappingType - 映射类型（可能值：global, pressed, double_pressed, focused）
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setMappingType(mappingType) {
        this.mapping_type = mappingType;
        return this;
    }

    /**
     * 设置映射范围。
     * @param {string} scope - 映射范围（可能值：view, controller）
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setScope(scope) {
        this.scope = scope;
        return this;
    }

    /**
     * 设置输入模式条件。
     * @param {string} condition - 输入模式条件（可能值：not_gaze, not_gamepad, gamepad_and_not_gaze）
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setInputModeCondition(condition) {
        this.input_mode_condition = condition;
        return this;
    }

    /**
     * 设置是否忽略输入范围。
     * @param {boolean} ignore - 是否忽略输入范围
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setIgnoreInputScope(ignore = false) {
        this.ignore_input_scope = ignore;
        return this;
    }

    /**
     * 设置是否消耗事件。
     * @param {boolean} consume - 是否消耗事件
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setConsumeEvent(consume = false) {
        this.consume_event = consume;
        return this;
    }

    /**
     * 设置是否处理选择事件。
     * @param {boolean} handle - 是否处理选择事件
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setHandleSelect(handle = false) {
        this.handle_select = handle;
        return this;
    }

    /**
     * 设置是否处理取消选择事件。
     * @param {boolean} handle - 是否处理取消选择事件
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setHandleDeselect(handle = false) {
        this.handle_deselect = handle;
        return this;
    }

    /**
     * 设置是否在首次拒绝后处理按钮释放事件。
     * @param {boolean} handle - 是否处理按钮释放事件
     * @returns {ButtonMapping} 返回当前实例以支持链式调用
     */
    setButtonUpRightOfFirstRefusal(handle = false) {
        this.button_up_right_of_first_refusal = handle;
        return this;
    }
}

//表单按钮模板
const form_button_template = new Button("form_button_template","common.button");
      form_button_template.addVariable("default_texture|default","");
      form_button_template.addVariable("hover_texture|default","");
      form_button_template.addVariable("pressed_texture|default","");
      form_button_template.addVariable("binding_button_text|default","");
      form_button_template.dataBinding.addDataBinding(
        new DataBindingObject().setBindingType("collection_details")
        .setBindingCollectionName("form_buttons")
      );
      form_button_template.dataBinding.addDataBinding(
        new DataBindingObject().setBindingType("collection")
        .setBindingCollectionName("form_buttons")
        .setBindingName("#form_button_text")
      );
      form_button_template.dataBinding.addDataBinding(
        new DataBindingObject().setBindingType("view")
        .setSourcePropertyName("($binding_button_text = #form_button_text)")
        .setTargetPropertyName("#visible")
      );
      
      form_button_template.addControls([
        new Image("default").setSprite(
            new Sprite().setTexture("$default_texture")
        ),
        new Image("hover").setSprite(
            new Sprite().setTexture("$hover_texture")
        ),
        new Image("pressed").setSprite(
            new Sprite().setTexture("$pressed_texture")
        )
      ]);

//f
const form_button_panel = new Panel("form_button_factory").enableDebug();
      form_button_panel.addProp("type","collection_panel");
      form_button_panel.factory.setName("buttons").setControlName("$button_control");
      form_button_panel.addProp("collection_name","form_buttons");
      form_button_panel.dataBinding.addDataBinding(
        new DataBindingObject().setBindingName("#form_button_length")
        .setBindingNameOverride("#collection_length")
      );

const page_template = new StackPanel("page_template").setOrientation("horizontal")
      .addVariable("page_left_content | default","")
      .addVariable("page_right_content | default","")
        .setLayout(
            new Layout().setSize(["90%","90%"])
        )
        .addStack(["50%","100%"],
            new UIElement("page_left",undefined,"$page_left_content").serialize()
        )
        .addStack(["50%","100%"],
            new UIElement("page_right",undefined,"$page_right_content").serialize()
        );
        page_template.dataBinding.addDataBinding(
            new DataBindingObject().setBindingType("view")
            .setSourcePropertyName("($binding_text = #form_text)")
            .setTargetPropertyName("#visible")
        );




class Guidebook {
    #bindingList = [];

    constructor(identifier, path ){
        this.system = new UISystem(identifier, path);

        //init
        this.#binding();
        this.#addTemplate();
        this.#updateSystem();
    }

    addPageBinding(page_name, left_control_name, right_control_name){
        this.#bindingList.push({
            page_name:page_name,
            left_control_name:left_control_name,
            right_control_name:right_control_name
        });
        //更新系统
        this.#updateSystem();

        return this;
    }

    addPage(page_name, left_control, right_control){
        this.addPageBinding(
            page_name,
            left_control.name,
            right_control.name
        );
        //添加元素
        this.addElement(left_control);
        this.addElement(right_control);

        //更新系统
        this.#updateSystem();

        return this;
    }

    addElement(element){
        this.system.addElement(element);
        return this;
    }

    #binding(){
        ServerUISystem.bindingTitlewithContent(
            this.system.name,
            `${this.system.namespace}.guidebook_root_panel`
        );
    }

    #addTemplate(){
        this.addElement(form_button_template);
        this.addElement(form_button_panel);
        this.addElement(page_template);

        //
        this.#updateSystem();
    }
    #updateSystem(){
        const guidebook_root_panel = new Panel("guidebook_root_panel");

        //开启调试框
        //guidebook_root_panel.enableDebug()
        //设置布局属性
        guidebook_root_panel.setLayout(
          new Layout().setSize([320,207])
        );
        //添加子元素
        guidebook_root_panel.addControls([
          //添加背景
          new UIElement("book_background",undefined, "book.book_background"),
          //添加书页
          new StackPanel("book_page_stack_panel").setOrientation("horizontal")
          .setLayout(
              new Layout().setSize([320,207])
          )
          .addVariable("page_size",[160,207])
          .addStack("$page_size",
              new Panel("book_left_panel").addControls([
                  {
                      "page_crease_image@book.page_crease_left_image": {
                        "size": [ "100% - 40px", "100% - 14px" ],
                        "offset": [ 0, -2 ]
                      }
                  },
                  {
                      "page_edge_image@book.page_edge_left_image": {
                        "size": [ "100% - 7px", "100% - 16px" ],
                        "offset": [7,-1]
                      }
                  }
              ]).serialize()
          )
          .addStack("$page_size",
             new Panel("book_right_panel").addControls([
                  {
                      "page_crease_image@book.page_crease_right_image": {
                        "size": [ "100% - 40px", "100% - 14px" ],
                        "offset": [ 0, -2 ]
                      }
                  },
                  {
                      "page_edge_image@book.page_edge_right_image": {
                        "size": [ "100% - 7px", "100% - 16px" ],
                        "offset": [-7,-1]
                      }
                  }
              ]).serialize()
          ),
          //添加书页内容
          new Panel("page_content_root")
          .setControl(
              new Control().setLayer(5)
          )
          .setLayout(
              new Layout().setSize(["90%","90%"])
          )
          .addControls([
              new Panel("label_text_panel").setLayout(
                new Layout().setSize([32,8]).setAnchorFrom("bottom_middle")
                .setAnchorTo("bottom_middle")
              ).addControl(
                new Label("page_content").setText(
                    new Text().setText("#form_text").setColor([0,0,0])
                )
              )
             ,
              ...this.#bindingList.map(({page_name,left_control_name,right_control_name},index)=>{
                return new UIElement(`page_index_${index}`,undefined,"page_template")
                .addVariable("binding_text",page_name)
                .addVariable("page_left_content",left_control_name)
                .addVariable("page_right_content",right_control_name)
              })
              /*
              new UIElement("page_1",undefined,"page_template")
              .addVariable("binding_text","page_index1")
              .addVariable("page_left_content","page_left_content")
              .addVariable("page_right_content","page_right_content"),
              new UIElement("page_2",undefined,"page_template")
              .addVariable("binding_text","page_index2")
              .addVariable("page_left_content","page_left_content")
              .addVariable("page_right_content","page_right_content"),
              new UIElement("page_3",undefined,"page_template")
              .addVariable("binding_text","page_index3")
              .addVariable("page_left_content","page_left_content")
              .addVariable("page_right_content","page_right_content")*/
  
          ])
          ,
          //添加关闭按钮
          new Button("close_button").setLayout(
              new Layout().setSize([14,14])
              .setAnchorFrom("top_right")
              .setAnchorTo("top_right")
          )
          .setInput(
              new Input().setButtonMappings([
                  new ButtonMapping().setMappingType("pressed")
                  .setFromButtonId("button.menu_select")
                  .setToButtonId("button.menu_exit")
              ])
          )
          .addControls([
              new UIElement("default",undefined,"book.close_button_default"),
              new UIElement("hover",undefined,"book.close_button_hover"),
              new UIElement("pressed",undefined,"book.close_button_pressed"),
          ]),
          //添加下一页按钮
          new Panel("prev_button_panel").enableDebug()
          .setControl(
              new Control().setLayer(5)
          )
          .setLayout(
              new Layout().setSize([24,24])
              .setOffset([7,-9])
              .setAnchorFrom("bottom_left")
              .setAnchorTo("bottom_left")
          )
          .addControl(
              new UIElement("prev_button",undefined,"form_button_factory")
              .addVariable("binding_button_text","test1")
              .addVariable("button_control",`${this.system.namespace}.form_button_template`)
              .addVariable("pressed_button_name", "button.form_button_click")
              .addVariable("default_texture","textures/ui/book_pageleft_default")
              .addVariable("hover_texture","textures/ui/book_pageleft_hover")
              .addVariable("pressed_texture","textures/ui/book_pageleft_pressed")
          )
          ,
          new Panel("next_button_panel").enableDebug()
          .setControl(
              new Control().setLayer(5)
          )
          .setLayout(
              new Layout().setSize([24,24])
              .setOffset([-7,-9])
              .setAnchorFrom("bottom_right")
              .setAnchorTo("bottom_right")
          )
          .addControl(
              new UIElement("next_button",undefined,"form_button_factory")
              .addVariable("binding_button_text","test2")
              .addVariable("button_control","sapdon_guidebook.form_button_template")
              .addVariable("pressed_button_name", "button.form_button_click")
              .addVariable("default_texture","textures/ui/book_pageright_default")
              .addVariable("hover_texture","textures/ui/book_pageright_hover")
              .addVariable("pressed_texture","textures/ui/book_pageright_pressed")
          )
        ]);

        this.addElement(guidebook_root_panel);
    }

}

export { BlockAPI, BlockComponent, Button, ButtonMapping, ChestUISystem, CollectionPanel, ContainerUISystem, Control, DataBinding, DataBindingObject, EntityAPI, Factory, FeatureAPI, FlipbookTextures, Grid, GridProp, Guidebook, Image, Input, ItemAPI, ItemCategory, ItemComponent, ItemTextureManager, Label, Layout, Matrix, Modifications, Panel, RecipeAPI, ScrollView, ScrollingPanel, Serializable, Serializer, ServerFormSystem, ServerUISystem, Sound, Sprite, StackPanel, Text, UIElement, UISystem, UISystemRegistry, UISystemRegistryServer, Vec3, Vec4, decode, defaultSerializer, encode, f64, form_button_panel$1 as form_button_panel, getMetadata, getOrCreateMetadata, isRawJSON, jsonEncodeDecoder, jsonEncoderReplacer, registry, serialize, terrainTextureManager };
